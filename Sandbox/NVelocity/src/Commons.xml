<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Commons</name>
    </assembly>
    <members>
        <member name="T:Commons.Collections.LRUMap">
            <summary>
            A keyed list with a fixed maximum size which removes
            the least recently used entry if an entry is added when full.
            </summary>
        </member>
        <member name="F:Commons.Collections.LRUMap.DEFAULT_MAX_SIZE">
            <summary>
            Default maximum size 
            </summary>
        </member>
        <member name="F:Commons.Collections.LRUMap.maxSize">
            <summary>
            Maximum size 
            </summary>
        </member>
        <member name="M:Commons.Collections.LRUMap.RemoveLRU">
            <summary>
            Remove the least recently used entry (the last one in the list)
            </summary>
        </member>
        <member name="P:Commons.Collections.LRUMap.MaxSize">
            <summary>
            Gets the maximum size of the map (the bound).
            </summary>
        </member>
        <member name="T:Commons.Collections.PropertiesTokenizer">
            <summary>
            This class divides into tokens a property value.  Token
            separator is "," but commas into the property value are escaped
            using the backslash in front.
            </summary>
        </member>
        <member name="F:Commons.Collections.PropertiesTokenizer.DELIMITER">
            <summary>
            The property delimiter used while parsing (a comma).
            </summary>
        </member>
        <member name="M:Commons.Collections.PropertiesTokenizer.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="string">A String</param>
        </member>
        <member name="M:Commons.Collections.PropertiesTokenizer.HasMoreTokens">
            <summary> Check whether the object has more tokens.
            </summary>
            <returns>True if the object has more tokens.
            </returns>
        </member>
        <member name="M:Commons.Collections.PropertiesTokenizer.NextToken">
            <summary>
            Get next token.
            </summary>
            <returns>A String</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Commons.Collections.ExtendedProperties" -->
        <member name="F:Commons.Collections.ExtendedProperties.defaults">
            <summary> Default configurations repository.
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.file">
            <summary> The file connected to this repository (holding comments and
            such).
            *
            @serial
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.basePath">
            <summary> Base path of the configuration file used to create
            this ExtendedProperties object.
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.fileSeparator">
            <summary> File separator.
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.isInitialized">
            <summary> Has this configuration been intialized.
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.include">
            <summary> This is the name of the property that can point to other
            properties file for including other properties files.
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.keysAsListed">
            <summary> These are the keys in the order they listed
            in the configuration file. This is useful when
            you wish to perform operations with configuration
            information in a particular order.
            </summary>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.#ctor">
            <summary> Creates an empty extended properties object.
            </summary>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.#ctor(System.String)">
            <summary> Creates and loads the extended properties from the specified
            file.
            *
            </summary>
            <param name="file">A String.
            </param>
            <exception cref="!:">IOException.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.#ctor(System.String,System.String)">
            <summary> Creates and loads the extended properties from the specified
            file.
            *
            </summary>
            <param name="file">A String.
            </param>
            <exception cref="!:">IOException.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.Init(Commons.Collections.ExtendedProperties)">
            <summary> Private initializer method that sets up the generic
            resources.
            *
            </summary>
            <exception cref="!:">IOException, if there was an I/O problem.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.IsInitialized">
            <summary> Indicate to client code whether property
            resources have been initialized or not.
            </summary>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.Load(System.IO.Stream)">
            <summary> Load the properties from the given input stream.
            *
            </summary>
            <param name="input">An InputStream.
            </param>
            <exception cref="!:">IOException.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.Load(System.IO.Stream,System.String)">
            <summary> Load the properties from the given input stream
            and using the specified encoding.
            *
            </summary>
            <param name="input">An InputStream.
            </param>
            <param name="enc">An encoding.
            </param>
            <exception cref="!:">IOException.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetProperty(System.String)">
            <summary>  Gets a property from the configuration.
            *
            </summary>
            <param name="key">property to retrieve
            </param>
            <returns>value as object. Will return user value if exists,
            if not then default value if exists, otherwise null
            
            </returns>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.AddProperty(System.String,System.Object)">
            <summary> Add a property to the configuration. If it already
            exists then the value stated here will be added
            to the configuration entry. For example, if
            *
            resource.loader = file
            *
            is already present in the configuration and you
            *
            addProperty("resource.loader", "classpath")
            *
            Then you will end up with a Vector like the
            following:
            *
            ["file", "classpath"]
            *
            </summary>
            <param name="String">key
            </param>
            <param name="String">value
            
            </param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.AddPropertyDirect(System.String,System.Object)">
            <summary>   Adds a key/value pair to the map.  This routine does
            no magic morphing.  It ensures the keylist is maintained
            *
            </summary>
            <param name="key">key to use for mapping
            </param>
            <param name="obj">object to store
            
            </param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.AddStringProperty(System.String,System.String)">
            <summary>  Sets a string property w/o checking for commas - used
            internally when a property has been broken up into
            strings that could contain escaped commas to prevent
            the inadvertant vectorization.
            
            Thanks to Leon Messerschmidt for this one.
            
            </summary>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.SetProperty(System.String,System.Object)">
            <summary> Set a property, this will replace any previously
            set values. Set values is implicitly a call
            to clearProperty(key), addProperty(key,value).
            </summary>
            <param name="String">key
            </param>
            <param name="String">value
            </param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.Save(System.IO.TextWriter,System.String)">
            <summary> Save the properties to the given outputstream.
            </summary>
            <param name="output">An OutputStream.
            </param>
            <param name="header">A String.
            </param>
            <exception cref="!:">IOException.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.Combine(Commons.Collections.ExtendedProperties)">
            <summary> Combines an existing Hashtable with this Hashtable.
            *
            Warning: It will overwrite previous entries without warning.
            *
            </summary>
            <param name="">ExtendedProperties
            
            </param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.ClearProperty(System.String)">
            <summary> Clear a property in the configuration.
            *
            </summary>
            <param name="String">key to remove along with corresponding value.
            
            </param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetKeys(System.String)">
            <summary> Get the list of the keys contained in the configuration
            repository that match the specified prefix.
            *
            </summary>
            <param name="prefix">The prefix to test against.
            </param>
            <returns>An Iterator of keys that match the prefix.
            
            </returns>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.Subset(System.String)">
            <summary> Create an ExtendedProperties object that is a subset
            of this one. Take into account duplicate keys
            by using the setProperty() in ExtendedProperties.
            *
            </summary>
            <param name="String">prefix
            
            </param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.ToString">
            <summary> Display the configuration for debugging
            purposes.
            </summary>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetString(System.String)">
            <summary> Get a string associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated string.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a String.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetString(System.String,System.String)">
            <summary> Get a string associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated string if key is found,
            default value otherwise.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a String.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetProperties(System.String)">
            <summary> Get a list of properties associated with the given
            configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated properties if key is found.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a String/Vector.
            </exception>
            <exception cref="!:">IllegalArgumentException if one of the tokens is
            malformed (does not contain an equals sign).
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetProperties(System.String,System.Collections.Hashtable)">
            <summary> Get a list of properties associated with the given
            configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated properties if key is found.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a String/Vector.
            </exception>
            <exception cref="!:">IllegalArgumentException if one of the tokens is
            malformed (does not contain an equals sign).
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetStringArray(System.String)">
            <summary> Get an array of strings associated with the given configuration
            key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated string array if key is found.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a String/Vector.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetVector(System.String)">
            <summary> Get a Vector of strings associated with the given configuration
            key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated Vector.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Vector.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetVector(System.String,System.Collections.ArrayList)">
            <summary> Get a Vector of strings associated with the given configuration
            key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated Vector.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Vector.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetBoolean(System.String)">
            <summary> Get a boolean associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated boolean.
            </returns>
            <exception cref="!:">NoSuchElementException is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Boolean.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetBoolean(System.String,System.Boolean)">
            <summary> Get a boolean associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated boolean if key is found and has valid
            format, default value otherwise.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Boolean.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.TestBoolean(System.String)">
            <summary> Test whether the string represent by value maps to a boolean
            value or not. We will allow <code>true</code>, <code>on</code>,
            and <code>yes</code> for a <code>true</code> boolean value, and
            <code>false</code>, <code>off</code>, and <code>no</code> for
            <code>false</code> boolean values.  Case of value to test for
            boolean status is ignored.
            *
            </summary>
            <param name="String">The value to test for boolean state.
            </param>
            <returns><code>true</code> or <code>false</code> if the supplied
            text maps to a boolean value, or <code>null</code> otherwise.
            
            </returns>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetByte(System.String)">
            <summary> Get a byte associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated byte.
            </returns>
            <exception cref="!:">NoSuchElementException is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Byte.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetByte(System.String,System.SByte)">
            <summary> Get a byte associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated byte.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Byte.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetByte(System.String,System.Byte)">
            <summary> Get a byte associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated byte if key is found and has valid
            format, default value otherwise.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Byte.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetShort(System.String)">
            <summary> Get a short associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated short.
            </returns>
            <exception cref="!:">NoSuchElementException is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Short.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetShort(System.String,System.Int16)">
            <summary> Get a short associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated short if key is found and has valid
            format, default value otherwise.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Short.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetInt(System.String)">
            <summary> The purpose of this method is to get the configuration resource
            with the given name as an integer.
            *
            </summary>
            <param name="name">The resource name.
            </param>
            <returns>The value of the resource as an integer.
            
            </returns>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetInt(System.String,System.Int32)">
            <summary> The purpose of this method is to get the configuration resource
            with the given name as an integer, or a default value.
            *
            </summary>
            <param name="name">The resource name
            </param>
            <param name="def">The default value of the resource.
            </param>
            <returns>The value of the resource as an integer.
            
            </returns>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetInteger(System.String)">
            <summary> Get a int associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated int.
            </returns>
            <exception cref="!:">NoSuchElementException is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Integer.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetInteger(System.String,System.Int32)">
            <summary> Get a int associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated int if key is found and has valid
            format, default value otherwise.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Integer.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetLong(System.String)">
            <summary> Get a long associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated long.
            </returns>
            <exception cref="!:">NoSuchElementException is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Long.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetLong(System.String,System.Int64)">
            <summary> Get a long associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated long if key is found and has valid
            format, default value otherwise.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Long.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetFloat(System.String)">
            <summary> Get a float associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated float.
            </returns>
            <exception cref="!:">NoSuchElementException is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Float.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetFloat(System.String,System.Single)">
            <summary> Get a float associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated float if key is found and has valid
            format, default value otherwise.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Float.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetDouble(System.String)">
            <summary> Get a double associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated double.
            </returns>
            <exception cref="!:">NoSuchElementException is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Double.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetDouble(System.String,System.Double)">
            <summary> Get a double associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated double if key is found and has valid
            format, default value otherwise.
            </returns>
            <exception cref="!:">ClassCastException is thrown if the key maps to an
            object that is not a Double.
            </exception>
            <exception cref="!:">NumberFormatException is thrown if the value mapped
            by the key has not a valid number format.
            
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.ConvertProperties(Commons.Collections.ExtendedProperties)">
            <summary>
            Convert a standard properties class into a configuration class.
            </summary>
            <param name="p">properties object to convert into a ExtendedProperties object.</param>
            <returns>ExtendedProperties configuration created from the properties object.</returns>
        </member>
        <member name="T:Commons.Collections.PropertiesReader">
            <summary>
            This class is used to read properties lines.  These lines do
            not terminate with new-line chars but rather when there is no
            backslash sign a the end of the line.  This is used to
            concatenate multiple lines for readability.
            </summary>
        </member>
        <member name="M:Commons.Collections.PropertiesReader.#ctor(System.IO.StreamReader)">
            <summary>
            Constructor.
            </summary>
            <param name="reader">A Reader.</param>
        </member>
        <member name="M:Commons.Collections.PropertiesReader.ReadProperty">
            <summary>
            Read a property.
            </summary>
            <returns>A String.</returns>
        </member>
        <member name="T:Commons.Collections.CollectionsUtil">
            <summary>
            Static utility methods for collections
            </summary>
        </member>
        <member name="T:Commons.Collections.KeyedList">
             <summary>
            Using The KeyedList
            Using the KeyedList is just like using a Hashtable, except that when you enumerate through the list, the entries are in the same order as when they were added to the list.  Believe me, I needed this capability!
            
            using System;
            using System.Collections;
            
            namespace KeyedListTest {
                class ConsoleApp {
            	[STAThread]
            	static void Main(string[] args) {
            	    KeyedList k=new KeyedList();
            	    k.Add("One", 1);
            	    k.Add("Two", 2);
            	    k.Add("Three", 3);
            	    k.Add("Four", 4);
            	    k.Add("Five", 5);
            	    k.Add("Six", 6);
            	    k.Add("Seven", 7);
            	    k.Add("Eight", 8);
            	    k.Add("Nine", 9);
            	    k.Add("Ten", 10);
            
            	    foreach(DictionaryEntry entry in k) {
            		Console.WriteLine(entry.Key+": "+entry.Value.ToString());
            	    }
            	}
                }
            }
             </summary>
        </member>
    </members>
</doc>
