/* Generated By:JJTree: Do not edit this line. JJTParserState.java */
namespace NVelocity.Runtime.Parser {
    using System;
    using NVelocity.Runtime.Parser.Node;

    class JJTParserState {
	private System.Collections.Stack nodes;
	private System.Collections.Stack marks;

	private int sp; // number of nodes on stack
	private int mk; // current mark
	private bool node_created;

	internal JJTParserState() {
	    nodes = new System.Collections.Stack();
	    marks = new System.Collections.Stack();
	    sp = 0;
	    mk = 0;
	}

	/* Determines whether the current node was actually closed and
	pushed.  This should only be called in the final user action of a
	node scope.  */
	internal virtual bool nodeCreated() {
	    return node_created;
	}

	/* Call this to reinitialize the node stack.  It is called
	automatically by the parser's ReInit() method. */
	internal virtual void  reset() {
	    nodes.Clear();
	    marks.Clear();
	    sp = 0;
	    mk = 0;
	}

	/* Returns the root node of the AST.  It only makes sense to call
	this after a successful parse. */
	internal virtual INode rootNode() {
	    return (INode) (nodes.ToArray())[nodes.Count - (0 + 1)];
	}

	/* Pushes a node on to the stack. */
	internal virtual void  pushNode(INode n) {
	    System.Object temp_object;
	    temp_object = n;
	    System.Object generatedAux = temp_object;
	    nodes.Push(temp_object);
	    ++sp;
	}

	/* Returns the node on the top of the stack, and remove it from the
	stack.  */
	internal virtual INode popNode() {
	    if (--sp < mk) {
		mk = ((System.Int32) marks.Pop());
	    }
	    return (INode) nodes.Pop();
	}

	/* Returns the node currently on the top of the stack. */
	internal virtual INode peekNode() {
	    return (INode) nodes.Peek();
	}

	/* Returns the number of children on the stack in the current node
	scope. */
	internal virtual int nodeArity() {
	    return sp - mk;
	}


	internal virtual void  clearNodeScope(INode n) {
	    while (sp > mk) {
		popNode();
	    }
	    mk = ((System.Int32) marks.Pop());
	}


	internal virtual void  openNodeScope(INode n) {
	    System.Object temp_object;
	    temp_object = mk;
	    System.Object generatedAux = temp_object;
	    marks.Push(temp_object);
	    mk = sp;
	    n.jjtOpen();
	}


	/* A definite node is constructed from a specified number of
	children.  That number of nodes are popped from the stack and
	made the children of the definite node.  Then the definite node
	is pushed on to the stack. */
	internal virtual void  closeNodeScope(INode n, int num) {
	    mk = ((System.Int32) marks.Pop());
	    while (num-- > 0) {
		INode c = popNode();
		c.jjtSetParent(n);
		n.jjtAddChild(c, num);
	    }
	    n.jjtClose();
	    pushNode(n);
	    node_created = true;
	}


	/* A conditional node is constructed if its condition is true.  All
	the nodes that have been pushed since the node was opened are
	made children of the the conditional node, which is then pushed
	on to the stack.  If the condition is false the node is not
	constructed and they are left on the stack. */
	internal virtual void  closeNodeScope(INode n, bool condition) {
	    if (condition) {
		int a = nodeArity();
		mk = ((System.Int32) marks.Pop());
		while (a-- > 0) {
		    INode c = popNode();
		    c.jjtSetParent(n);
		    n.jjtAddChild(c, a);
		}
		n.jjtClose();
		pushNode(n);
		node_created = true;
	    } else {
		mk = ((System.Int32) marks.Pop());
		node_created = false;
	    }
	}
    }
}
