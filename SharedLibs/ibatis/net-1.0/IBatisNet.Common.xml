<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IBatisNet.Common</name>
    </assembly>
    <members>
        <member name="T:IBatisNet.Common.Exceptions.ConfigurationException">
            <summary>
            A ConfigurationException is thrown when an error has occured in the configuration process.
            </summary>
            <remarks>
            When this exception occurs check the .xml or .config file.
            </remarks>
        </member>
        <member name="T:IBatisNet.Common.Exceptions.IBatisNetException">
            <summary>
            The DalException is thrown when an error in the Dal occurs.
            </summary>
            <remarks>
            This is the base exception for all exceptions thrown in the framework. 
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.IBatisNetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.IBatisNetException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <para>Message</para> property of the new instance 
            to a system-supplied message that describes the error.
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.IBatisNetException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.IBatisNetException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance 
            using the message parameter.
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.IBatisNetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.IBatisNetException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to 
            the Message property of the passed in exception. 
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.IBatisNetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.IBatisNetException"/> 
            class with a specified error message and a reference to the inner exception 
            that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous 
            exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference 
            (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.IBatisNetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.IBatisNetException"/> 
            class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. 
            </param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.ConfigurationException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error. 
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ConfigurationException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.ConfigurationException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property 
            of the passed in exception. 
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.ConfigurationException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using 
            the message parameter.
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.ConfigurationException"/> 
            class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception 
            object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. 
            </param>
        </member>
        <member name="T:IBatisNet.Common.Exceptions.ForeignKeyException">
            <summary>
            A DALForeignKeyException is thrown when foreign key error occured in a sql statement.
            </summary>
            <remarks>
            This exception is not used by the framework.
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ForeignKeyException.#ctor">
            <summary>
            Initializes a new instance of the <b>DalException</b> class.
            </summary>
            <remarks>
            This constructor initializes the <para>Message</para> property of the new instance 
            to a system-supplied message that describes the error.
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ForeignKeyException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.ForeignKeyException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property 
            of the passed in exception. 
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ForeignKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.ForeignKeyException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using 
            the message parameter.
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ForeignKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.ForeignKeyException"/> 
            class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ForeignKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception 
            object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. 
            </param>
        </member>
        <member name="T:IBatisNet.Common.Exceptions.ProbeException">
            <summary>
            Summary description for ProbeException.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ProbeException.#ctor">
            <summary>
            Initializes a new instance of the <b>ProbeException</b> class.
            </summary>
            <remarks>
            This constructor initializes the <para>Message</para> property of the new instance 
            to a system-supplied message that describes the error.
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ProbeException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.ProbeException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property 
            of the passed in exception. 
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ProbeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.ProbeException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using 
            the message parameter.
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ProbeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Exceptions.ProbeException"/> 
            class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:IBatisNet.Common.Exceptions.ProbeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception 
            object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. 
            </param>
        </member>
        <member name="T:IBatisNet.Common.Logging.Impl.ConsoleOutLogger">
            <summary>
            Logger sending everything to the standard output error stream.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Logging.ILog">
            <summary>
            A simple logging interface abstracting logging APIs. 
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILog.Debug(System.Object)">
            <summary>
            Log a message object with the <see cref="F:IBatisNet.Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:IBatisNet.Common.Logging.LogLevel.Debug"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILog.Error(System.Object)">
            <summary>
            Log a message object with the <see cref="F:IBatisNet.Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:IBatisNet.Common.Logging.LogLevel.Error"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILog.Fatal(System.Object)">
            <summary>
            Log a message object with the <see cref="F:IBatisNet.Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:IBatisNet.Common.Logging.LogLevel.Fatal"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILog.Info(System.Object)">
            <summary>
            Log a message object with the <see cref="F:IBatisNet.Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:IBatisNet.Common.Logging.LogLevel.Info"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILog.Warn(System.Object)">
            <summary>
            Log a message object with the <see cref="F:IBatisNet.Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:IBatisNet.Common.Logging.LogLevel.Warn"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="P:IBatisNet.Common.Logging.ILog.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:IBatisNet.Common.Logging.LogLevel.Debug"/> level.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.ILog.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:IBatisNet.Common.Logging.LogLevel.Error"/> level.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.ILog.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:IBatisNet.Common.Logging.LogLevel.Fatal"/> level.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.ILog.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:IBatisNet.Common.Logging.LogLevel.Info"/> level.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.ILog.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:IBatisNet.Common.Logging.LogLevel.Warn"/> level.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.#ctor(System.String,IBatisNet.Common.Logging.LogLevel,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="logName"></param>
            <param name="logLevel"></param>
            <param name="showDateTime">Include the current time in the log message </param>
            <param name="showLogName">Include the instance name in the log message</param>
            <param name="dateTimeFormat">The date and time format to use in the log message </param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.Write(IBatisNet.Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Do the actual logging.
            This method assembles the message and write
            the content of the message accumulated in the specified
            StringBuffer to the appropriate output destination. The
            default implementation writes to System.Console.Error.<p/>
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.IsLevelEnabled(IBatisNet.Common.Logging.LogLevel)">
            <summary>
            Is the given log level currently enabled ?
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.Debug(System.Object)">
            <summary>
            Log a debug message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.Debug(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.Error(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.Error(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.Fatal(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.Fatal(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.Info(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.Info(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.Warn(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.Warn(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.IsDebugEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.IsErrorEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.IsFatalEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.IsInfoEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.ConsoleOutLogger.IsWarnEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Logging.Impl.ConsoleOutLoggerFA">
            <summary>
            Description résumée de ConsoleOutLoggerFA.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Logging.ILoggerFactoryAdapter">
            <summary>
            LoggerFactoryAdapter interface is used internally by LogManager
            Only developers wishing to write new SLF4J adapters need to
            worry about this interface.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by type 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)">
            <summary>
            Get a ILog instance by type name 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLoggerFA.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Constructor
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLoggerFA.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by type 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.ConsoleOutLoggerFA.GetLogger(System.String)">
            <summary>
            Get a ILog instance by type name 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:IBatisNet.Common.Logging.Impl.NoOpLogger">
            <summary>
            Summary description for NoOpLogger.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.#ctor">
            <summary>
            A NOP implementation.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Debug(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Debug(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Error(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Error(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Fatal(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Fatal(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Info(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Info(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Trace(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Trace(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Warn(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLogger.Warn(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.NoOpLogger.IsDebugEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.NoOpLogger.IsErrorEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.NoOpLogger.IsFatalEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.NoOpLogger.IsInfoEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.NoOpLogger.IsTraceEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.NoOpLogger.IsWarnEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Logging.Impl.NoOpLoggerFA">
            <summary>
            Summary description for NoOpLoggerFA.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLoggerFA.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLoggerFA.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLoggerFA.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by type 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.NoOpLoggerFA.IBatisNet#Common#Logging#ILoggerFactoryAdapter#GetLogger(System.String)">
            <summary>
            Get a ILog instance by type name 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:IBatisNet.Common.Logging.Impl.TraceLogger">
            <summary>
            Logger sending everything to the trace output stream.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.#ctor(System.String,IBatisNet.Common.Logging.LogLevel,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="logName"></param>
            <param name="logLevel"></param>
            <param name="showDateTime">Include the current time in the log message </param>
            <param name="showLogName">Include the instance name in the log message</param>
            <param name="dateTimeFormat">The date and time format to use in the log message </param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.Write(IBatisNet.Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Do the actual logging.
            This method assembles the message and write
            the content of the message accumulated in the specified
            StringBuffer to the appropriate output destination. The
            default implementation writes to System.Console.Error.<p/>
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.IsLevelEnabled(IBatisNet.Common.Logging.LogLevel)">
            <summary>
            Is the given log level currently enabled ?
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.Debug(System.Object)">
            <summary>
            Log a debug message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.Debug(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.Error(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.Error(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.Fatal(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.Fatal(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.Info(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.Info(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.Warn(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLogger.Warn(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.TraceLogger.IsDebugEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.TraceLogger.IsErrorEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.TraceLogger.IsFatalEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.TraceLogger.IsInfoEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.Impl.TraceLogger.IsWarnEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Logging.Impl.TraceLoggerFA">
            <summary>
            Summary description for  TraceLoggerFA.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLoggerFA.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Constructor
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLoggerFA.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by type 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Logging.Impl.TraceLoggerFA.GetLogger(System.String)">
            <summary>
            Get a ILog instance by type name 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:IBatisNet.Common.Logging.ConfigurationSectionHandler">
            <summary>
            Summary description for ConfigurationSectionHandler.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.ConfigurationSectionHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.ConfigurationSectionHandler.ReadConfiguration(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Logging.ConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:IBatisNet.Common.Logging.LogLevel">
            <summary>
            The 8 logging levels used by Log are (in order): 
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Logging.LogLevel.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Logging.LogLevel.Debug">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Logging.LogLevel.Info">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Logging.LogLevel.Warn">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Logging.LogLevel.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Logging.LogLevel.Fatal">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Logging.LogLevel.Off">
            <summary>
            
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Logging.LogManager">
            <summary>
            The LogManager can produce ILogFactory for various logging APIs,
            most notably for log4net. 
            Other implemenations such as
            * SimpleLogger
            * NoOpLogger are also supported.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.LogManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Logging.LogManager"/> class. 
            </summary>
            <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Logging.LogManager.BuildLoggerFactoryAdapter">
            <summary>
            Builds the logger factory adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Logging.LogManager.BuildDefaultLoggerFactoryAdapter">
            <summary>
            Builds the default logger factory adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IBatisNet.Common.Logging.LogManager.Adapter">
            <summary>
            Gets or sets the adapter.
            </summary>
            <value>The adapter.</value>
        </member>
        <member name="T:IBatisNet.Common.Logging.LogSetting">
            <summary>
            Setting for a logger.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Logging.LogSetting.#ctor(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="factoryAdapterType"></param>
            <param name="properties"></param>
        </member>
        <member name="P:IBatisNet.Common.Logging.LogSetting.FactoryAdapterType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Logging.LogSetting.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Pagination.IPaginatedList">
            <summary>
            Summary description for IPaginatedList.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Pagination.IPaginatedList.NextPage">
            <summary>
            Moves to the next page after the current page.  If the current
            page is the last page, wrap to the first page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Pagination.IPaginatedList.PreviousPage">
            <summary>
            Moves to the page before the current page.  If the current
            page is the first page, wrap to the last page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Pagination.IPaginatedList.GotoPage(System.Int32)">
            <summary>
            Moves to a specified page.  If the specified
            page is beyond the last page, wrap to the first page.
            If the specified page is before the first page, wrap
            to the last page.
            </summary>
            <param name="pageIndex">The index of the specified page.</param>
        </member>
        <member name="P:IBatisNet.Common.Pagination.IPaginatedList.PageSize">
            <summary>
            The maximum number of items per page.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.IPaginatedList.IsFirstPage">
            <summary>
            Is the current page the first page ?
            True if the current page is the first page or if only
            a single page exists.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.IPaginatedList.IsMiddlePage">
            <summary>
            Is the current page a middle page (i.e. not first or last) ?
            Return True if the current page is not the first or last page,
            and more than one page exists (always returns false if only a
            single page exists).
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.IPaginatedList.IsLastPage">
            <summary>
            Is the current page the last page ?
            Return True if the current page is the last page or if only
            a single page exists.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.IPaginatedList.IsNextPageAvailable">
            <summary>
            Is a page available after the current page ?
            Return True if the next page is available
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.IPaginatedList.IsPreviousPageAvailable">
            <summary>
            Is a page available before the current page ?
            Return True if the previous page is available
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.IPaginatedList.PageIndex">
            <summary>
            Returns the current page index, which is a zero based integer.
            All paginated list implementations should know what index they are
            on, even if they don't know the ultimate boundaries (min/max)
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Pagination.PaginatedArrayList">
            <summary>
            Summary description for PaginatedArrayList.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="initialCapacity"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.#ctor(System.Collections.ICollection,System.Int32)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.Repaginate">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.SubList(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Provides a view of the IList pramaeter 
            from the specified position <paramref name="fromIndex"/> 
            to the specified position <paramref name="toIndex"/>. 
            </summary>
            <param name="list">The IList elements.</param>
            <param name="fromIndex">Starting position for the view of elements. </param>
            <param name="toIndex">Ending position for the view of elements. </param>
            <returns> A view of list.
            </returns>
            <remarks>
            The list that is returned is just a view, it is still backed
            by the orignal list.  Any changes you make to it will be 
            reflected in the orignal list.
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.NextPage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.PreviousPage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.GotoPage(System.Int32)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.Reset">
            <summary>
            Sets the enumerator to its initial position, 
            which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Pagination.PaginatedArrayList.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.PageSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.IsFirstPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.IsMiddlePage">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.IsLastPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.IsNextPageAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.IsPreviousPageAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.PageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Pagination.PaginatedArrayList.Current">
            <summary>
            Gets the current element in the page.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Transaction.IsolationLevel">
            <summary>
            Specifies the isolation level of a transaction.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.IsolationLevel.Serializable">
            <summary>
            Volatile data can be read but not modified, 
            and no new data can be added during the transaction.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.IsolationLevel.RepeatableRead">
            <summary>
            Volatile data can be read but not modified during the transaction. 
            New data may be added during the transaction.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.IsolationLevel.ReadCommitted">
            <summary>
            Volatile data cannot be read during the transaction, but can be modified.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.IsolationLevel.ReadUncommitted">
            <summary>
            Volatile data can be read and modified during the transaction.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.IsolationLevel.Unspecified">
            <summary>
            Volatile data can be read but not modified, 
            and no new data can be added during the transaction.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Transaction.TransactionOptions">
            <summary>
            Contains parameters that specify Transaction behaviors.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.TransactionOptions.TimeOut">
            <summary>
            Length of time that the transaction waits before automatically 
            closing itself
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.TransactionOptions.IsolationLevel">
            <summary>
            The isolation level of the transaction.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Transaction.TransactionScope">
            <summary>
            Simple interface to COM+ transactions through Enterprise Service. 
            Makes a code block transactional à la Indigo (evolution will be easier, it's the same API)
            It's important to make sure that each instance 
            of this class gets Close()'d. 
            Easiest way to do that is with the using statement in C#.
            </summary>
            <remarks>
            Don't support nested transaction scope with different transaction options.
             
            System.EnterpriseServices.ServiceDomain is available only on 
            - XP SP2 (or higher) 
            - Windows Server 2003 
            - XP SP1 + Hotfix 828741 
            and only in .Net 1.1.
            It CAN'T be used on Windows 2000.
            
            http://support.microsoft.com/default.aspx/kb/319177/EN-US/
            </remarks>
            <example>
            using (TransactionScope tx = new TransactionScope())
            {
            	
            	// Open connection to database 1	
            	// Transaction will be automatically enlist into it
            	// Execute update in database 1
            	// Open connection to database 2
            	// Transaction will be automatically enlist into it
            	// Execute update in database 2
            
            	// the following code will be executed only if no exception
            	// occured in the above code; since we got here ok, let's vote for commit;
            	tx.Completed(); 
            }
            when “using” call Dispose on the transaction scope at the end
            of the “using” code block, the "ambient" transaction will be commited only and only if
            the Completed method have been called.
            </example>
        </member>
        <member name="M:IBatisNet.Common.Transaction.TransactionScope.#ctor">
            <summary>
            Creates a new instance with a TransactionScopeOptions.Required 
            and TransactionOptions.IsolationLevel.ReadCommitted.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Transaction.TransactionScope.#ctor(IBatisNet.Common.Transaction.TransactionScopeOptions)">
            <summary>
            Creates a new instance with the specified TransactionScopeOptions
             and TransactionOptions.IsolationLevel.ReadCommitted.
            </summary>
            <param name="txScopeOptions">The specified TransactionScopeOptions</param>
        </member>
        <member name="M:IBatisNet.Common.Transaction.TransactionScope.#ctor(IBatisNet.Common.Transaction.TransactionScopeOptions,IBatisNet.Common.Transaction.TransactionOptions)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="txScopeOptions">The specified TransactionScopeOptions.</param>
            <param name="options">The specified TransactionOptions.</param>
        </member>
        <member name="M:IBatisNet.Common.Transaction.TransactionScope.EnterTransactionContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Transaction.TransactionScope.TransactionScopeOptions2TransactionOption(IBatisNet.Common.Transaction.TransactionScopeOptions)">
            <summary>
            Give the correpondance of a TransactionScopeOptions (à la Indigo) object in a TransactionOption (COM+) object
            </summary>
            <param name="transactionScopeOptions">The TransactionScopeOptions to macth.</param>
            <returns>The TransactionOption correspondance</returns>
        </member>
        <member name="M:IBatisNet.Common.Transaction.TransactionScope.IsolationLevel2TransactionIsolationLevel(IBatisNet.Common.Transaction.IsolationLevel)">
            <summary>
            Give the correpondance of a TransactionIsolationLevel (à la Indigo) object in a IsolationLevel (COM+) object
            </summary>
            <param name="isolation">The IsolationLevel to macth.</param>
            <returns>The TransactionIsolationLevel correspondance</returns>
        </member>
        <member name="M:IBatisNet.Common.Transaction.TransactionScope.Close">
            <summary>
            Close the TransactionScope
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Transaction.TransactionScope.Complete">
            <summary>
            Complete (commit) a transsaction
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Transaction.TransactionScope.Dispose">
            <summary>
            Implementation of IDisposable so that this class 
            can be used with C#'s using statement.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Transaction.TransactionScope.Consistent">
            <summary>
            Changes the vote to commit (true) or to abort (false).
            If all the TransactionScope instances involved in a 
            transaction have voted to commit, then the entire thing is committed.
            If any TransactionScope instances involved in a 
            transaction vote to abort, then the entire thing is aborted.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Transaction.TransactionScope.TransactionScopeCount">
            <summary>
            Count of the TransactionScope that have been open.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Transaction.TransactionScope.IsInTransaction">
            <summary>
            Returns whether or not the current thread is in a transaction context.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Transaction.TransactionScope.IsVoteCommit">
            <summary>
            Gets the current value of the vote.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Transaction.TransactionScopeOptions">
            <summary>
            Describes how a transaction scope is associated with a transaction.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.TransactionScopeOptions.Required">
            <summary>
            The transaction scope must be associated with a transaction.
            If we are in a transaction scope join it. If we aren't, create a new one.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.TransactionScopeOptions.RequiresNew">
            <summary>
            Always creates a new transaction scope.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.TransactionScopeOptions.Supported">
            <summary>
            Don't need a transaction scope, but if we are in a transaction scope then join it.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.TransactionScopeOptions.NotSupported">
            <summary>
            Means that cannot cannot be associated with a transaction scope.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Transaction.TransactionScopeOptions.Mandatory">
            <summary>
            The transaction scope must be associated with an existing transaction scope.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.AccessorFactory">
            <summary>
            Accessor factory
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.AccessorFactory.#ctor(IBatisNet.Common.Utilities.Objects.Members.ISetAccessorFactory,IBatisNet.Common.Utilities.Objects.Members.IGetAccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.Members.AccessorFactory"/> class.
            </summary>
            <param name="setAccessorFactory">The set accessor factory.</param>
            <param name="getAccessorFactory">The get accessor factory.</param>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.AccessorFactory.SetAccessorFactory">
            <summary>
            The factory which build <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ISetAccessor"/>
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.AccessorFactory.GetAccessorFactory">
            <summary>
            The factory which build <see cref="T:IBatisNet.Common.Utilities.Objects.Members.IGetAccessor"/>
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.BaseAccessor">
            <summary>
            Abstract base class for member accessor
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.BaseAccessor.nullInternal">
            <summary>
            The null internal value used by this member type 
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.BaseAccessor.typeToOpcode">
            <summary>
            List of type-opCode
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.BaseAccessor.#cctor">
            <summary>
            Static constructor
            "Initialize a private IDictionary with type-opCode pairs 
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.BaseAccessor.GetNullInternal(System.Type)">
            <summary>
            Get the null value for a given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor"/> class provides an IL-based get access   
            to a field of a specified target class.
            </summary>
            <remarks>Will Throw FieldAccessException on private field</remarks>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.IGetAccessor">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.IGetAccessor"/> interface defines a field/property get accessor.
            provides <c>Reflection.Emit</c>-generated <see cref="T:IBatisNet.Common.Utilities.Objects.Members.IGet"/>
            implementations for drastically improved performance over default late-bind 
            invoke.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.IAccessor">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.IAccessor"/> interface defines a field/property contract.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.IAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.IAccessor.MemberType">
            <summary>
            Gets the type of this member (field or property).
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.IGet">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.IGet"/> interface defines a field/property get contrat to get the
            value of a field or a property.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.IGet.Get(System.Object)">
            <summary>
            Gets the value stored in the field/property for the specified target.
            </summary>
            <param name="target">Object to retrieve the field/property from.</param>
            <returns>The value.</returns>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor._emittedGet">
            <summary>
            The IL emitted IGet
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the field for the specified target.
            </summary>
            <param name="target">Object to retrieve the field from.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.EmitFieldSetAccessor">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.EmitFieldSetAccessor"/> class provides an IL-based set access   
            to a field of a specified target class.
            </summary>
            <remarks>Will Throw FieldAccessException on private field</remarks>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.ISetAccessor">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ISetAccessor"/> interface defines a field/property set accessor.
            provides <c>Reflection.Emit</c>-generated <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ISet"/> 
            implementations for drastically improved performance over default late-bind 
            invoke.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.ISet">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ISet"/> interface defines a field/property set contrat to set the
            value on a field or property.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.ISet.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the field/property of the specified target.
            </summary>
            <param name="target">Object to set the field/property on.</param>
            <param name="value">Value.</param>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitFieldSetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitFieldSetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitFieldSetAccessor._emittedSet">
            <summary>
            The IL emitted ISet
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitFieldSetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.Members.EmitFieldGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitFieldSetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitFieldSetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitFieldSetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the field for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.EmitFieldSetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.EmitFieldSetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor"/> class provides an IL-based get access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor._propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor._targetType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor._emittedGet">
            <summary>
            The IL emitted IGet
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="assemblyBuilder">The <see cref="T:System.Reflection.Emit.AssemblyBuilder"/>.</param>
            <param name="moduleBuilder">The <see cref="T:System.Reflection.Emit.ModuleBuilder"/>.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.Get(System.Object)">
            <summary>
            Gets the property value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.Name">
            <summary>
            Gets the property's name.
            </summary>
            <value></value>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.MemberType">
            <summary>
            Gets the property's type.
            </summary>
            <value></value>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor"/> class provides an IL-based set access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor._propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor._targetType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor._emittedSet">
            <summary>
            The IL emitted ISet
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor"/> class.
            Generates the implementation for setter methods.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="assemblyBuilder">The <see cref="T:System.Reflection.Emit.AssemblyBuilder"/>.</param>
            <param name="moduleBuilder">The <see cref="T:System.Reflection.Emit.ModuleBuilder"/>.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the property for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
            <value></value>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.EmitPropertySetAccessor.MemberType">
            <summary>
            Gets the type of this member (field or property).
            </summary>
            <value></value>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.GetAccessorFactory">
            <summary>
            A factory to build <see cref="T:IBatisNet.Common.Utilities.Objects.Members.IGetAccessorFactory"/> for a type.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.IGetAccessorFactory">
            <summary>
            Factory contact to build <see cref="T:IBatisNet.Common.Utilities.Objects.Members.IGetAccessor"/> for a type.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.IGetAccessorFactory.CreateGetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:IBatisNet.Common.Utilities.Objects.Members.IGetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.GetAccessorFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.Members.GetAccessorFactory"/> class.
            </summary>
            <param name="allowCodeGeneration">if set to <c>true</c> [allow code generation].</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.GetAccessorFactory.CreatePropertyAccessor(System.Type,System.String)">
            <summary>
            Create a IGetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.GetAccessorFactory.CreateFieldAccessor(System.Type,System.String)">
            <summary>
            Create a IGetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">Field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.GetAccessorFactory.CreateReflectionPropertyGetAccessor(System.Type,System.String)">
            <summary>
            Create a Reflection IGetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.GetAccessorFactory.CreateReflectionFieldGetAccessor(System.Type,System.String)">
            <summary>
            Create Reflection IGetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.GetAccessorFactory.CreateGetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:IBatisNet.Common.Utilities.Objects.Members.IGetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.ISetAccessorFactory">
            <summary>
            Factory contact to build <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ISetAccessor"/> for a type.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.ISetAccessorFactory.CreateSetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ISetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor"/> class provides an reflection get access   
            to a field of a specified target class.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the field for the specified target.       
            </summary>
            <param name="target">Object to retrieve the field/property from.</param>
            <returns>The field alue.</returns>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor.MemberType">
            <summary>
            Gets the type of this member, such as field, property.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor"/> class provides an reflection set access   
            to a field of a specified target class.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the field of the specified target.
            </summary>
            <param name="target">Object to set the property on.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor.MemberType">
            <summary>
            Gets the type of this member, such as field, property.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor"/> class provides an reflection get access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the property for 
            the specified target.
            </summary>
            <param name="target">Object to retrieve the property from.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor.MemberType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor">
            <summary>
            The <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor"/> class provides an reflection set access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the property of the specified target.
            </summary>
            <param name="target">Object to set the property on.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor.MemberType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.Members.SetAccessorFactory">
            <summary>
            A factory to build <see cref="T:IBatisNet.Common.Utilities.Objects.Members.SetAccessorFactory"/> for a type.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.SetAccessorFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.Members.SetAccessorFactory"/> class.
            </summary>
            <param name="allowCodeGeneration">if set to <c>true</c> [allow code generation].</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.SetAccessorFactory.CreatePropertyAccessor(System.Type,System.String)">
            <summary>
            Create a ISetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.SetAccessorFactory.CreateFieldAccessor(System.Type,System.String)">
            <summary>
            Create a ISetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">Field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.SetAccessorFactory.CreateReflectionPropertySetAccessor(System.Type,System.String)">
            <summary>
            Create a Reflection ISetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.SetAccessorFactory.CreateReflectionFieldSetAccessor(System.Type,System.String)">
            <summary>
            Create Reflection ISetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.Members.SetAccessorFactory.CreateSetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:IBatisNet.Common.Utilities.Objects.Members.ISetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.AbstractFactory">
            <summary>
            A <see cref="T:IBatisNet.Common.Utilities.Objects.IObjectFactory"/> implementation that for abstract type
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.IFactory">
            <summary>
            Factory to create object for a given type
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.IFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">
            An array of values that matches the number, order and type 
            of the parameters for this constructor. 
            </param>
            <remarks>
            If you call a constructor with no parameters, pass null. 
            Anyway, what you pass will be ignore.
            </remarks>
            <returns>A new instance</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.AbstractFactory.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.AbstractFactory"/> class.
            </summary>
            <param name="typeToCreate">The type to create.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.AbstractFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>A new instance</returns>
            <remarks>
            If you call a constructor with no parameters, pass null.
            Anyway, what you pass will be ignore.
            </remarks>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.ActivatorFactory">
            <summary>
            Create objects via Activator.CreateInstance
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ActivatorFactory.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="typeToCreate"></param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ActivatorFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">
            An array of values that matches the number, order and type 
            of the parameters for this constructor. 
            </param>
            <remarks>
            If you call a constructor with no parameters, pass null. 
            Anyway, what you pass will be ignore.
            </remarks>
            <returns>A new instance</returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.ActivatorObjectFactory">
            <summary>
            A <see cref="T:IBatisNet.Common.Utilities.Objects.IObjectFactory"/> implementation that can create objects 
            via Activator.CreateInstance
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.IObjectFactory">
            <summary>
            A factory that can create objects 
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.IObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new <see cref="T:IBatisNet.Common.Utilities.Objects.IFactory"/> instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new see cref="IFactory"/&gt; instance</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ActivatorObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new see <see cref="T:IBatisNet.Common.Utilities.Objects.IObjectFactory"/> instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new <see cref="T:IBatisNet.Common.Utilities.Objects.IObjectFactory"/> instance.</returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.BoxingOpCodes">
            <summary>  
            Helper class that returns appropriate boxing opcode based on type  
            </summary>  
            <remarks>From Spring.NET</remarks>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.BoxingOpCodes.#cctor">
            <summary>
            Initializes the <see cref="T:IBatisNet.Common.Utilities.Objects.BoxingOpCodes"/> class.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.BoxingOpCodes.GetOpCode(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.OpCode"/>.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.EmitObjectFactory">
            <summary>
            A <see cref="T:IBatisNet.Common.Utilities.Objects.IObjectFactory"/> implementation that can create objects via IL code
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.EmitObjectFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.EmitObjectFactory"/> class.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.EmitObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new <see cref="T:IBatisNet.Common.Utilities.Objects.IFactory"/> instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new <see cref="T:IBatisNet.Common.Utilities.Objects.IFactory"/> instance.</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.EmitObjectFactory.GenerateKey(System.Type,System.Object[])">
            <summary>
            Generates the key for a cache entry.
            </summary>
            <param name="typeToCreate">The type instance to build.</param>
            <param name="arguments">The types of the constructor arguments</param>
            <returns>The key for a cache entry.</returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.FactoryBuilder">
            <summary>
            Build IFactory object via IL 
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.FactoryBuilder.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.FactoryBuilder.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a factory which build class of type typeToCreate
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new <see cref="T:IBatisNet.Common.Utilities.Objects.IFactory"/> instance.</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.FactoryBuilder.CreateFactoryType(System.Type,System.Type[])">
            <summary>
            Creates a <see cref="T:IBatisNet.Common.Utilities.Objects.IFactory"/>.
            </summary>
            <param name="typeToCreate">The type instance to create.</param>
            <param name="types">The types.</param>
            <returns>The <see cref="T:IBatisNet.Common.Utilities.Objects.IFactory"/></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.FactoryBuilder.ImplementCreateInstance(System.Reflection.Emit.TypeBuilder,System.Type,System.Type[])">
            <summary>
            Implements the create instance.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="typeToCreate">The type to create.</param>
            <param name="argumentTypes">The argument types.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.FactoryBuilder.EmitArgsIL(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>   
            Emit parameter IL for a method call.   
            </summary>   
            <param name="il">IL generator.</param>   
            <param name="argumentTypes">Arguments type defined for a the constructor.</param>   
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.FactoryLogAdapter">
            <summary>
            A wrapper arround an <see cref="T:IBatisNet.Common.Utilities.Objects.IFactory"/> implementation which logs argument type and value
            when CreateInstance is called.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.FactoryLogAdapter.#ctor(System.Type,System.Type[],IBatisNet.Common.Utilities.Objects.IFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:IBatisNet.Common.Utilities.Objects.FactoryLogAdapter"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="paramtersTypes">The paramters types.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.FactoryLogAdapter.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>A new instance</returns>
            <remarks>
            If you call a constructor with no parameters, pass null.
            Anyway, what you pass will be ignore.
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.FactoryLogAdapter.GenerateParametersName(System.Object[])">
            <summary>
            Generates the a string containing all parameter type names.
            </summary>
            <param name="arguments">The types of the constructor arguments</param>
            <returns>The string.</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.FactoryLogAdapter.GenerateLogInfoForParameterValue(System.Object[])">
            <summary>
            Generates the a string containing all parameters value.
            </summary>
            <param name="arguments">The arguments</param>
            <returns>The string.</returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.ObjectFactory">
            <summary>
            A factory to create objects 
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectFactory.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="allowCodeGeneration"></param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new factory instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new instance factory</returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.ObjectProbe">
            <summary>
            Description résumée de ObjectProbe.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.GetReadablePropertyNames(System.Object)">
            <summary>
            Returns an array of the readable properties names exposed by an object
            </summary>
            <param name="obj">The object</param>
            <returns>The properties name</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.GetWriteableMemberNames(System.Object)">
            <summary>
            Returns an array of the writeable members name exposed by a object
            </summary>
            <param name="obj">The object</param>
            <returns>The members name</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.GetMemberTypeForSetter(System.Object,System.String)">
            <summary>
             Returns the type that the set expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="obj">The object to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.GetMemberTypeForSetter(System.Type,System.String)">
            <summary>
             Returns the type that the set expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="type">The class type to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.GetMemberTypeForGetter(System.Object,System.String)">
            <summary>
             Returns the type that the get expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="obj">The object to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.GetMemberTypeForGetter(System.Type,System.String)">
            <summary>
             Returns the type that the get expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="type">The type to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.GetMemberInfoForSetter(System.Type,System.String)">
            <summary>
             Returns the MemberInfo of the set member on the specified type.
            </summary>
            <param name="type">The type to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.GetArrayMember(System.Object,System.String,IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Gets the value of an array member on the specified object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="indexedName">The array index.</param>
            <param name="accessorFactory">The accessor factory.</param>
            <returns>The member value.</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.SetArrayMember(System.Object,System.String,System.Object,IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Sets the array member.
            </summary>
            <param name="obj">The obj.</param>
            <param name="indexedName">Name of the indexed.</param>
            <param name="value">The value.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.GetMemberValue(System.Object,System.String,IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Return the specified member on an object. 
            </summary>
            <param name="obj">The Object on which to invoke the specified property.</param>
            <param name="memberName">Name of the member.</param>
            <param name="accessorFactory">The accessor factory.</param>
            <returns>An Object representing the return value of the invoked property.</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.GetMember(System.Object,System.String,IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Gets the member's value on the specified object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="memberName">Name of the member.</param>
            <param name="accessorFactory">The accessor factory.</param>
            <returns>The member's value</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.SetMemberValue(System.Object,System.String,System.Object,IBatisNet.Common.Utilities.Objects.IObjectFactory,IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Sets the member value.
            </summary>
            <param name="obj">he Object on which to invoke the specified mmber.</param>
            <param name="memberName">Name of the member.</param>
            <param name="memberValue">The member value.</param>
            <param name="objectFactory">The object factory.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.SetMember(System.Object,System.String,System.Object,IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Sets the member.
            </summary>
            <param name="obj">The obj.</param>
            <param name="memberName">Name of the member.</param>
            <param name="memberValue">The member value.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.HasWritableProperty(System.Object,System.String)">
            <summary>
            Checks to see if a Object has a writable property/field be a given name
            </summary>
            <param name="obj"> The object to check</param>
            <param name="propertyName">The property to check for</param>
            <returns>True if the property exists and is writable</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.HasReadableProperty(System.Object,System.String)">
            <summary>
            Checks to see if the Object have a property/field be a given name.
            </summary>
            <param name="obj">The Object on which to invoke the specified property.</param>
            <param name="propertyName">The name of the property to check for.</param>
            <returns>
            True or false if the property exists and is readable.
            </returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ObjectProbe.IsSimpleType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Objects.ReflectionInfo">
            <summary>
            This class represents a cached set of class definition information that
            allows for easy mapping between property names and get/set methods.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.ReflectionInfo.BINDING_FLAGS_PROPERTY">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Objects.ReflectionInfo.BINDING_FLAGS_FIELD">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.AddMembers(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.GetSetter(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.GetGetter(System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberName">Member's name.</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.GetSetterType(System.String)">
            <summary>
            Gets the type of the member.
            </summary>
            <param name="memberName">Member's name.</param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.GetGetterType(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.GetReadableMemberNames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.GetWriteableMemberNames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.HasWritableMember(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.HasReadableMember(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.IsKnownType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Objects.ReflectionInfo.GetInstance(System.Type)">
            <summary>
            Gets an instance of ReflectionInfo for the specified type.
            </summary>summary>
            <param name="type">The type for which to lookup the method cache.</param>
            <returns>The properties cache for the type</returns>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Objects.ReflectionInfo.ClassName">
            <summary>
            
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Proxy.CachedProxyGenerator">
            <summary>
            An ProxyGenerator with cache that uses the Castle.DynamicProxy library.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Proxy.CachedProxyGenerator.#ctor">
            <summary>
            Cosntructor
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Proxy.CachedProxyGenerator.CreateProxy(System.Type,Castle.DynamicProxy.IInterceptor,System.Object)">
            <summary>
            Generates a proxy implementing all the specified interfaces and
            redirecting method invocations to the specifed interceptor.
            </summary>
            <param name="theInterface">Interface to be implemented</param>
            <param name="interceptor">instance of <see cref="T:Castle.DynamicProxy.IInterceptor"/></param>
            <param name="target">The target object.</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Proxy.CachedProxyGenerator.CreateProxy(System.Type[],Castle.DynamicProxy.IInterceptor,System.Object)">
            <summary>
            Generates a proxy implementing all the specified interfaces and
            redirecting method invocations to the specifed interceptor.
            </summary>
            <param name="interfaces">Array of interfaces to be implemented</param>
            <param name="interceptor">instance of <see cref="T:Castle.DynamicProxy.IInterceptor"/></param>
            <param name="target">The target object.</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Proxy.CachedProxyGenerator.CreateClassProxy(System.Type,Castle.DynamicProxy.IInterceptor,System.Object[])">
            <summary>
            Generates a proxy implementing all the specified interfaces and
            redirecting method invocations to the specifed interceptor.
            This proxy is for object different from IList or ICollection
            </summary>
            <param name="targetType">The target type</param>
            <param name="interceptor">The interceptor.</param>
            <param name="argumentsForConstructor">The arguments for constructor.</param>
            <returns></returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Proxy.IProxyGenerator">
            <summary>
            Description résumée de IProxyGenerator.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Proxy.ProxyGeneratorFactory">
            <summary>
             A Factory for getting the ProxyGenerator.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Proxy.ProxyGeneratorFactory.GetProxyGenerator">
            <summary></summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.TypesResolver.CachedTypeResolver">
            <summary>
            Resolves (instantiates) a <see cref="T:System.Type"/> by it's (possibly
            assembly qualified) name, and caches the <see cref="T:System.Type"/>
            instance against the type name.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.TypesResolver.ITypeResolver">
            <summary>
            Resolves a <see cref="T:System.Type"/> by name.
            </summary>
            <remarks>
            <p>
            The rationale behind the creation of this interface is to centralise
            the resolution of type names to <see cref="T:System.Type"/> instances
            beyond that offered by the plain vanilla
            <see cref="M:System.Type.GetType(System.String)"/> method call.
            </p>
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.ITypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.CachedTypeResolver._typeCache">
            <summary>
            The cache, mapping type names (<see cref="T:System.String"/> instances) against
            <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.CachedTypeResolver.#ctor(IBatisNet.Common.Utilities.TypesResolver.ITypeResolver)">
            <summary>
            Creates a new instance of the <see cref="T:IBatisNet.Common.Utilities.TypesResolver.CachedTypeResolver"/> class.
            </summary>
            <param name="typeResolver">
            The <see cref="T:IBatisNet.Common.Utilities.TypesResolver.ITypeResolver"/> that this instance will delegate
            actual <see cref="T:System.Type"/> resolution to if a <see cref="T:System.Type"/>
            cannot be found in this instance's <see cref="T:System.Type"/> cache.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="typeResolver"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.CachedTypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry">
            <summary> 
            Provides access to a central registry of aliased <see cref="T:System.Type"/>s.
            </summary>
            <remarks>
            <p>
            Simplifies configuration by allowing aliases to be used instead of
            fully qualified type names.
            </p>
            <p>
            Comes 'pre-loaded' with a number of convenience alias' for the more
            common types; an example would be the '<c>int</c>' (or '<c>Integer</c>'
            for Visual Basic.NET developers) alias for the <see cref="T:System.Int32"/>
            type.
            </p>
            </remarks>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.ArrayListAlias1">
            <summary>
            The alias around the 'list' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.ArrayListAlias2">
            <summary>
            Another alias around the 'list' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.BoolAlias">
            <summary>
            Another alias around the 'bool' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.BooleanAlias">
            <summary>
            The alias around the 'bool' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.ByteAlias">
            <summary>
            The alias around the 'byte' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.CharAlias">
            <summary>
            The alias around the 'char' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.DateAlias1">
            <summary>
            The alias around the 'DateTime' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.DateAlias2">
            <summary>
            Another alias around the 'DateTime' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.DecimalAlias">
            <summary>
            The alias around the 'decimal' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.DoubleAlias">
            <summary>
            The alias around the 'double' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.FloatAlias">
            <summary>
            The alias around the 'float' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.SingleAlias">
            <summary>
            Another alias around the 'float' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.GuidAlias">
            <summary>
            The alias around the 'guid' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.HashtableAlias1">
            <summary>
            The alias around the 'Hashtable' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.HashtableAlias2">
            <summary>
            Another alias around the 'Hashtable' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.HashtableAlias3">
            <summary>
            Another alias around the 'Hashtable' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.Int16Alias1">
            <summary>
            The alias around the 'short' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.Int16Alias2">
            <summary>
            Another alias around the 'short' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.Int32Alias1">
            <summary>
            The alias around the 'int' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.Int32Alias2">
            <summary>
            Another alias around the 'int' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.Int32Alias3">
            <summary>
            Another alias around the 'int' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.Int64Alias1">
            <summary>
            The alias around the 'long' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.Int64Alias2">
            <summary>
            Another alias around the 'long' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.UInt16Alias1">
            <summary>
            The alias around the 'unsigned short' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.UInt16Alias2">
            <summary>
            Another alias around the 'unsigned short' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.UInt32Alias1">
            <summary>
            The alias around the 'unsigned int' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.UInt32Alias2">
            <summary>
            Another alias around the 'unsigned int' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.UInt64Alias1">
            <summary>
            The alias around the 'unsigned long' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.UInt64Alias2">
            <summary>
            Another alias around the 'unsigned long' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.SByteAlias">
            <summary>
            The alias around the 'SByte' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.StringAlias">
            <summary>
            The alias around the 'string' type.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.TimeSpanAlias">
            <summary>
            The alias around the 'TimeSpan' type.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.#cctor">
            <summary>
            Initialises the static properties of the TypeAliasResolver class.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.TypeRegistry.ResolveType(System.String)">
            <summary> 
            Resolves the supplied <paramref name="alias"/> to a <see cref="T:System.Type"/>. 
            </summary> 
            <param name="alias">
            The alias to resolve.
            </param>
            <returns>
            The <see cref="T:System.Type"/> the supplied <paramref name="alias"/> was
            associated with, or <see lang="null"/> if no <see cref="T:System.Type"/> 
            was previously registered for the supplied <paramref name="alias"/>.
            </returns>
            <remarks>The alis name will be convert in lower character before the resolution.</remarks>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="alias"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="T:IBatisNet.Common.Utilities.TypesResolver.TypeResolver">
            <summary>
            Resolves a <see cref="T:System.Type"/> by name.
            </summary>
            <remarks>
            <p>
            The rationale behind the creation of this class is to centralise the
            resolution of type names to <see cref="T:System.Type"/> instances beyond that
            offered by the plain vanilla System.Type.GetType method call.
            </p>
            </remarks>
            <version>$Id: TypeResolver.cs,v 1.5 2004/09/28 07:51:47 springboy Exp $</version>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.TypeResolver.#ctor">
            <summary>
            Creates a new instance of the TypeResolver class.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.TypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/> instance.
            </summary>
            <param name="typeName">
            The unresolved name of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.TypeResolver.ResolveType(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.TypeResolver.LoadTypeDirectlyFromAssembly(IBatisNet.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo)">
            <summary>
            Uses <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/>
            to load an <see cref="T:System.Reflection.Assembly"/> and then the attendant
            <see cref="T:System.Type"/> referred to by the <paramref name="typeInfo"/>
            parameter.
            </summary>
            <remarks>
            <p>
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> is
            deprecated in .NET 2.0, but is still used here (even when this class is
            compiled for .NET 2.0);
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> will
            still resolve (non-.NET Framework) local assemblies when given only the
            display name of an assembly (the behaviour for .NET Framework assemblies
            and strongly named assemblies is documented in the docs for the
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> method).
            </p>
            </remarks>
            <param name="typeInfo">
            The assembly and type to be loaded.
            </param>
            <returns>
            A <see cref="T:System.Type"/>, or <see lang="null"/>.
            </returns>
            <exception cref="T:System.Exception">
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/>
            </exception>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.TypeResolver.LoadTypeByIteratingOverAllLoadedAssemblies(IBatisNet.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo)">
            <summary>
            Check all assembly
            to load the attendant <see cref="T:System.Type"/> referred to by 
            the <paramref name="typeInfo"/> parameter.
            </summary>
            <param name="typeInfo">
            The type to be loaded.
            </param>
            <returns>
            A <see cref="T:System.Type"/>, or <see lang="null"/>.
            </returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo">
            <summary>
            Holds data about a <see cref="T:System.Type"/> and it's
            attendant <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.TYPE_ASSEMBLY_SEPARATOR">
            <summary>
            The string that separates a <see cref="T:System.Type"/> name
            from the name of it's attendant <see cref="T:System.Reflection.Assembly"/>
            in an assembly qualified type name.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the TypeAssemblyInfo class.
            </summary>
            <param name="unresolvedTypeName">
            The unresolved name of a <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="P:IBatisNet.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.TypeName">
            <summary>
            The (unresolved) type name portion of the original type name.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.AssemblyName">
            <summary>
            The (unresolved, possibly partial) name of the attandant assembly.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.IsAssemblyQualified">
            <summary>
            Is the type name being resolved assembly qualified?
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.ConfigureHandler">
            <summary>
            Represents the method that handles calls from Configure.
            </summary>
            <remarks>
            obj is a null object in a DaoManager context.
            obj is the reconfigured sqlMap in a SqlMap context.
            </remarks>
        </member>
        <member name="T:IBatisNet.Common.Utilities.StateConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.StateConfig.FileName">
            <summary>
            Master Config File name.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.StateConfig.ConfigureHandler">
            <summary>
            Delegate called when a file is changed, use it to rebuild.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.ConfigWatcherHandler">
            <summary>
            Class used to watch config files.
            </summary>
            <remarks>
            Uses the <see cref="T:System.IO.FileSystemWatcher"/> to monitor
            changes to a specified file. Because multiple change notifications
            may be raised when the file is modified, a timer is used to
            compress the notifications into a single event. The timer
            waits for <see cref="F:IBatisNet.Common.Utilities.ConfigWatcherHandler.TimoutMillis"/> time before delivering
            the event notification. If any further <see cref="T:System.IO.FileSystemWatcher"/>
            change notifications arrive while the timer is waiting it
            is reset and waits again for <see cref="F:IBatisNet.Common.Utilities.ConfigWatcherHandler.TimoutMillis"/> to
            elaps.
            </remarks>
        </member>
        <member name="F:IBatisNet.Common.Utilities.ConfigWatcherHandler.TimoutMillis">
            <summary>
            The default amount of time to wait after receiving notification
            before reloading the config file.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.ConfigWatcherHandler._timer">
            <summary>
            The timer used to compress the notification events.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.ConfigWatcherHandler._filesToWatch">
            <summary>
            A list of configuration files to watch.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.ConfigWatcherHandler._filesWatcher">
            <summary>
            The list of FileSystemWatcher.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.ConfigWatcherHandler.#ctor(System.Threading.TimerCallback,IBatisNet.Common.Utilities.StateConfig)">
             <summary>
            -
             </summary>
             <param name="state">
             Represent the call context of the SqlMap or DaoManager ConfigureAndWatch method call.
             </param>
             <param name="onWhatchedFileChange"></param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.ConfigWatcherHandler.AddFileToWatch(System.IO.FileInfo)">
            <summary>
            Add a file to be monitored.
            </summary>
            <param name="configFile"></param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.ConfigWatcherHandler.ClearFilesMonitored">
            <summary>
            Reset the list of files being monitored.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.ConfigWatcherHandler.ConfigWatcherHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event handler used by <see cref="T:IBatisNet.Common.Utilities.ConfigWatcherHandler"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
            This handler reloads the configuration from the file when the event is fired.
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Utilities.ConfigWatcherHandler.ConfigWatcherHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Event handler used by <see cref="T:IBatisNet.Common.Utilities.ConfigWatcherHandler"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
            This handler reloads the configuration from the file when the event is fired.
            </remarks>
        </member>
        <member name="T:IBatisNet.Common.Utilities.DBHelperParameterCache">
            <summary>
            DBHelperParameterCache provides functions to leverage a 
            static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.DBHelperParameterCache.DiscoverSpParameterSet(IBatisNet.Common.IDalSession,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of Parameters for a stored procedure
            </summary>
            <param name="session">An IDalSession object</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">whether or not to include their return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.DBHelperParameterCache.InternalDiscoverSpParameterSet(IBatisNet.Common.IDalSession,System.String,System.Boolean)">
            <summary>
            Discover at run time the appropriate set of Parameters for a stored procedure
            </summary>
            <param name="session">An IDalSession object</param>
            <param name="spName">Name of the stored procedure.</param>
            <param name="includeReturnValueParameter">if set to <c>true</c> [include return value parameter].</param>
            <returns>The stored procedure parameters.</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.DBHelperParameterCache.CloneParameters(System.Data.IDataParameter[])">
            <summary>
            Deep copy of cached IDataParameter array.
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.DBHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for an IDbConnection</param>
            <param name="commandText">the stored procedure name or SQL command</param>
            <param name="commandParameters">an array of IDataParameters to be cached</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.DBHelperParameterCache.Clear">
            <summary>
            Clear the parameter cache.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.DBHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for an IDbConnection</param>
            <param name="commandText">the stored procedure name or SQL command</param>
            <returns>an array of IDataParameters</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.DBHelperParameterCache.GetSpParameterSet(IBatisNet.Common.IDalSession,System.String)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="session">a valid session</param>
            <param name="spName">the name of the stored procedure</param>
            <returns>an array of IDataParameters</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.DBHelperParameterCache.GetSpParameterSet(IBatisNet.Common.IDalSession,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="session">a valid session</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
            <returns>an array of IDataParameters</returns>
        </member>
        <member name="T:IBatisNet.Common.Utilities.HashCodeProvider">
            <summary>
            Summary description for HashCodeProvider.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.HashCodeProvider.GetIdentityHashCode(System.Object)">
            <summary>
            Supplies a hash code for an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>A hash code</returns>
            <remarks>
            Buggy in .NET V1.0
            .NET Fx v1.1 Update: 
            As of v1.1 of the framework, there is a method System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(object) that does this as well.
            I will not use to Keep compatiblity with .NET V1.0
            </remarks>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Resources">
            <summary>
            A class to simplify access to resources.
            
            The file can be loaded from the application root directory 
            (use the resource attribute) 
            or from any valid URL (use the url attribute). 
            For example,to load a fixed path file, use:
            &lt;properties url=”file:///c:/config/my.properties” /&gt;
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Resources.PROTOCOL_SEPARATOR">
            <summary>
            Protocole separator
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.GetFileSystemResourceWithoutProtocol(System.String)">
            <summary>
            Strips protocol name from the resource name
            </summary>
            <param name="filePath">Name of the resource</param>
            <returns>Name of the resource without protocol name</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.GetConfigAsXmlDocument(System.String)">
            <summary>
            Get config file
            </summary>
            <param name="resourcePath">
            A config resource path.
            </param>
            <returns>An XmlDocument representation of the config file</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <returns>
            true if the caller has the required permissions and path contains the name of an existing file
            false if the caller has the required permissions and path doesn't contain the name of an existing file
            else exception
            </returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.GetAsXmlDocument(System.Xml.XmlNode,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Load an XML resource from a location specify by the node.
            </summary>
            <param name="node">An location node</param>
            <param name="properties">the global properties</param>
            <returns>Return the Xml document load.</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.GetValueOfNodeResourceUrl(System.Xml.XmlNode,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Get the path resource of an url or resource location.
            </summary>
            <param name="node">The specification from where to load.</param>
            <param name="properties">the global properties</param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.GetStreamAsXmlDocument(System.IO.Stream)">
            <summary>
            Get XmlDocument from a stream resource
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.GetFileInfoAsXmlDocument(System.IO.FileInfo)">
            <summary>
            Get XmlDocument from a FileInfo resource
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.GetUriAsXmlDocument(System.Uri)">
            <summary>
            Get XmlDocument from a Uri resource
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.GetResourceAsXmlDocument(System.String)">
            <summary>
            Get XmlDocument from relative (from root directory of the application) path resource
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.GetUrlAsXmlDocument(System.String)">
            <summary>
            Get XmlDocument from absolute path resource
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.GetEmbeddedResourceAsXmlDocument(System.String)">
            <summary>
            
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.GetFileInfo(System.String)">
            <summary>
            Load a file from a given resource path
            </summary>
            <param name="resourcePath">
            The resource path
            </param>
            <returns>return a FileInfo</returns>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.TypeForName(System.String)">
            <summary>
            Resolves the supplied type name into a <see cref="T:System.Type"/> instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type cannot be resolved.
            </exception>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Resources.ApplicationBase">
            <summary>
            The name of the directory containing the application
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Resources.BaseDirectory">
            <summary>
            The name of the directory used to probe the assemblies.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.Resources.FileAssemblyInfo">
            <summary>
            Holds data about a <see cref="T:System.Type"/> and it's
            attendant <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="F:IBatisNet.Common.Utilities.Resources.FileAssemblyInfo.FileAssemblySeparator">
            <summary>
            The string that separates file name
            from their attendant <see cref="T:System.Reflection.Assembly"/>
            names in an assembly qualified type name.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.FileAssemblyInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the FileAssemblyInfo class.
            </summary>
            <param name="unresolvedFileName">
            The unresolved name of a <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.Resources.FileAssemblyInfo.SplitFileAndAssemblyNames(System.String)">
            <summary>
            
            </summary>
            <param name="originalFileName"></param>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Resources.FileAssemblyInfo.ResourceFileName">
            <summary>
            The resource file name .
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Resources.FileAssemblyInfo.OriginalFileName">
            <summary>
            The original name.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Resources.FileAssemblyInfo.FileName">
            <summary>
            The file name portion.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Resources.FileAssemblyInfo.AssemblyName">
            <summary>
            The (unresolved, possibly partial) name of the attandant assembly.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.Utilities.Resources.FileAssemblyInfo.IsAssemblyQualified">
            <summary>
            Is the type name being resolved assembly qualified?
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.ScriptRunner">
            <summary>
            Description résumée de ScriptRunner.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.ScriptRunner.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.ScriptRunner.RunScript(IBatisNet.Common.IDataSource,System.String)">
            <summary>
            Run an sql script
            </summary>
            <param name="dataSource">The dataSouce that will be used to run the script.</param>
            <param name="sqlScriptPath">a path to an sql script file.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.ScriptRunner.RunScript(IBatisNet.Common.IDataSource,System.String,System.Boolean)">
            <summary>
            Run an sql script
            </summary>
            <param name="dataSource">The dataSouce that will be used to run the script.</param>
            <param name="sqlScriptPath">a path to an sql script file.</param>
            <param name="doParse">parse out the statements in the sql script file.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.ScriptRunner.ExecuteStatements(IBatisNet.Common.IDataSource,System.Collections.ArrayList)">
            <summary>
            Execute the given sql statements
            </summary>
            <param name="dataSource">The dataSouce that will be used.</param>
            <param name="sqlStatements">An ArrayList of sql statements to execute.</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.ScriptRunner.ParseScript(System.String)">
            <summary>
            Parse and tokenize the sql script into multiple statements
            </summary>
            <param name="script">the script to parse</param>
        </member>
        <member name="T:IBatisNet.Common.Utilities.StringTokenizer">
            <summary>
            A StringTokenizer java like object 
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Utilities.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a StringTokenizer on the specified String, using the
            default delimiter set (which is " \t\n\r\f").
            </summary>
            <param name="str">The input String</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a StringTokenizer on the specified String, 
            using the specified delimiter set.
            </summary>
            <param name="str">The input String</param>
            <param name="delimiters">The delimiter String</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a StringTokenizer on the specified String, 
            using the specified delimiter set.
            </summary>
            <param name="str">The input String</param>
            <param name="delimiters">The delimiter String</param>
            <param name="returnDelimiters">Returns delimiters as tokens or skip them</param>
        </member>
        <member name="M:IBatisNet.Common.Utilities.StringTokenizer.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:IBatisNet.Common.Utilities.StringTokenizer.TokenNumber">
            <summary>
            Returns the number of tokens in the String using
            the current deliminter set.  This is the number of times
            nextToken() can return before it will generate an exception.
            Use of this routine to count the number of tokens is faster
            than repeatedly calling nextToken() because the substrings
            are not constructed and returned for each token.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.Utilities.TypeUtils">
            <summary>
             Helper methods with regard to type.
            </summary>
            <remarks>
            <p>
            Mainly for internal use within the framework.
            </p>
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypeUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:IBatisNet.Common.Utilities.TypeUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypeUtils.ResolveType(System.String)">
            <summary>
            Resolves the supplied type name into a <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type cannot be resolved.
            </exception>
        </member>
        <member name="M:IBatisNet.Common.Utilities.TypeUtils.InstantiatePrimitiveType(System.TypeCode)">
            <summary>
            Instantiate a 'Primitive' Type.
            </summary>
            <param name="typeCode">a typeCode.</param>
            <returns>An object.</returns>
        </member>
        <member name="T:IBatisNet.Common.Xml.NodeUtils">
            <summary>
            Summary description for NodeUtils.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.Xml.NodeUtils.GetStringAttribute(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Xml.NodeUtils.GetStringAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Xml.NodeUtils.GetByteAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.Byte)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Xml.NodeUtils.GetIntAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Xml.NodeUtils.GetBooleanAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Xml.NodeUtils.ParseAttributes(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Xml.NodeUtils.ParseAttributes(System.Xml.XmlNode,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:IBatisNet.Common.Xml.NodeUtils.ParsePropertyTokens(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Replace properties by their values in the given string
            </summary>
            <param name="str"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="T:IBatisNet.Common.DataSource">
            <summary>
            Information about a data source.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.IDataSource">
            <summary>
            IDataSource
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDataSource.Name">
            <summary>
            DataSource Name.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDataSource.ConnectionString">
            <summary>
            Connection string used to create connections.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDataSource.DbProvider">
            <summary>
            The data provider.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.DataSource.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:IBatisNet.Common.DataSource.ToString">
            <summary>
            ToString implementation.
            </summary>
            <returns>A string that describes the data source</returns>
        </member>
        <member name="P:IBatisNet.Common.DataSource.ConnectionString">
            <summary>
            The connection string.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.DataSource.Name">
            <summary>
            DataSource Name
            </summary>
        </member>
        <member name="P:IBatisNet.Common.DataSource.DbProvider">
            <summary>
            The provider to use for this data source.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.DataSourceDeSerializer">
            <summary>
            Summary description for DataSourceDeSerializer.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.DataSourceDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a DataSource object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:IBatisNet.Common.DbProvider">
            <summary>
            Information about a data provider.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.IDbProvider">
            <summary>
            Factory interface to create provider specific ado.net objects.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.IDbProvider.CreateConnection">
            <summary>
            Create a connection object for this provider.
            </summary>
            <returns>An 'IDbConnection' object.</returns>
        </member>
        <member name="M:IBatisNet.Common.IDbProvider.CreateCommand">
            <summary>
            Create a command object for this provider.
            </summary>
            <returns>An 'IDbCommand' object.</returns>
        </member>
        <member name="M:IBatisNet.Common.IDbProvider.CreateDataAdapter">
            <summary>
            Create a dataAdapter object for this provider.
            </summary>
            <returns>An 'IDbDataAdapter' object.</returns>
        </member>
        <member name="M:IBatisNet.Common.IDbProvider.CreateDataParameter">
            <summary>
            Create a IDataParameter object for this provider.
            </summary>
            <returns>An 'IDbDataParameter' object.</returns>
        </member>
        <member name="M:IBatisNet.Common.IDbProvider.FormatNameForSql(System.String)">
            <summary>
            Change the parameterName into the correct format IDbCommand.CommandText
            for the ConnectionProvider
            </summary>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbCommand.CommandText</returns>
        </member>
        <member name="M:IBatisNet.Common.IDbProvider.FormatNameForParameter(System.String)">
            <summary>
            Changes the parameterName into the correct format for an IDbParameter
            for the Driver.
            </summary>
            <remarks>
            For SqlServerConnectionProvider it will change <c>id</c> to <c>@id</c>
            </remarks>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbParameter.</returns>
        </member>
        <member name="M:IBatisNet.Common.IDbProvider.Initialize">
            <summary>
            Init the provider.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.AssemblyName">
            <summary>
            The name of the assembly which conatins the definition of the provider.
            </summary>
            <example>Examples : "System.Data", "Microsoft.Data.Odbc"</example>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.IsDefault">
            <summary>
            Tell us if it is the default data source.
            Default false.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.IsEnabled">
            <summary>
            Tell us if this provider is enabled.
            Default true.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.AllowMARS">
            <summary>
            Tell us if this provider allows having multiple open <see cref="T:System.Data.IDataReader"/> with
            the same <see cref="T:System.Data.IDbConnection"/>.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.DbConnectionClass">
            <summary>
            The connection class name to use.
            </summary>
            <example>
            "System.Data.OleDb.OleDbConnection", 
            "System.Data.SqlClient.SqlConnection", 
            "Microsoft.Data.Odbc.OdbcConnection"
            </example>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.UseParameterPrefixInSql">
            <summary>
            Does this ConnectionProvider require the use of a Named Prefix in the SQL 
            statement. 
            </summary>
            <remarks>
            The OLE DB/ODBC .NET Provider does not support named parameters for 
            passing parameters to an SQL Statement or a stored procedure called 
            by an IDbCommand when CommandType is set to Text.
            
            For example, SqlClient requires select * from simple where simple_id = @simple_id
            If this is false, like with the OleDb or Obdc provider, then it is assumed that 
            the ? can be a placeholder for the parameter in the SQL statement when CommandType 
            is set to Text.		
            </remarks>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.UseParameterPrefixInParameter">
            <summary>
            Does this ConnectionProvider require the use of the Named Prefix when trying
            to reference the Parameter in the Command's Parameter collection. 
            </summary>
            <remarks>
            This is really only useful when the UseParameterPrefixInSql = true. 
            When this is true the code will look like IDbParameter param = cmd.Parameters["@paramName"], 
            if this is false the code will be IDbParameter param = cmd.Parameters["paramName"] - ie - Oracle.
            </remarks>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.UsePositionalParameters">
            <summary>
            The OLE DB/OBDC .NET Provider uses positional parameters that are marked with a 
            question mark (?) instead of named parameters.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.SetDbParameterSize">
            <summary>
            Used to indicate whether or not the provider 
            supports parameter size.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter size.
            </remarks>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.SetDbParameterPrecision">
            <summary>
            Used to indicate whether or not the provider 
            supports parameter precision.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter precision.
            </remarks>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.SetDbParameterScale">
            <summary>
            Used to indicate whether or not the provider 
            supports a parameter scale.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter scale.
            </remarks>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.UseDeriveParameters">
            <summary>
            Used to indicate whether or not the provider 
            supports DeriveParameters method for procedure.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.DbCommandClass">
            <summary>
            The command class name to use.
            </summary>
            <example>
            "System.Data.SqlClient.SqlCommand"
            </example>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.ParameterDbTypeClass">
            <summary>
            The ParameterDbType class name to use.
            </summary>			
            <example>
            "System.Data.SqlDbType"
            </example>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.ParameterDbTypeProperty">
            <summary>
            The ParameterDbTypeProperty class name to use.
            </summary>
            <example >
            SqlDbType in SqlParamater.SqlDbType, 
            OracleType in OracleParameter.OracleType.
            </example>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.DataAdapterClass">
            <summary>
            The dataAdapter class name to use.
            </summary>
            <example >
            "System.Data.SqlDbType"
            </example>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.CommandBuilderClass">
            <summary>
            The commandBuilder class name to use.
            </summary>
            <example >
            "System.Data.OleDb.OleDbCommandBuilder", 
            "System.Data.SqlClient.SqlCommandBuilder", 
            "Microsoft.Data.Odbc.OdbcCommandBuilder"
            </example>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.Name">
            <summary>
            Name used to identify the provider amongst the others.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.ParameterPrefix">
            <summary>
            Parameter prefix use in store procedure.
            </summary>
            <example> @ for Sql Server.</example>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.IsObdc">
            <summary>
            Check if this provider is Odbc ?
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.CommandBuilderType">
            <summary>
            Create the CommandBuilder Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="P:IBatisNet.Common.IDbProvider.ParameterDbType">
            <summary>
            Get the ParameterDb Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:IBatisNet.Common.DbProvider.#ctor">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.DbProvider.Initialize">
            <summary>
            Init the provider.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.DbProvider.CreateConnection">
            <summary>
            Create a connection object for this provider.
            </summary>
            <returns>An 'IDbConnection' object.</returns>
        </member>
        <member name="M:IBatisNet.Common.DbProvider.CreateCommand">
            <summary>
            Create a command object for this provider.
            </summary>
            <returns>An 'IDbCommand' object.</returns>
        </member>
        <member name="M:IBatisNet.Common.DbProvider.CreateDataAdapter">
            <summary>
            Create a dataAdapter object for this provider.
            </summary>
            <returns>An 'IDbDataAdapter' object.</returns>
        </member>
        <member name="M:IBatisNet.Common.DbProvider.CreateDataParameter">
            <summary>
            Create a IDbDataParameter object for this provider.
            </summary>
            <returns>An 'IDbDataParameter' object.</returns>
        </member>
        <member name="M:IBatisNet.Common.DbProvider.FormatNameForSql(System.String)">
            <summary>
            Change the parameterName into the correct format IDbCommand.CommandText
            for the ConnectionProvider
            </summary>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbCommand.CommandText</returns>
        </member>
        <member name="M:IBatisNet.Common.DbProvider.FormatNameForParameter(System.String)">
            <summary>
            Changes the parameterName into the correct format for an IDbParameter
            for the Driver.
            </summary>
            <remarks>
            For SqlServerConnectionProvider it will change <c>id</c> to <c>@id</c>
            </remarks>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbParameter.</returns>
        </member>
        <member name="M:IBatisNet.Common.DbProvider.Equals(System.Object)">
            <summary>
            Equals implemantation.
            </summary>
            <param name="obj">The test object.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:IBatisNet.Common.DbProvider.GetHashCode">
            <summary>
            A hashcode for the provider.
            </summary>
            <returns>An integer.</returns>
        </member>
        <member name="M:IBatisNet.Common.DbProvider.ToString">
            <summary>
            ToString implementation.
            </summary>
            <returns>A string that describes the provider.</returns>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.AssemblyName">
            <summary>
            The name of the assembly which conatins the definition of the provider.
            </summary>
            <example>Examples : "System.Data", "Microsoft.Data.Odbc"</example>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.IsDefault">
            <summary>
            Tell us if it is the default data source.
            Default false.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.IsEnabled">
            <summary>
            Tell us if this provider is enabled.
            Default true.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.AllowMARS">
            <summary>
            Tell us if this provider allows having multiple open <see cref="T:System.Data.IDataReader"/> with
            the same <see cref="T:System.Data.IDbConnection"/>.
            </summary>
            <remarks>
            It's a new feature in ADO.NET 2.0 and Sql Server 2005 that allows for multiple forward only read only result sets (MARS).
            Some databases have supported this functionality for a long time :
            Not Supported : DB2, MySql.Data, OLE DB provider [except Sql Server 2005 when using MDAC 9], SQLite, Obdc 
            Supported :  Sql Server 2005, Npgsql
            </remarks>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.DbConnectionClass">
            <summary>
            The connection class name to use.
            </summary>
            <example>
            "System.Data.OleDb.OleDbConnection", 
            "System.Data.SqlClient.SqlConnection", 
            "Microsoft.Data.Odbc.OdbcConnection"
            </example>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.UseParameterPrefixInSql">
            <summary>
            Does this ConnectionProvider require the use of a Named Prefix in the SQL 
            statement. 
            </summary>
            <remarks>
            The OLE DB/ODBC .NET Provider does not support named parameters for 
            passing parameters to an SQL Statement or a stored procedure called 
            by an IDbCommand when CommandType is set to Text.
            
            For example, SqlClient requires select * from simple where simple_id = @simple_id
            If this is false, like with the OleDb or Obdc provider, then it is assumed that 
            the ? can be a placeholder for the parameter in the SQL statement when CommandType 
            is set to Text.		
            </remarks>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.UseParameterPrefixInParameter">
            <summary>
            Does this ConnectionProvider require the use of the Named Prefix when trying
            to reference the Parameter in the Command's Parameter collection. 
            </summary>
            <remarks>
            This is really only useful when the UseParameterPrefixInSql = true. 
            When this is true the code will look like IDbParameter param = cmd.Parameters["@paramName"], 
            if this is false the code will be IDbParameter param = cmd.Parameters["paramName"] - ie - Oracle.
            </remarks>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.UsePositionalParameters">
            <summary>
            The OLE DB/OBDC .NET Provider uses positional parameters that are marked with a 
            question mark (?) instead of named parameters.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.SetDbParameterSize">
            <summary>
            Used to indicate whether or not the provider 
            supports parameter size.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter size.
            </remarks>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.SetDbParameterPrecision">
            <summary>
            Used to indicate whether or not the provider 
            supports parameter precision.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter precision.
            </remarks>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.SetDbParameterScale">
            <summary>
            Used to indicate whether or not the provider 
            supports a parameter scale.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter scale.
            </remarks>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.UseDeriveParameters">
            <summary>
            Used to indicate whether or not the provider 
            supports DeriveParameters method for procedure.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.DbCommandClass">
            <summary>
            The command class name to use.
            </summary>
            <example>
            "System.Data.SqlClient.SqlCommand"
            </example>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.ParameterDbTypeClass">
            <summary>
            The ParameterDbType class name to use.
            </summary>			
            <example>
            "System.Data.SqlDbType"
            </example>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.ParameterDbTypeProperty">
            <summary>
            The ParameterDbTypeProperty class name to use.
            </summary>
            <example >
            SqlDbType in SqlParamater.SqlDbType, 
            OracleType in OracleParameter.OracleType.
            </example>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.DataAdapterClass">
            <summary>
            The dataAdapter class name to use.
            </summary>
            <example >
            "System.Data.SqlDbType"
            </example>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.CommandBuilderClass">
            <summary>
            The commandBuilder class name to use.
            </summary>
            <example >
            "System.Data.OleDb.OleDbCommandBuilder", 
            "System.Data.SqlClient.SqlCommandBuilder", 
            "Microsoft.Data.Odbc.OdbcCommandBuilder"
            </example>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.Name">
            <summary>
            Name used to identify the provider amongst the others.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.ParameterPrefix">
            <summary>
            Parameter prefix use in store procedure.
            </summary>
            <example> @ for Sql Server.</example>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.IsObdc">
            <summary>
            Check if this provider is Odbc ?
            </summary>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.CommandBuilderType">
            <summary>
            Get the CommandBuilder Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="P:IBatisNet.Common.DbProvider.ParameterDbType">
            <summary>
            Get the ParameterDb Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="T:IBatisNet.Common.IDalSession">
            <summary>
            A template for a session in the iBATIS.NET framwork.
            Holds the connection, the transaction ...
            </summary>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.Complete">
            <summary>
            Complete (commit) a transsaction
            </summary>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.OpenConnection">
            <summary>
            Open a connection.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.OpenConnection(System.String)">
            <summary>
            Open a connection, on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.CloseConnection">
            <summary>
            close a connection
            </summary>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.BeginTransaction">
            <summary>
            Open a connection and begin a transaction
            </summary>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.BeginTransaction(System.String)">
            <summary>
            Open a connection and begin a transaction on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.BeginTransaction(System.Boolean)">
            <summary>
            Begins a database transaction
            </summary>
            <param name="openConnection">Open a connection.</param>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.BeginTransaction(System.String,System.Data.IsolationLevel)">
            <summary>
            Open a connection and begin a transaction on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Open a connection and begin a transaction at the data source 
            with the specified IsolationLevel value.
            </summary>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.BeginTransaction(System.String,System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Begins a transaction on the current connection
            with the specified IsolationLevel value.
            </summary>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
            <param name="connectionString">The connection string</param>
            <param name="openConnection">Open a connection.</param>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.BeginTransaction(System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Begins a transaction on the current connection
            with the specified IsolationLevel value.
            </summary>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
            <param name="openConnection">Open a connection.</param>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.CommitTransaction">
            <summary>
            Commit a transaction and close the associated connection
            </summary>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.CommitTransaction(System.Boolean)">
            <summary>
            Commits the database transaction.
            </summary>
            <param name="closeConnection">Close the connection</param>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.RollBackTransaction">
            <summary>
            Rollbak a transaction and close the associated connection
            </summary>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.RollBackTransaction(System.Boolean)">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
            <param name="closeConnection">Close the connection</param>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.CreateCommand(System.Data.CommandType)">
            <summary>
            Create a command
            </summary>
            <param name="commandType">The type of the command</param>
            <returns>An IDbCommand.</returns>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.CreateDataParameter">
            <summary>
            Create an DataParameter
            </summary>
            <returns>An IDbDataParameter.</returns>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Create a DataAdapter
            </summary>
            <param name="command">The statement or stored procedure 
            used to select records in the data source.</param>
            <returns>An IDbDataAdapter.</returns>
        </member>
        <member name="M:IBatisNet.Common.IDalSession.CreateDataAdapter">
            <summary>
            Create a DataAdapter
            </summary>
            <returns>An IDbDataAdapter.</returns>
        </member>
        <member name="P:IBatisNet.Common.IDalSession.DataSource">
            <summary>
            The data source use by the session.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDalSession.Connection">
            <summary>
            The Connection use by the session.
            </summary>
        </member>
        <member name="P:IBatisNet.Common.IDalSession.Transaction">
            <summary>
            The Transaction use by the session.
            </summary>
        </member>
        <member name="T:IBatisNet.Common.ProviderDeSerializer">
            <summary>
            Summary description for ProviderDeSerializer.
            </summary>
        </member>
        <member name="M:IBatisNet.Common.ProviderDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified node in a <see cref="T:IBatisNet.Common.IDbProvider"/>.
            </summary>
            <param name="node">The node.</param>
            <returns>The <see cref="T:IBatisNet.Common.IDbProvider"/></returns>
        </member>
    </members>
</doc>
