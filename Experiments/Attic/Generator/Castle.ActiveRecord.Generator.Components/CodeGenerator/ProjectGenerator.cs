// Copyright 2004-2009 Castle Project - http://www.castleproject.org/
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace Castle.ActiveRecord.Generator.Components.CodeGenerator
{
	using System;
	using System.IO;
	using System.CodeDom;
	using System.CodeDom.Compiler;

	using Castle.ActiveRecord.Generator.Components.Database;


	public class ProjectGenerator : IProjectGenerator
	{
		private ICodeDomGenerator _domGenerator;
		private ICodeProviderFactory _providerFactory;
		private ILogger _logger;

		public ProjectGenerator(ICodeDomGenerator domGenerator, ICodeProviderFactory providerFactory)
		{
			_domGenerator = domGenerator;
			_providerFactory = providerFactory;
		}

		public ILogger Logger
		{
			get { return _logger; }
			set { _logger = value; }
		}

		#region IProjectGenerator Members

		public void Generate(Project project)
		{
			LogStart();

			CodeDomProvider provider = _providerFactory.GetProvider(project.CodeInfo);

			Log( String.Format("Generating project in {0}", project.CodeInfo.Label) );

			CodeNamespace ns = new CodeNamespace(project.Namespace);

			ns.Comments.Add( new CodeCommentStatement("") );
			ns.Comments.Add( new CodeCommentStatement("Generated by ActiveRecord Generator") );
			ns.Comments.Add( new CodeCommentStatement("\r\n") );

			ns.Imports.Add( new CodeNamespaceImport("Castle.ActiveRecord") );

			foreach(IActiveRecordDescriptor desc in project.Descriptors)
			{
				if (desc.ClassName == null || desc.ClassName.Equals("ActiveRecordBase"))
				{
					continue;
				}

				CodeTypeDeclaration decl = _domGenerator.Generate( desc );

				ns.Types.Add( decl );

				WriteClassFile(project, desc.ClassName, ns, provider);

				ns.Types.Remove(decl);
			}

			Log( "Done!" );

			LogEnd();
		}

		#endregion

		private void WriteClassFile(Project project, String name, CodeNamespace ns, CodeDomProvider provider)
		{
			String filename =  String.Format("{0}.{1}", name, provider.FileExtension);

			FileInfo fileInfo = new FileInfo( Path.Combine(project.LastOutDir, filename) );

			if (fileInfo.Exists && !project.OverwriteFiles)
			{
				Log( String.Format("Skipping {0} as it already exists", filename) );
			}
			else
			{
				Log( String.Format("Writing {0}...", filename) );

				try
				{
					using(FileStream stream = new FileStream(fileInfo.FullName, FileMode.Create, FileAccess.Write))
					{
						StreamWriter writer = new StreamWriter(stream);
						CodeGeneratorOptions opts = new CodeGeneratorOptions();
						opts.BracingStyle = "C";
						opts.BlankLinesBetweenMembers = true;
						provider.CreateGenerator().GenerateCodeFromNamespace(ns, writer, opts);
						writer.Flush();
						writer.Close();
					}
				}
				catch(Exception ex)
				{
					Log( String.Format("Error Writing {0} []", filename, ex.Message) );
				}
			}
		}

		private void Log(string message)
		{
			if (Logger != null) Logger.Info(message);
		}

		private void LogStart()
		{
			if (Logger != null) Logger.Start();
		}

		private void LogEnd()
		{
			if (Logger != null) Logger.End();
		}
	}
}
