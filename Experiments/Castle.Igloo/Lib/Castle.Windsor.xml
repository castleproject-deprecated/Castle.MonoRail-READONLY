<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Windsor</name>
    </assembly>
    <members>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.ContainerAdapter">
            <summary>
            Implementation of <see cref="T:Castle.Windsor.Adapters.ComponentModel.IContainerAdapter"/> that assumes ownership of the
            wrapped <see cref="T:Castle.Windsor.IWindsorContainer"/>.  If this adapter is disposed, the underlying
            <see cref="T:Castle.Windsor.IWindsorContainer"/> is diposed as well.
            </summary>
        </member>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper">
            <summary>
            Implementation of <see cref="T:Castle.Windsor.Adapters.ComponentModel.IContainerAdapter"/> that does not assume ownership of the
            wrapped <see cref="T:Castle.Windsor.IWindsorContainer"/>. 
            </summary>
        </member>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.IContainerAdapter">
            <summary>
            Integrates the <see cref="T:Castle.Windsor.WindsorContainer"/> to the System.ComponentModel
            and System.ComponentMode.Design infrastructure.
            </summary>
            <seealso cref="T:System.ComponentModel.IComponent"/>
            <seealso cref="T:System.ComponentModel.IContainer"/>
            <seealso cref="T:System.ComponentModel.Design.IServiceContainer"/>
        </member>
        <member name="T:Castle.Windsor.IContainerAccessor">
            <summary>
            This interface should be implemented by classes
            that are available in a bigger context, exposing
            the container to different areas in the same application.
            <p>
            For example, in Web application, the (global) HttpApplication
            subclasses should implement this interface to expose 
            the configured container
            </p>
            </summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.#ctor(Castle.Windsor.IWindsorContainer)">
            <summary>
            Constructs an initial ContainerWrapper.
            </summary>
            <param name="container">The <see cref="T:Castle.Windsor.IWindsorContainer"/> to adapt.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.#ctor(Castle.Windsor.IWindsorContainer,System.IServiceProvider)">
            <summary>
            Constructs an initial ContainerWrapper.
            </summary>
            <param name="container">The <see cref="T:Castle.Windsor.IWindsorContainer"/> to adapt.</param>
            <param name="parentProvider">The parent <see cref="T:System.IServiceProvider"/>.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.Add(System.ComponentModel.IComponent)">
            <summary>
            Adds the specified <see cref="T:System.ComponentModel.IComponent"/> to the <see cref="T:System.ComponentModel.IContainer"/> at the end of the list.
            </summary>
            <param name="component">The <see cref="T:System.ComponentModel.IComponent"/> to add.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.Add(System.ComponentModel.IComponent,System.String)">
            <summary>
            Adds the specified <see cref="T:System.ComponentModel.IComponent"/> to the <see cref="T:System.ComponentModel.IContainer"/> at the end of the list,
            and assigns a name to the component.
            </summary>
            <param name="component">The <see cref="T:System.ComponentModel.IComponent"/> to add.</param>
            <param name="name">The unique, case-insensitive name to assign to the component, or null.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.Remove(System.ComponentModel.IComponent)">
            <summary>
            Removes a component from the <see cref="T:System.ComponentModel.IContainer"/>.
            </summary>
            <param name="component">The <see cref="T:System.ComponentModel.IComponent"/> to remove</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">The type of service.</param>
            <returns>An object inplementing service, or null.</returns>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.AddService(System.Type,System.Object)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The instance of the service to add.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback object that is used to create the service.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the specified service to the service container, and optionally
            promotes the service to any parent service containers.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">The instance of the service to add.</param>
            <param name="promote">true to promote this request to any parent service containers.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Adds the specified service to the service container, and optionally 
            promotes the service to parent service containers.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback object that is used to create the service.</param>
            <param name="promote">true to promote this request to any parent service containers.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.RemoveService(System.Type)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.RemoveService(System.Type,System.Boolean)">
            <summary>
            Removes the specified service type from the service container, 
            and optionally promotes the service to parent service containers.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
            <param name="promote">true to promote this request to any parent service containers.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.IsIntrinsicService(System.Type)">
            <summary>
            Determins if the service type represents an intrinsic service.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
            <returns>true if the service type is an intrinsic service.</returns>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.HasService(System.Type)">
            <summary>
            Determins if the specified service type exists in the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
            <returns>true if the service type exists.</returns>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.Dispose">
            <summary>
            Releases the resources used by the component.
            </summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the component.
            </summary>
            <param name="disposing">true if disposing.</param>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"/> associated with the <see cref="T:System.ComponentModel.IComponent"/>.
            </summary>
        </member>
        <member name="E:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.Disposed">
            <summary>
            Event that notifies the disposal of the <see cref="T:System.ComponentModel.IComponent"/>.
            </summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.Components">
            <summary>
            Gets all the components in the <see cref="T:System.ComponentModel.IContainer"/>.
            </summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.ContainerWrapper.Container">
            <summary>
            Gets the adapted <see cref="T:Castle.Windsor.IWindsorContainer"/>
            </summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerAdapter.#ctor">
            <summary>
            Constructs a default ContainerAdapter.
            </summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerAdapter.#ctor(System.IServiceProvider)">
            <summary>
            Constructs a chained ContainerAdapter.
            </summary>
            <param name="parentProvider">The parent <see cref="T:System.IServiceProvider"/>.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerAdapter.#ctor(Castle.Windsor.IWindsorContainer)">
            <summary>
            Constructs an initial ContainerAdapter.
            </summary>
            <param name="container">The <see cref="T:Castle.Windsor.IWindsorContainer"/> to adapt.</param>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.ContainerAdapter.#ctor(Castle.Windsor.IWindsorContainer,System.IServiceProvider)">
            <summary>
            Constructs an initial ContainerAdapter.
            </summary>
            <param name="container">The <see cref="T:Castle.Windsor.IWindsorContainer"/> to adapt.</param>
            <param name="parentProvider">The parent <see cref="T:System.IServiceProvider"/>.</param>
        </member>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.ServiceCreatorCallbackActivator">
            <summary>
            Custom activator to create the instance on demand.
            </summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.AppDomain.CastleSectionHandler">
            <summary>
            Implementation of <see cref="T:System.Configuration.IConfigurationSectionHandler"/>.
            Do not support configuration inheritance.
            </summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractXmlNodeProcessor.Accept(System.Xml.XmlNode)">
            <summary>
            Accepts the specified node.
            Check if node has the same name as the processor and the node.NodeType
            is in the AcceptNodeTypes List
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractXmlNodeProcessor.GetNodeAsElement(System.Xml.XmlElement,System.Xml.XmlNode)">
            <summary>
            Convert and return child parameter into an XmlElement
            An exception will be throw in case the child node cannot be converted
            </summary>
            <param name="element">Parent node</param>
            <param name="child">Node to be converted</param>
            <returns>child node as XmlElement</returns>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AttributesElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>
            
            </summary>
            <param name="nodeList"></param>
            <param name="engine"></param>
            <example>
            <code>
            	<properties>
            		<attributes>
            			<myAttribute>attributeValue</myAttribute>
            		</attributes>
            		<myProperty>propertyValue</myProperty>
            	</properties>
            </code>
            </example>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultElementProcessor.ProcessAttributes(System.Xml.XmlElement,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>
            Processes element attributes.
            if the attribute is include will append to the element
            all contents from the file.
            if the attribute has a property reference the reference will be
            expanded
            </summary>
            <param name="element">The element.</param>
            <param name="engine"></param>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultTextNodeProcessor.PropertyValidationRegExp">
            <summary>
            Properties names can contain a-zA-Z0-9_. 
            i.e. #!{ my_node_name } || #{ my.node.name }
            spaces are trimmed
            </summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultTextNodeProcessor.ProcessString(System.Xml.XmlNode,System.String,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>
            Processes the string.
            </summary>
            <param name="node">The node.</param>
            <param name="value">The value.</param>
            <param name="engine">The context.</param>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IncludeElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>
            Accepts the specified node.
            Check if node has the same name as the processor and the node.NodeType
            is in the AcceptNodeTypes List
            NOTE: since the BatchRegistrationFacility already uses an include
            element we will distringish between both by looking for the presence of an uri attribute
            we should revisit this later by using xml-namespaces
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.PropertiesElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>
            
            </summary>
            <param name="nodeList"></param>
            <param name="engine"></param>
            <example>
            <code>
            	<properties>
            		<attributes>
            			<myAttribute>attributeValue</myAttribute>
            		</attributes>
            		<myProperty>propertyValue</myProperty>
            	</properties>
            </code>
            </example>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorEngine.DispatchProcessAll(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList)">
            <summary>
            Processes the element.
            </summary>
            <param name="nodeList">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorEngine.DispatchProcessCurrent(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList)">
            <summary>
            Processes the element.
            </summary>
            <param name="nodeList">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorNodeList.CloneNodeList(System.Xml.XmlNodeList)">
            <summary>
            Make a shallow copy of the nodeList.
            </summary>
            <param name="nodeList">The nodeList to be copied.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessor">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.AbstractInterpreter">
            <summary>
            Provides common methods for those who wants 
            to implement <see cref="T:Castle.Windsor.Configuration.IConfigurationInterpreter"/>
            </summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.IConfigurationInterpreter">
            <summary>
            Interpreter of a specific language to describe 
            configuration nodes in a hierachical manner.
            </summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.IConfigurationInterpreter.ProcessResource(Castle.Core.Resource.IResource,Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Should obtain the contents from the resource,
            interpret it and populate the <see cref="T:Castle.MicroKernel.IConfigurationStore"/>
            accordingly.
            </summary>
            <param name="resource"></param>
            <param name="store"></param>
        </member>
        <member name="P:Castle.Windsor.Configuration.IConfigurationInterpreter.Source">
            <summary>
            Exposes the reference to <see cref="T:Castle.Core.Resource.IResource"/>
            which the interpreter is likely to hold
            </summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.AbstractInterpreter.ProcessResource(Castle.Core.Resource.IResource,Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Should obtain the contents from the resource,
            interpret it and populate the <see cref="T:Castle.MicroKernel.IConfigurationStore"/>
            accordingly.
            </summary>
            <param name="resource"></param>
            <param name="store"></param>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlInterpreter">
            <summary>
            Reads the configuration from a XmlFile. Sample structure:
            <code>
            &lt;configuration&gt;
              &lt;facilities&gt;
                &lt;facility id="myfacility"&gt;
                
                &lt;/facility&gt;
              &lt;/facilities&gt;
              
              &lt;components&gt;
                &lt;component id="component1"&gt;
                
                &lt;/component&gt;
              &lt;/components&gt;
            &lt;/configuration&gt;
            </code>
            </summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlInterpreter.GetConfigValue(System.String)">
            <summary>
            If a config value is an empty string we return null, this is to keep
            backward compability with old code
            </summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.CascadeConfigurationStore">
            <summary>
            Enables a hierarchical configuration store. 
            </summary>
        </member>
        <member name="T:Castle.Windsor.Installer.DefaultComponentInstaller">
            <summary>
            Default <see cref="T:Castle.Windsor.IComponentsInstaller"/> implementation.
            </summary>
        </member>
        <member name="T:Castle.Windsor.IComponentsInstaller">
            <summary>
            Installs the components and facilities based on the
            information on the configuration store.
            </summary>
        </member>
        <member name="M:Castle.Windsor.IComponentsInstaller.SetUp(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Perform installation.
            </summary>
            <param name="container">Target container</param>
            <param name="store">Configuration store</param>
        </member>
        <member name="M:Castle.Windsor.Installer.DefaultComponentInstaller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Windsor.Installer.DefaultComponentInstaller"/> class.
            </summary>
        </member>
        <member name="M:Castle.Windsor.Installer.DefaultComponentInstaller.SetUp(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Perform installation.
            </summary>
            <param name="container">Target container</param>
            <param name="store">Configuration store</param>
        </member>
        <member name="M:Castle.Windsor.Proxy.AbstractProxyFactory.Create(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Object[])">
            <summary>
            Implementors must create a proxy based on 
            the information exposed by ComponentModel
            </summary>
            <param name="kernel"></param>
            <param name="model"></param>
            <param name="constructorArguments"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.Windsor.Proxy.DefaultMethodInvocation">
            <summary>
            This implementation of <see cref="T:Castle.Core.Interceptor.IMethodInvocation"/>
            holds an array of interceptors. When the Proceed method is invoked,
            it just increment the Current index and invoke the next interceptor. 
            </summary>
            <remarks>
            Although we have multithread test cases to ensure the correct 
            behavior, we might have threading synchronization issues.
            </remarks>
        </member>
        <member name="M:Castle.Windsor.Proxy.DefaultMethodInvocation.#ctor(Castle.DynamicProxy.ICallable,System.Object,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Constructs a DefaultMethodInvocation. This is invoked 
            by the DynamicProxy generated code.
            </summary>
            <param name="callable"></param>
            <param name="proxy"></param>
            <param name="method"></param>
            <param name="fieldTarget"></param>
        </member>
        <member name="T:Castle.Windsor.Proxy.DefaultProxyFactory">
            <summary>
            This implementation of <see cref="T:Castle.MicroKernel.IProxyFactory"/> relies 
            on DynamicProxy to expose proxy capabilies.
            </summary>
            <remarks>
            Note that only virtual methods can be intercepted in a 
            concrete class. However, if the component 
            was registered with a service interface, we proxy
            the interface and the methods don't need to be virtual,
            </remarks>
        </member>
        <member name="M:Castle.Windsor.Proxy.DefaultProxyFactory.#ctor">
            <summary>
            Constructs a DefaultProxyFactory
            </summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.DefaultProxyFactory.Create(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Object[])">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="model"></param>
            <param name="constructorArguments"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.Windsor.Proxy.InterceptorChain">
            <summary>
            Represents an ordered chain of <see cref="T:Castle.Core.Interceptor.IMethodInterceptor"/>
            implementations.
            </summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.InterceptorChain.#ctor(Castle.Core.Interceptor.IMethodInterceptor[])">
            <summary>
            
            </summary>
            <param name="interceptors"></param>
        </member>
        <member name="M:Castle.Windsor.Proxy.InterceptorChain.Intercept(Castle.Core.Interceptor.IMethodInvocation,System.Object[])">
            <summary>
            Executes the method Intercept on the chain.
            </summary>
            <param name="invocation"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.Proxy.InterceptorChain.Intercept(Castle.DynamicProxy.IInvocation,System.Object[])">
            <summary>
            This method will rarely be used, however, depending on which
            v-table (ie interface) is being exposed, it might be called, so we handle.
            </summary>
            <param name="invocation"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.Proxy.MessageProxyInvocation.Proceed(System.Object[])">
            <summary>
            The Proceed go on with the actual invocation.
            </summary>
            <param name="args">The arguments of the method</param>
            <returns></returns>
        </member>
        <member name="P:Castle.Windsor.Proxy.MessageProxyInvocation.Proxy">
            <summary>
            The proxy instance.
            </summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.MessageProxyInvocation.InvocationTarget">
            <summary>
            The target of this invocation, which usually is the
            instance of the class being proxy. 
            You might change the target, but be aware of the 
            implications.
            </summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.MessageProxyInvocation.Method">
            <summary>
            The Method being invoked.
            </summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.MessageProxyInvocation.MethodInvocationTarget">
            <summary>
            The Method being invoked on the target.
            </summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.ProxySmartFactory">
            <summary>
            Create proxies that best suits with the <see cref="P:Castle.Core.ComponentModel.Implementation"/>.
            </summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.ProxySmartFactory.Create(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Object[])">
            <summary>
            Creates a proxied instance of the component.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="model">The <see cref="T:Castle.Core.ComponentModel"/>.</param>
            <param name="constructorArguments">The arguments that will be passed to the constructor.</param>
            <returns>The proxied instance of the component.</returns>
            <remarks>
            If the <see cref="P:Castle.Core.ComponentModel.Implementation"/> inherits from <see cref="T:System.MarshalByRefObject"/>
            <see cref="T:Castle.Windsor.Proxy.RealProxyProxyFactory"/> will be used, otherwise the <see cref="T:Castle.Windsor.Proxy.DefaultProxyFactory"/> do the job.
            </remarks>
        </member>
        <member name="M:Castle.Windsor.Proxy.RealProxyProxyFactory.Create(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Object[])">
            <summary>
            Implementors must create a proxy based on 
            the information exposed by ComponentModel
            </summary>
            <param name="kernel"></param>
            <param name="model"></param>
            <param name="constructorArguments"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.Windsor.WindsorContainer">
            <summary>
            Implementation of <see cref="T:Castle.Windsor.IWindsorContainer"/>
            which delegates to <see cref="T:Castle.MicroKernel.IKernel"/> implementation.
            </summary>
        </member>
        <member name="T:Castle.Windsor.IWindsorContainer">
            <summary>
            The <c>IWindsorContainer</c> interface exposes all the 
            functionality the Windsor implements.
            </summary>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>
            Registers a facility within the kernel.
            </summary>
            <param name="key">The key by which the <see cref="T:Castle.MicroKernel.IFacility"/> gets indexed.</param>
            <param name="facility">The <see cref="T:Castle.MicroKernel.IFacility"/> to add to the container.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponent(System.String,System.Type)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="serviceType">The service <see cref="T:System.Type"/> that the component implements.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentWithLifestyle(System.String,System.Type,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentWithLifestyle(System.String,System.Type,System.Type,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="serviceType">The service <see cref="T:System.Type"/> that the component implements.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentWithProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>
            Adds a concrete class as a component and specify the extended properties.
            Used by facilities, mostly.
            </summary>
            <param name="key"></param>
            <param name="classType"></param>
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentWithProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>
            Adds a concrete class and an interface 
            as a component and specify the extended properties.
            Used by facilities, mostly.
            </summary>
            <param name="key"></param>
            <param name="serviceType"></param>
            <param name="classType"></param>
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.String)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.String,System.Type)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.Type)">
            <summary>
            Returns a component instance by the service
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Release(System.Object)">
            <summary>
            Releases a component instance
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>
            Registers a subcontainer. The components exposed
            by this container will be accessible from subcontainers.
            </summary>
            <param name="childContainer"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.RemoveChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>
            Remove a child container
            </summary>
            <param name="childContainer"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve``1">
            <summary>
            Returns a component instance by the service
            </summary>
            <typeparam name="T">Service type</typeparam>
            <returns>The component instance</returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve``1(System.String)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key">Component's key</param>
            <typeparam name="T">Service type</typeparam>
            <returns>The Component instance</returns>
        </member>
        <member name="P:Castle.Windsor.IWindsorContainer.Item(System.String)">
            <summary>
            Shortcut to the method <see cref="M:Castle.Windsor.IWindsorContainer.Resolve(System.String)"/>
            </summary>
        </member>
        <member name="P:Castle.Windsor.IWindsorContainer.Item(System.Type)">
            <summary>
            Shortcut to the method <see cref="M:Castle.Windsor.IWindsorContainer.Resolve(System.Type)"/>
            </summary>
        </member>
        <member name="P:Castle.Windsor.IWindsorContainer.Kernel">
            <summary>
            Returns the inner instance of the MicroKernel
            </summary>
        </member>
        <member name="P:Castle.Windsor.IWindsorContainer.Parent">
            <summary>
            Gets or sets the parent container if this instance
            is a sub container.
            </summary>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor">
            <summary>
            Constructs a container without any external 
            configuration reference
            </summary>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Constructs a container using the specified 
            <see cref="T:Castle.MicroKernel.IConfigurationStore"/> implementation.
            </summary>
            <param name="store">The instance of an <see cref="T:Castle.MicroKernel.IConfigurationStore"/> implementation.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>
            Constructs a container using the specified 
            <see cref="T:Castle.Windsor.Configuration.IConfigurationInterpreter"/> implementation.
            </summary>
            <param name="interpreter">The instance of an <see cref="T:Castle.Windsor.Configuration.IConfigurationInterpreter"/> implementation.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(Castle.MicroKernel.IKernel,Castle.Windsor.IComponentsInstaller)">
            <summary>
            Constructs a container using the specified <see cref="T:Castle.MicroKernel.IKernel"/>
            implementation. Rarely used.
            </summary>
            <remarks>
            This constructs sets the Kernel.ProxyFactory property to
            <see cref="T:Castle.Windsor.Proxy.DefaultProxyFactory"/>
            </remarks>
            <param name="kernel"></param>
            <param name="installer"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(Castle.MicroKernel.IProxyFactory)">
            <summary>
            Constructs with a given <see cref="T:Castle.MicroKernel.IProxyFactory"/>.
            </summary>
            <param name="proxyFactory">A instance of an <see cref="T:Castle.MicroKernel.IProxyFactory"/>.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(Castle.Windsor.IWindsorContainer,Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>
            Constructs a container assigning a parent container 
            before starting the dependency resolution.
            </summary>
            <param name="parent">The instance of an <see cref="T:Castle.Windsor.IWindsorContainer"/>.</param>
            <param name="interpreter">The instance of an <see cref="T:Castle.Windsor.Configuration.IConfigurationInterpreter"/> implementation.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>
            Registers a facility within the kernel.
            </summary>
            <param name="key"></param>
            <param name="facility"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponent(System.String,System.Type)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key"></param>
            <param name="classType"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key"></param>
            <param name="serviceType"></param>
            <param name="classType"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentWithLifestyle(System.String,System.Type,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentWithLifestyle(System.String,System.Type,System.Type,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="serviceType">The service <see cref="T:System.Type"/> that the component implements.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.String)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.Type)">
            <summary>
            Returns a component instance by the service
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.String,System.Type)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve``1">
            <summary>
            Returns a component instance by the service 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve``1(System.String)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Release(System.Object)">
            <summary>
            Releases a component instance
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>
            Registers a subcontainer. The components exposed
            by this container will be accessible from subcontainers.
            </summary>
            <param name="childContainer"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.RemoveChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>
            Removes (unregisters) a subcontainer.  The components exposed by this container
            will no longer be accessible to the child container.
            </summary>
            <param name="childContainer"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Dispose">
            <summary>
            Executes Dispose on underlying <see cref="T:Castle.MicroKernel.IKernel"/>
            </summary>
        </member>
        <member name="P:Castle.Windsor.WindsorContainer.Kernel">
            <summary>
            Returns the inner instance of the MicroKernel
            </summary>
        </member>
        <member name="P:Castle.Windsor.WindsorContainer.Parent">
            <summary>
            Gets or sets the parent container if this instance
            is a sub container.
            </summary>
        </member>
        <member name="P:Castle.Windsor.WindsorContainer.Item(System.String)">
            <summary>
            Shortcut to the method <see cref="M:Castle.Windsor.WindsorContainer.Resolve(System.String)"/>
            </summary>
        </member>
        <member name="P:Castle.Windsor.WindsorContainer.Item(System.Type)">
            <summary>
            Shortcut to the method <see cref="M:Castle.Windsor.WindsorContainer.Resolve(System.Type)"/>
            </summary>
        </member>
        <member name="M:Castle.Windsor.AsyncInitializationContainer.AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>
            Registers a facility within the kernel.
            </summary>
            <param name="key"></param>
            <param name="facility"></param>
        </member>
        <member name="M:Castle.Windsor.AsyncInitializationContainer.AddComponent(System.String,System.Type)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key"></param>
            <param name="classType"></param>
        </member>
        <member name="M:Castle.Windsor.AsyncInitializationContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key"></param>
            <param name="serviceType"></param>
            <param name="classType"></param>
        </member>
        <member name="M:Castle.Windsor.AsyncInitializationContainer.Resolve(System.String)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.AsyncInitializationContainer.Resolve(System.Type)">
            <summary>
            Returns a component instance by the service
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.AsyncInitializationContainer.Release(System.Object)">
            <summary>
            Releases a component instance
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Castle.Windsor.AsyncInitializationContainer.AddChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>
            Registers a subcontainer. The components exposed
            by this container will be accessible from subcontainers.
            </summary>
            <param name="childContainer"></param>
        </member>
        <member name="M:Castle.Windsor.AsyncInitializationContainer.Dispose">
            <summary>
            Executes Dispose on underlying <see cref="T:Castle.MicroKernel.IKernel"/>
            </summary>
        </member>
        <member name="P:Castle.Windsor.AsyncInitializationContainer.Kernel">
            <summary>
            Returns the inner instance of the MicroKernel
            </summary>
        </member>
        <member name="P:Castle.Windsor.AsyncInitializationContainer.Parent">
            <summary>
            Gets or sets the parent container if this instance
            is a sub container.
            </summary>
        </member>
        <member name="P:Castle.Windsor.AsyncInitializationContainer.Item(System.String)">
            <summary>
            Shortcut to the method <see cref="M:Castle.Windsor.AsyncInitializationContainer.Resolve(System.String)"/>
            </summary>
        </member>
        <member name="P:Castle.Windsor.AsyncInitializationContainer.Item(System.Type)">
            <summary>
            Shortcut to the method <see cref="M:Castle.Windsor.AsyncInitializationContainer.Resolve(System.Type)"/>
            </summary>
        </member>
    </members>
</doc>
