<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.ActiveRecord.Linq</name>
    </assembly>
    <members>
        <member name="T:Castle.ActiveRecord.Linq.ActiveRecordLinq">
            <summary>
            Class to provide a static mechanism for using active record classes in
            Linq expressions. This approach is less visually elegant than the 
            ActiveRecordLinqBase's Table property, but has the advantage of working
            on classes that are descended from ActiveRecordBase.
            </summary>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.ActiveRecordLinq.AsQueryable``1">
            <summary>
            AsQueryable enables you to use an active record class in a Linq expression even
            though the base class does not provide a static Table property.
            
            Examples include:
            var items = from f in ActiveRecordLinq.AsQueryable&lt;foo&gt;() select f;
            var item = ActiveRecordLinq.AsQueryable&lt;foo&gt;().First();
            var items = from f in ActiveRecordLinq.AsQueryable&lt;foo&gt;() where f.Name == theName select f;
            var item = ActiveRecordLinq.AsQueryable&lt;foo&gt;().First(f => f.Name == theName);
            </summary>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.ActiveRecordLinq.AsQueryable``1(NHibernate.ISession)">
            <summary>
            Extension method to ISession which creates a source for a Linq expression.
            </summary>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.ActiveRecordLinq.AsQueryable``1(Castle.ActiveRecord.ISessionScope)">
            <summary>
            Extension method to ISessionScope which creates a source for a Linq expression.
            </summary>
        </member>
        <member name="T:Castle.ActiveRecord.Linq.ActiveRecordLinqBase`1">
            <summary>
            A variation of the ActiveRecordBase class which provides the
            ability to use the record type in a linq expression.
            </summary>
            <typeparam name="T">The class which defines the active record entity.</typeparam>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.ActiveRecordLinqBase`1.Queryable">
            <summary>
            The static property Table on the active record class is used as a Linq collection
            or as the in argument in a Linq expression. 
            
            Examples include:
            var items = from f in Foo.Table select f;
            var item = Foo.Table.First();
            var items = from f in Foo.Table where f.Name == theName select f;
            var item = Foo.Table.First(f => f.Name == theName);
            </summary>
        </member>
        <member name="T:Castle.ActiveRecord.Linq.LinqQuery`1">
            <summary>
            Linq Active Record Query
            </summary>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.LinqQuery`1.#ctor(NHibernate.Linq.QueryOptions,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            
            </summary>
            <param name="options"></param>
            <param name="expression"></param>
            <param name="rootType"></param>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.LinqQuery`1.Execute(NHibernate.ISession)">
            <inheritDoc />
        </member>
        <member name="M:Castle.ActiveRecord.Linq.LinqQuery`1.Enumerate(NHibernate.ISession)">
            <inheritDoc />
        </member>
        <member name="P:Castle.ActiveRecord.Linq.LinqQuery`1.RootType">
            <inheritDoc/>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.LinqQuery`1.Result">
            <inheritDoc/>
        </member>
        <member name="T:Castle.ActiveRecord.Linq.QueryProvider`1">
            <summary>
            Default Active Record implementation of <see cref="T:NHibernate.Linq.QueryProvider"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.QueryProvider`1.#ctor(NHibernate.Linq.QueryOptions)">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.QueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <inheritDoc />
        </member>
        <member name="P:Castle.ActiveRecord.Linq.QueryProvider`1.Experimental">
            <summary>
            when set to true, enables experimental support for LINQ queries without need to use explicit session scope.
            </summary>
        </member>
        <member name="T:Castle.ActiveRecord.Linq.LinqResultWrapper`1">
            <inheritDoc/>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.LinqResultWrapper`1.#ctor(NHibernate.Linq.QueryOptions,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            
            </summary>
            <param name="options"></param>
            <param name="expression"></param>
            <param name="rootType"></param>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.LinqResultWrapper`1.GetEnumerator">
            <inheritDoc/>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.LinqResultWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritDoc/>
        </member>
    </members>
</doc>
