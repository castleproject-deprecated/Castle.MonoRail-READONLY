<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Components.Binder.Tests</name>
    </assembly>
    <members>
        <member name="M:Castle.Components.Binder.Tests.DataBinderArrayTestCase.SimpleArrayDataBind2">
            <summary>
            Binds to array with an indexed node
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.Tests.DataBinderSingleValueTestCase.DateTimeAlternativeSourceBinding">
            <summary>
            Tests dates passed as 'paramname'day, 'paramname'month, 'paramname'year
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.Tests.DataBinderSingleValueTestCase.DateTimeArrayBinding">
            <summary>
            Tests dates passed as whole values (month/day/year)
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.Tests.DataBinderSingleValueTestCase.DateTimeOffsetAlternativeSourceBinding">
            <summary>
            Tests dates passed as 'paramname'day, 'paramname'month, 'paramname'year
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.Tests.DataBinderSingleValueTestCase.DateTimeOffsetArrayBinding">
            <summary>
            Tests dates passed as whole values (month/day/year)
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.Tests.DataBinderSingleValueTestCase.EnumSourceBinding">
            <summary>
            Common Enum convertion
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.Tests.DataBinderSingleValueTestCase.EnumSourceFlagsBinding">
            <summary>
            Enum Flags convertion
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.Tests.TestUtils.ParseNameValueString(System.String)">
            <summary>
            Parse a string in this format:
            @" 
            		Person@count   = 2
            		Person[0].Name = Gi   Joe
            		Person[0].Age  = 32
            		Person[1].Name = Mary
            		Person[1].Age  = 16
            	";
            and return a NameValueCollection with these elements
            
            "Person@count"   => "2"
            "Person[0].Name" => "Gi   Joe"
            "Person[0].Age"  => "32"
            "Person[1].Name" => "Mary"
            "Person[1].Age"  => "16" 		
            </summary>
            <param name="data"></param>
            <returns></returns>
            <remarks>
            Notice that any that leading and trailing spaces are discarded
            </remarks>
        </member>
    </members>
</doc>
