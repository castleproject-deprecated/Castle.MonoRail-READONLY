<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/home/patrick/tcagent/work/e8f3fdfa368f5de3/build/mono-3.5/release/Castle.Components.Validator</name>
    </assembly>
    <members>
        <member name="T:Castle.Components.Validator.AbstractCrossReferenceValidationAttributre">
            <summary>
            The base class for all the validation attributes that reference a property or field.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractCrossReferenceValidationAttributre.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.AbstractCrossReferenceValidationAttributre" /> class.
            </summary>
            <param name="propertyToCompare">Target property to compare</param>
        </member>
        <member name="M:Castle.Components.Validator.AbstractCrossReferenceValidationAttributre.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.AbstractCrossReferenceValidationAttributre" /> class.
            </summary>
            <param name="propertyToCompare">Target property to compare</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:Castle.Components.Validator.AbstractCrossReferenceValidationAttributre.PropertyToCompare">
            <summary>
            Gets the property to compare.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractCrossReferenceValidationAttributre.ReferenceAccessor">
            <summary>
            Gets the reference accessor.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractCrossReferenceValidationAttributre.Initialize(Castle.Components.Validator.IValidatorRegistry,System.Reflection.PropertyInfo)">
            <summary>
            Implementors should perform any initialization logic
            </summary>
            <param name="validationRegistry">The validation registry.</param>
            <param name="property">The target property</param>
        </member>
        <member name="M:Castle.Components.Validator.AbstractCrossReferenceValidationAttributre.Build(Castle.Components.Validator.IValidatorRunner,System.Type)">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.RunWhen">
            <summary>
            Represents "phases" in which you can group
            different validations and run then accordingly
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RunWhen.Everytime">
            <summary>
            Run all validations
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RunWhen.Insert">
            <summary>
            Only during an insertion phase
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RunWhen.Update">
            <summary>
            Only during an update phase
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RunWhen.Custom">
            <summary>
            Defines a custom phase
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.AbstractValidationAttribute">
            <summary>
            The base class for all the validation attributes.
            This class define a <seealso cref="!:Validator" /> property that is used to retrieve the validtor that is used to
            validate the value of the property.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.AbstractValidationAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.AbstractValidationAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.RunWhen">
            <summary>
            Defines when to run the validation.
            Defaults to <c>RunWhen.Everytime</c></summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.ExecutionOrder">
            <summary>
            Gets or sets the validation execution order.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.FriendlyName">
            <summary>
            Gets or sets the a friendly name for the target property
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.ResourceType">
            <summary>
            Must be set when using FriendlyNameKey or ErrorMessageKey with default resource localization support.
            </summary>
            <value>the ressource type (generated type from .resx)</value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.FriendlyNameKey">
            <summary>
            Gets or sets the resource name of the friendly name for the target property.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.ErrorMessageKey">
            <summary>
            Gets or sets the error message resource name to use as lookup for the <see cref="P:Castle.Components.Validator.AbstractValidationAttribute.ResourceType" /> if a validation fails.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.PropertyAccessor">
            <summary>
            Gets the property accessor;
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationAttribute.Initialize(Castle.Components.Validator.IValidatorRegistry,System.Reflection.PropertyInfo)">
            <summary>
            Implementors should perform any initialization logic
            </summary>
            <param name="validationRegistry">The validation registry.</param>
            <param name="property">The target property</param>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationAttribute.Build(Castle.Components.Validator.IValidatorRunner,System.Type)">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationAttribute.ConfigureValidatorMessage(Castle.Components.Validator.IValidator)">
            <summary>
            Applies the common configuration defined on the attribute.
            </summary>
            <param name="validator">The validator instance.</param>
        </member>
        <member name="T:Castle.Components.Validator.ValidateCollectionNotEmptyAttribute">
            <summary>
            Validates that the collection is not empty
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCollectionNotEmptyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateCollectionNotEmptyAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCollectionNotEmptyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateCollectionNotEmptyAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCollectionNotEmptyAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateCreditCardAttribute">
            <summary>
            Properties decorated with this attribute will be validated to ensure that they represent a valid
            credit card number.
            <see ref="CreditCardValidator" /> for more details.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCreditCardAttribute.#ctor">
            <summary>
            Initializes a new credit card validator.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCreditCardAttribute.#ctor(System.String)">
            <summary>
            Initializes a new credit card validator.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCreditCardAttribute.#ctor(Castle.Components.Validator.CreditCardValidator.CardType)">
            <summary>
            Initializes a new credit card validator.
            </summary>
            <param name="allowedTypes">The card types to accept.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCreditCardAttribute.#ctor(Castle.Components.Validator.CreditCardValidator.CardType,System.String)">
            <summary>
            Initializes a new credit card validator.
            </summary>
            <param name="allowedTypes">The card types to accept.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCreditCardAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new credit card validator.
            </summary>
            <param name="exceptions">An array of card numbers to skip checking for (eg. gateway test numbers). Only digits should be provided for the exceptions.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCreditCardAttribute.#ctor(System.String[],System.String)">
            <summary>
            Initializes a new credit card validator.
            </summary>
            <param name="exceptions">An array of card numbers to skip checking for (eg. gateway test numbers). Only digits should be provided for the exceptions.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCreditCardAttribute.#ctor(Castle.Components.Validator.CreditCardValidator.CardType,System.String[])">
            <summary>
            Initializes a new credit card validator.
            </summary>
            <param name="allowedTypes">The card types to accept.</param>
            <param name="exceptions">An array of card numbers to skip checking for (eg. gateway test numbers). Only digits should be provided for the exceptions.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCreditCardAttribute.#ctor(Castle.Components.Validator.CreditCardValidator.CardType,System.String[],System.String)">
            <summary>
            Initializes a new credit card validator.
            </summary>
            <param name="allowedTypes">The card types to accept.</param>
            <param name="exceptions">An array of card numbers to skip checking for (eg. gateway test numbers). Only digits should be provided for the exceptions.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateCreditCardAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateDateAttribute">
            <summary>
            Validate that this date is a valid one.
            </summary>
            <remarks>
            This checks the format of the date
            </remarks>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDateAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateDateAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateDateAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDateAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateDateTimeAttribute">
            <summary>
            Validate that this date is a valid one.
            </summary>
            <remarks>
            This checks the format of the date
            </remarks>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDateTimeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateDateTimeAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDateTimeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateDateAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDateTimeAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateDecimalAttribute">
            <summary>
            Validate that this date is a valid one.
            </summary>
            <remarks>
            This checks the format of the date
            </remarks>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDecimalAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateDecimalAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDecimalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateDecimalAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDecimalAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateDoubleAttribute">
            <summary>
            Validate that this date is a valid one.
            </summary>
            <remarks>
            This checks the format of the date
            </remarks>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDoubleAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateDoubleAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDoubleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateDoubleAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateDoubleAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateEmailAttribute">
            <summary>
            Validate that this email address is a valid one.
            </summary>
            <remarks>
            This only check the format of the email, not if it really exists.
            </remarks>
        </member>
        <member name="M:Castle.Components.Validator.ValidateEmailAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateEmailAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateEmailAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateEmailAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateEmailAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateGroupNotEmptyAttribute">
            <summary>
            Validate that at least one of the properties in the group is not null or empty (for strings)
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateGroupNotEmptyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateGroupNotEmptyAttribute" /> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateGroupNotEmptyAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateGroupNotEmptyAttribute" /> class.
            </summary>
            <param name="group">The group.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateGroupNotEmptyAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidateGroupNotEmptyAttribute.Build(Castle.Components.Validator.IValidatorRunner,System.Type)">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <param name="validatorRunner">
            </param>
            <param name="type">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateGuidAttribute">
            <summary>
            Validate that this GUID is a valid one.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateGuidAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateGuidAttribute" /> class.
            </summary>
            <param name="acceptEmptyGuid">Whether or not to treat Guid.Empty as valid - true for yes</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateGuidAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateGuidAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="acceptEmptyGuid">Whether or not to treat Guid.Empty as valid - true for yes</param>
        </member>
        <member name="P:Castle.Components.Validator.ValidateGuidAttribute.AcceptEmptyGuid">
            <summary>Whether or not to treat Guid.Empty as valid - true for yes</summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateGuidAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.Attributes.ValidateIPAddressAttribute">
            <summary>
            Validate that this is a valid address.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.Attributes.ValidateIPAddressAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.Attributes.ValidateIPAddressAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.Attributes.ValidateIPAddressAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.Attributes.ValidateIPAddressAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.Attributes.ValidateIPAddressAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateIntegerAttribute">
            <summary>
            Validate that this integer is a valid one.
            It can be used to validate short (Int16), int (Int32), and long (Int64) integers.
            </summary>
            <remarks>
            This checks the format of the integer
            </remarks>
        </member>
        <member name="M:Castle.Components.Validator.ValidateIntegerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateIntegerAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateIntegerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateIntegerAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateIntegerAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateIsGreaterAttribute">
            <summary>
            Validate a field value is greater than another one.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateIsGreaterAttribute.#ctor(Castle.Components.Validator.IsGreaterValidationType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateIsGreaterAttribute" /> class.
            </summary>
            <param name="type">
            </param>
            <param name="propertyToCompare">Target property to compare</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateIsGreaterAttribute.#ctor(Castle.Components.Validator.IsGreaterValidationType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateIsGreaterAttribute" /> class.
            </summary>
            <param name="type">
                <see cref="T:Castle.Components.Validator.IsGreaterValidationType" />type</param>
            <param name="propertyToCompare">Target property to compare</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateIsGreaterAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateIsLesserAttribute">
            <summary>
            Validate a field value is greater than another one.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateIsLesserAttribute.#ctor(Castle.Components.Validator.IsLesserValidationType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateIsLesserAttribute" /> class.
            </summary>
            <param name="type">
                <see cref="T:Castle.Components.Validator.IsLesserValidationType" />The data type to compare.</param>
            <param name="propertyToCompare">Target property to compare</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateIsLesserAttribute.#ctor(Castle.Components.Validator.IsLesserValidationType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateIsLesserAttribute" /> class.
            </summary>
            <param name="type">
                <see cref="T:Castle.Components.Validator.IsLesserValidationType" />The data type to compare.</param>
            <param name="propertyToCompare">Target property to compare</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateIsLesserAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateLengthAttribute">
            <summary>
            Validate that this property has the required length (either exact or in a range)
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new exact length validator.
            </summary>
            <param name="exactLength">The exact length required.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateLengthAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new exact length validator.
            </summary>
            <param name="exactLength">The exact length required.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateLengthAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new range based length validator.
            </summary>
            <param name="minLength">The minimum length, or <c>int.MinValue</c> if this should not be tested.</param>
            <param name="maxLength">The maximum length, or <c>int.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateLengthAttribute.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new range based length validator.
            </summary>
            <param name="minLength">The minimum length, or <c>int.MinValue</c> if this should not be tested.</param>
            <param name="maxLength">The maximum length, or <c>int.MaxValue</c> if this should not be tested.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateLengthAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateNonEmptyAttribute">
            <summary>
            Validate that the property is not null or empty (for strings)
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNonEmptyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateNonEmptyAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNonEmptyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateNonEmptyAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNonEmptyAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateNotSameAsAttribute">
            <summary>
            Validates that the content has a different
            value from the property informed.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNotSameAsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateNotSameAsAttribute" /> class.
            </summary>
            <param name="propertyToCompare">The property to compare.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNotSameAsAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateNotSameAsAttribute" /> class.
            </summary>
            <param name="propertyToCompare">The property to compare.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNotSameAsAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateNotSameValueAttribute">
            <summary>
            Validates that the content has not been set to the specified value
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNotSameValueAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSameAsAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNotSameValueAttribute.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateNotSameValueAttribute" /> class.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="mustNotBeThisValue">The must not be this value.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNotSameValueAttribute.#ctor(System.Type,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSameAsAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNotSameValueAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateRangeAttribute">
            <summary>
            Validate that this property has the required length (either exact or in a range)
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an integer-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>int.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>int.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRangeAttribute.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes an integer-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>int.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>int.MaxValue</c> if this should not be tested.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRangeAttribute.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes an decimal-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>decimal.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>decimal.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRangeAttribute.#ctor(System.Decimal,System.Decimal,System.String)">
            <summary>
            Initializes an decimal-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>decimal.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>decimal.MaxValue</c> if this should not be tested.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRangeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a string-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>String.Empty</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>String.Empty</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRangeAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a string-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>String.Empty</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>String.Empty</c> if this should not be tested.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRangeAttribute.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a DateTime-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>DateTime.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>DateTime.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRangeAttribute.#ctor(System.DateTime,System.DateTime,System.String)">
            <summary>
            Initializes a DateTime-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>DateTime.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>DateTime.MaxValue</c> if this should not be tested.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRangeAttribute.#ctor(Castle.Components.Validator.RangeValidationType,System.Object,System.Object)">
            <summary>
            Initializes a range validator of a specified type.
            </summary>
            <param name="type">The data type to be used by the range validator.</param>
            <param name="min">The minimum value, or <c>DateTime.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>DateTime.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRangeAttribute.#ctor(Castle.Components.Validator.RangeValidationType,System.Object,System.Object,System.String)">
            <summary>
            Initializes a range validator of a specified type.
            </summary>
            <param name="type">The data type to be used by the range validator.</param>
            <param name="min">The minimum value, or <c>DateTime.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>DateTime.MaxValue</c> if this should not be tested.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRangeAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateRegExpAttribute">
            <summary>
            Validate that the property match the given regular expression
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRegExpAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateRegExpAttribute" /> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRegExpAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateRegExpAttribute" /> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRegExpAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateSameAsAttribute">
            <summary>
            Validates that the content has the same
            value as the property informed.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSameAsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSameAsAttribute" /> class.
            </summary>
            <param name="propertyToCompare">The property to compare.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSameAsAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSameAsAttribute" /> class.
            </summary>
            <param name="propertyToCompare">The property to compare.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSameAsAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateSelfAttribute">
            <summary>
            Marker attribute for a method that is executed by the <see cref="T:Castle.Components.Validator.SelfValidationContributor" /></summary>
        </member>
        <member name="P:Castle.Components.Validator.ValidateSelfAttribute.RunWhen">
            <summary>
            Gets or sets when this validation is run.
            </summary>
            <value>The run when.</value>
        </member>
        <member name="P:Castle.Components.Validator.ValidateSelfAttribute.ExecutionOrder">
            <summary>
            Gets or sets the execution order.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="T:Castle.Components.Validator.ValidateSetAttribute">
            <summary>
            Validate that the field has a value in a set of values.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSetAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSetAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSetAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSetAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSetAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSetAttribute" /> class.
            </summary>
            <param name="set">The set of values to compare against.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSetAttribute.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSetAttribute" /> class.
            </summary>
            <param name="set">The set of values to compare against.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSetAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSetAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
            <param name="set">The set of values to compare against.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSetAttribute.#ctor(System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSetAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
            <param name="set">The set of values to compare against.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSetAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSetAttribute" /> class.
            </summary>
            <param name="type">The <see cref="T:System.Type" /> of an <c>enum</c> class.
            The enum names will be added to the contents of the set.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSetAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSetAttribute" /> class.
            </summary>
            <param name="type">The <see cref="T:System.Type" /> of an <c>enum</c> class.
            The enum names will be added to the contents of the set.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSetAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateSingleAttribute">
            <summary>
            Validate that this date is a valid one.
            </summary>
            <remarks>
            This checks the format of the date
            </remarks>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSingleAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSingleAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSingleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSingleAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSingleAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateTimeSpanAttribute">
            <summary>
            Validate that this TimeSpan is a valid one.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateTimeSpanAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateTimeSpanAttribute" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateTimeSpanAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateTimeSpanAttribute" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateTimeSpanAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator" />
            instance based on the properties set on the attribute instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.Attributes.ValidatorContainerInterfaceFlagAttribute">
            <summary>
                <para>
            This is a flag attribute, used to mark
            validator embeding enabled interface
            </para>
                <para>
            See <see cref="T:Castle.Components.Validator.IValidatorContainerInterface" /> for further details
            </para>
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.AbstractValidationContributor">
            <summary>
            Base class for allowing custom validation of an instance beyond
            the <see cref="T:Castle.Components.Validator.IValidator">IValidator</see> instances registered for
            the object.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationContributor.IsValid(System.Object,Castle.Components.Validator.RunWhen)">
            <summary>
            Determines whether the specified instance is valid.  Returns an
            <see cref="T:Castle.Components.Validator.ErrorSummary" /> that will be appended to the existing
            error summary for an object.
            </summary>
            <param name="instance">The instance.</param>
            <param name="runWhen">The run when.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationContributor.Initialize(System.Type)">
            <summary>
            Allows for custom initialization based on type.  This will only be called once
            for each type passed to the contributor.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationContributor.IsValidInternal(System.Object,Castle.Components.Validator.RunWhen)">
            <summary>
            Determines whether the specified instance is valid.  Returns an
            <see cref="T:Castle.Components.Validator.ErrorSummary" /> that will be appended to the existing
            error summary for an object.
            </summary>
            <param name="instance">The instance.</param>
            <param name="when">The when.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.SelfValidationContributor">
            <summary>
            Allows for classes to define a custom attribute to validate themselves.  Classes can decorate
            methods like:
            [ValidateSelf]
            public void Validate(ErrorSummary errors) { ... }
            to provide custom validate logic for the class.  The method must take exactly one
            ErrorSummary parameter.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.SelfValidationContributor.SelfValidationMeta.MethodInfo">
            <summary>
            Gets the method info.
            </summary>
            <value>The method info.</value>
        </member>
        <member name="M:Castle.Components.Validator.SelfValidationContributor.Initialize(System.Type)">
            <summary>
            Allows for custom initialization based on type.  This will only be called once
            for each type passed to the contributor.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Castle.Components.Validator.SelfValidationContributor.IsValidInternal(System.Object,Castle.Components.Validator.RunWhen)">
            <summary>
            Determines whether the specified instance is valid.  Returns an
            <see cref="T:Castle.Components.Validator.ErrorSummary" /> that will be appended to the existing
            error summary for an object.
            </summary>
            <param name="instance">The instance.</param>
            <param name="runWhen">The run when.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.Contibutors.ValidatorContainerInterfaceValidationContributor">
            <summary>
            Will apply validation on members defined in derived interface IValidatorContainerInterface from the object instance
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.Contibutors.ValidatorContainerInterfaceValidationContributor.Initialize(System.Type)">
            <summary>
            Allows for custom initialization based on type.  This will only be called once
            for each type passed to the contributor.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Castle.Components.Validator.Contibutors.ValidatorContainerInterfaceValidationContributor.IsValidInternal(System.Object,Castle.Components.Validator.RunWhen)">
            <summary>
            Determines whether the specified instance is valid.  Returns an
            <see cref="T:Castle.Components.Validator.ErrorSummary" /> that will be appended to the existing
            error summary for an object.
            </summary>
            <param name="instance">The instance.</param>
            <param name="when">The when.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.AbstractCrossReferenceValidator">
            <summary>
            Abstract <see cref="T:Castle.Components.Validator.IValidator" /> implementation
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractCrossReferenceValidator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AbstractCrossReferenceValidator class.
            </summary>
            <param name="propertyToCompare">The property to compare.</param>
        </member>
        <member name="P:Castle.Components.Validator.AbstractCrossReferenceValidator.PropertyToCompare">
            <summary>
            Target Property to compare
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractCrossReferenceValidator.ReferenceAccessor">
            <summary>
            Sets the reference accessor.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractCrossReferenceValidator.GetReferenceValue(System.Object)">
            <summary>
            Obtains the value of the reference on a specific instance.
            </summary>
            <param name="instance">The instance to inspect.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.AbstractValidator">
            <summary>
            Abstract <see cref="T:Castle.Components.Validator.IValidator" /> implementation
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.ExecutionOrder">
            <summary>
            Gets or sets the validation execution order.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.RunWhen">
            <summary>
            Defines when to run the validation.
            Defaults to <c>RunWhen.Everytime</c></summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.Property">
            <summary>
            The target property
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.ErrorMessage">
            <summary>
            The error message to be displayed if the validation fails
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.FriendlyName">
            <summary>
            Gets or sets the a friendly name for the target property
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.PropertyAccessor">
            <summary>
            Sets the property accessor.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.Name">
            <summary>
            Gets the property name. The <see cref="P:Castle.Components.Validator.AbstractValidator.FriendlyName" />
            is returned if non-null, otherwise it will return the property name.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.Initialize(Castle.Components.Validator.IValidatorRegistry,System.Reflection.PropertyInfo)">
            <summary>
            Implementors should perform any initialization logic
            </summary>
            <param name="validationRegistry">
            </param>
            <param name="property">The target property</param>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.IsValid(System.Object)">
            <summary>
            Implementors should perform the actual validation upon
            the property value
            </summary>
            <param name="instance">The target type instance</param>
            <returns>
                <c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.IsValid(System.Object,System.Object)">
            <summary>
            Implementors should perform the actual validation upon
            the property value
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)</returns>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.BuildErrorMessage">
            <summary>
            Builds the error message.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.GetString(System.String)">
            <summary>
            Gets the string from resource
            </summary>
            <param name="key">The key.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.CollectionNotEmptyValidator">
            <summary>
            Validates that the content is a collection that is not empty
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.CollectionNotEmptyValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.CollectionNotEmptyValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.CollectionNotEmptyValidator.IsValid(System.Object,System.Object)">
            <summary>
            Implementors should perform the actual validation upon
            the property value
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.CreditCardValidator">
            <summary>
            This validator validate that the is a valid credit card number in:
            <list type="unordered"><item> Amex </item><item> DinersClub </item><item> Discover </item><item> Discover </item><item> enRoute </item><item> JCB </item><item> MasterCard </item><item> VISA</item></list>
            It is possible to specify more than a single card type.
            You can also specify exceptions for test cards.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.CreditCardValidator.#ctor">
            <summary>
            Initializes a new credit card validator.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.CreditCardValidator.#ctor(Castle.Components.Validator.CreditCardValidator.CardType)">
            <summary>
            Initializes a new credit card validator.
            </summary>
            <param name="allowedTypes">The card types to accept.</param>
        </member>
        <member name="M:Castle.Components.Validator.CreditCardValidator.#ctor(System.String[])">
            <summary>
            Initializes a new credit card validator.
            </summary>
            <param name="exceptions">An array of card numbers to skip checking for (eg. gateway test numbers). Only digits should be provided for the exceptions.</param>
        </member>
        <member name="M:Castle.Components.Validator.CreditCardValidator.#ctor(Castle.Components.Validator.CreditCardValidator.CardType,System.String[])">
            <summary>
            Initializes a new credit card validator.
            </summary>
            <param name="allowedTypes">The card types to accept.</param>
            <param name="exceptions">An array of card numbers to skip checking for (eg. gateway test numbers). Only digits should be provided for the exceptions.</param>
        </member>
        <member name="T:Castle.Components.Validator.CreditCardValidator.CardType">
            <summary>
            Define the known card types
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.CreditCardValidator.CardType.MasterCard">
            <summary>
            MasterCard Card
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.CreditCardValidator.CardType.VISA">
            <summary>
            VISA Card
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.CreditCardValidator.CardType.Amex">
            <summary>
            American Express Card
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.CreditCardValidator.CardType.DinersClub">
            <summary>
            Diners Club Card
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.CreditCardValidator.CardType.enRoute">
            <summary>
            enRoute Card
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.CreditCardValidator.CardType.Discover">
            <summary>
            Discover Card
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.CreditCardValidator.CardType.JCB">
            <summary>
            JCB Card
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.CreditCardValidator.CardType.Unknown">
            <summary>
            Unkown card
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.CreditCardValidator.CardType.All">
            <summary>
            All (known) cards
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.CreditCardValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.CreditCardValidator.AllowedTypes">
            <summary>
            Gets the allowed credit card types.
            </summary>
            <value>The <see cref="T:Castle.Components.Validator.CreditCardValidator.CardType" /> representing the allowed types.</value>
        </member>
        <member name="P:Castle.Components.Validator.CreditCardValidator.Exceptions">
            <summary>
            An array of card numbers to skip checking for (eg. gateway test numbers).
            </summary>
            <value>A <see cref="T:System.Array" />representing the card numbers to skip checking.</value>
        </member>
        <member name="P:Castle.Components.Validator.CreditCardValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.CreditCardValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Castle.Components.Validator.CreditCardValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validate that the propety value matches a valid (formatted) credit card
            Note: null values are consider OK always.
            </summary>
            <param name="instance">
            </param>
            <param name="fieldValue">
            </param>
            <returns>
                <c>true</c> if the field is OK</returns>
        </member>
        <member name="T:Castle.Components.Validator.DateTimeValidator">
            <summary>
            This is a meta validator.
            It is only useful to test a source content before setting it on the
            target instance.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.DateTimeValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.DateTimeValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.DateTimeValidator.IsValid(System.Object,System.Object)">
            <summary>
            Checks if the <c>fieldValue</c> can be converted to a valid DateTime.
            Null or empty value are allowed.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.DateValidator">
            <summary>
            This is a meta validator.
            It is only useful to test a source content before setting it on the
            target instance.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.DateValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.DateValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.DateValidator.IsValid(System.Object,System.Object)">
            <summary>
            Checks if the <c>fieldValue</c> can be converted to a valid Date (so no time part).
            Null and Empty value are allowed.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.DateValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Castle.Components.Validator.DateValidator.IsDateOnly(System.DateTime)">
            <summary>
            Check if only date given (so no time part)
            </summary>
            <param name="date">The date to check</param>
            <returns>
                <see langword="true" />If Date only; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Castle.Components.Validator.DecimalValidator">
            <summary>
            This is a meta validator.
            It is only useful to test a source content before setting it on the
            target instance.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.DecimalValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.DecimalValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.DecimalValidator.IsValid(System.Object,System.Object)">
            <summary>
            Checks if the <c>fieldValue</c> can be converted to a valid Decimal.
            Null or empty value are allowed.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.DecimalValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.DoubleValidator">
            <summary>
            This is a meta validator.
            It is only useful to test a source content before setting it on the
            target instance.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.DoubleValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.DoubleValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.DoubleValidator.IsValid(System.Object,System.Object)">
            <summary>
            Checks if the <c>fieldValue</c> can be converted to a valid Double.
            Null or empty value are allowed.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.DoubleValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.EmailValidator">
            <summary>
            Validate that this is a valid (formatted) email using regex
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.EmailValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.EmailValidator" /> class.
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.EmailValidator.emailRule">
            <summary>
            From http://www.codeproject.com/aspnet/Valid_Email_Addresses.asp
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.EmailValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether [supports browser validation].
            </summary>
            <value>
                <c>true</c> if [supports browser validation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.EmailValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.EmailValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.GroupNotEmptyValidator">
            <summary>
            Ensures that at least one property in the group was filled with some value
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.GroupNotEmptyValidator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.GroupNotEmptyValidator" /> class.
            </summary>
            <param name="groupName">Name of the group.</param>
        </member>
        <member name="P:Castle.Components.Validator.GroupNotEmptyValidator.Property">
            <summary>
            The target property
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.GroupNotEmptyValidator.RunWhen">
            <summary>
            Defines when to run the validation.
            Defaults to <c>RunWhen.Everytime</c></summary>
        </member>
        <member name="P:Castle.Components.Validator.GroupNotEmptyValidator.ExecutionOrder">
            <summary>
            Gets or sets the validation execution order.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="P:Castle.Components.Validator.GroupNotEmptyValidator.ErrorMessage">
            <summary>
            The error message to be displayed if the validation fails
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Castle.Components.Validator.GroupNotEmptyValidator.FriendlyName">
            <summary>
            Gets or sets the a friendly name for the target property
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.Components.Validator.GroupNotEmptyValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.GroupNotEmptyValidator.Name">
            <summary>
            Gets the property name. The <see cref="P:Castle.Components.Validator.GroupNotEmptyValidator.FriendlyName" />
            is returned if non-null, otherwise it will return the property name.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.GroupNotEmptyValidator.Initialize(Castle.Components.Validator.IValidatorRegistry,System.Reflection.PropertyInfo)">
            <summary>
            Implementors should perform any initialization logic
            </summary>
            <param name="validationRegistry">The validation registry.</param>
            <param name="property">The target property</param>
        </member>
        <member name="M:Castle.Components.Validator.GroupNotEmptyValidator.IsValid(System.Object)">
            <summary>
            Implementors should perform the actual validation upon
            the property value
            </summary>
            <param name="instance">
            </param>
            <returns>
                <c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.GroupNotEmptyValidator.IsValid(System.Object,System.Object)">
            <summary>
            Implementors should perform the actual validation upon
            the property value
            </summary>
            <param name="instance">
            </param>
            <param name="fieldValue">
            </param>
            <returns>
                <c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.GroupNotEmptyValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:Castle.Components.Validator.Validators.GuidValidator">
            <summary>
            Validate that this is a valid GUID using regex; optionally, accept/reject Guid.Empty
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.Validators.GuidValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.Validators.GuidValidator" /> class
            </summary>
            <remarks>
            Will consider Guid.Empty ('00000000-0000-0000-0000-000000000000') as valid
            </remarks>
        </member>
        <member name="M:Castle.Components.Validator.Validators.GuidValidator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.Validators.GuidValidator" /> class and specifies whether to consider Guid.Empty as valid
            </summary>
            <param name="acceptEmptyGuid">true to consider Guid.Empty as valid</param>
        </member>
        <member name="P:Castle.Components.Validator.Validators.GuidValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether [supports browser validation].
            </summary>
            <value>
                <c>true</c> if [supports browser validation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.Validators.GuidValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.Validators.GuidValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Castle.Components.Validator.Validators.GuidValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validate that the property value match the given regex.  Null or empty values are allowed.
            </summary>
            <param name="instance">
            </param>
            <param name="fieldValue">
            </param>
            <returns>
                <c>true</c> if the field is OK</returns>
        </member>
        <member name="T:Castle.Components.Validator.IPAddressValidator">
            <summary>
            Validate that this is a valid address.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IPAddressValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.IPAddressValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.IPAddressValidator.IsValid(System.Object,System.Object)">
            <summary>
            Checks if the <c>fieldValue</c> can be converted to a valid <see cref="T:System.Net.IPAddress" />.
            Null or empty value are allowed.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.IPAddressValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.IntegerValidator">
            <summary>
            This is a meta validator.
            It is only useful to test a source content before setting it on the
            target instance.
            It can validate short (Int16), int (Int32), and long (Int64).
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IntegerValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.IntegerValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.IntegerValidator.IsValid(System.Object,System.Object)">
            <summary>
            Checks if the <c>fieldValue</c> can be converted to a valid Integer.
            Null or empty value are allowed.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.IntegerValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.IsGreaterValidationType">
            <summary>
            Specifies the data type the <see cref="T:Castle.Components.Validator.IsGreaterValidator" />
            is dealing with.
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.IsGreaterValidationType.Integer">
            <summary>
            Value compare as Integer
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.IsGreaterValidationType.Decimal">
            <summary>
            Value compare as Decimal
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.IsGreaterValidationType.Date">
            <summary>
            Value compare as Date
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.IsGreaterValidationType.DateTime">
            <summary>
            Value compare as DateTime
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.IsGreaterValidator">
            <summary>
            Comparing properties value and make sure it greater than one another.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IsGreaterValidator.#ctor(Castle.Components.Validator.IsGreaterValidationType,System.String)">
            <summary>
            Initializes a IsGreaterValidator of the given type and target property.
            </summary>
            <param name="type">
            </param>
            <param name="propertyToCompare">
            </param>
        </member>
        <member name="P:Castle.Components.Validator.IsGreaterValidator.ValidationType">
            <summary>
            Gets or sets the validation type for this validator.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IsGreaterValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="P:Castle.Components.Validator.IsGreaterValidator.SupportsBrowserValidation">
            <summary>
            Browser validation support
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IsGreaterValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validate that the property value greater than the value requirements.
            </summary>
            <param name="instance">
            </param>
            <param name="fieldValue">
                <c>true</c> if the field value is greater than the target property</param>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.IsGreaterValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.IsLesserValidationType">
            <summary>
            Specifies the data type the <see cref="T:Castle.Components.Validator.IsGreaterValidator" />
            is dealing with.
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.IsLesserValidationType.Integer">
            <summary>
            Value compare as Integer
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.IsLesserValidationType.Decimal">
            <summary>
            Value compare as Decimal
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.IsLesserValidationType.Date">
            <summary>
            Value compare as Date
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.IsLesserValidationType.DateTime">
            <summary>
            Value compare as DateTime
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.IsLesserValidator">
            <summary>
            Comparing properties value and make sure it is lesser than one another.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IsLesserValidator.#ctor(Castle.Components.Validator.IsLesserValidationType,System.String)">
            <summary>
            Initializes a IsLesserValidator of the given type and target property.
            </summary>
            <param name="type">The type of data to compare.</param>
            <param name="propertyToCompare">The name of the property to compare.</param>
        </member>
        <member name="P:Castle.Components.Validator.IsLesserValidator.ValidationType">
            <summary>
            Gets or sets the validation type for this validator.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IsLesserValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="P:Castle.Components.Validator.IsLesserValidator.SupportsBrowserValidation">
            <summary>
            Browser validation support
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IsLesserValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validate that the property value greater than the value requirements.
            </summary>
            <param name="instance">
            </param>
            <param name="fieldValue">
                <c>true</c> if the field value is greater than the target property</param>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.IsLesserValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.LengthValidator">
            <summary>
            Ensures that a property's string representation
            is within the desired length limitations.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.LengthValidator.#ctor(System.Int32)">
            <summary>
            Initializes a new exact length validator.
            </summary>
            <param name="exactLength">The exact length required.</param>
        </member>
        <member name="M:Castle.Components.Validator.LengthValidator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new range based length validator.
            </summary>
            <param name="minLength">The minimum length, or <c>int.MinValue</c> if this should not be tested.</param>
            <param name="maxLength">The maximum length, or <c>int.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="P:Castle.Components.Validator.LengthValidator.ExactLength">
            <summary>
            Gets or sets the exact length to validate.
            </summary>
            <value>The exact length to validate.</value>
        </member>
        <member name="P:Castle.Components.Validator.LengthValidator.MinLength">
            <summary>
            Gets or sets the minimun length to validate.
            </summary>
            <value>The minimun length to validate.</value>
        </member>
        <member name="P:Castle.Components.Validator.LengthValidator.MaxLength">
            <summary>
            Gets or sets the maximum length to validate.
            </summary>
            <value>The maximum length to validate.</value>
        </member>
        <member name="P:Castle.Components.Validator.LengthValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:Castle.Components.Validator.LengthValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validate that the property value matches the length requirements.
            </summary>
            <param name="instance">
            </param>
            <param name="fieldValue">
            </param>
            <returns>
                <c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.LengthValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Castle.Components.Validator.LengthValidator.BuildErrorMessage">
            <summary>
            Builds the error message.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.NonEmptyValidator">
            <summary>
            Ensures that a property was
            filled with some value
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.NonEmptyValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.NonEmptyValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.NonEmptyValidator.IsValid(System.Object,System.Object)">
            <summary>
            Check that this property has a value that is not null or empty (if string)
            </summary>
            <param name="instance">
            </param>
            <param name="fieldValue">
            </param>
            <returns>
                <c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.NonEmptyValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.NotSameAsValidator">
            <summary>
            Validates that the content has a different
            value from the value of the property informed.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.NotSameAsValidator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.NotSameAsValidator" /> class.
            </summary>
            <param name="propertyToCompare">The property to compare.</param>
        </member>
        <member name="P:Castle.Components.Validator.NotSameAsValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.NotSameAsValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.NotSameAsValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validates that the <c>fieldValue</c> has a different
            value from the value of the property set through the constructor.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.NotSameAsValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.NotSameValueValidator">
            <summary>
            Validates that the content is not set to the specified value
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.NotSameValueValidator.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.SameAsValidator" /> class.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.NotSameValueValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.NotSameValueValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.NotSameValueValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validates that the <c>fieldValue</c>
            is not set to the specified value
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.NotSameValueValidator.BuildErrorMessage">
            <summary>
            Builds the error message.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.RangeValidationType">
            <summary>
            Specifies the data type the <see cref="T:Castle.Components.Validator.RangeValidator" />
            is dealing with.
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RangeValidationType.Integer">
            <summary>
                <see cref="T:Castle.Components.Validator.RangeValidator" /> is dealing with a range of integers
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RangeValidationType.Long">
            <summary>
                <see cref="T:Castle.Components.Validator.RangeValidator" /> is dealing with a range of longs
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RangeValidationType.Decimal">
            <summary>
                <see cref="T:Castle.Components.Validator.RangeValidator" /> is dealing with a range of decimals
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RangeValidationType.DateTime">
            <summary>
                <see cref="T:Castle.Components.Validator.RangeValidator" /> is dealing with a range of dates
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RangeValidationType.String">
            <summary>
                <see cref="T:Castle.Components.Validator.RangeValidator" /> is dealing with a range of strings
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.RangeValidator">
            <summary>
            Ensures that a property's string representation
            is within the desired value limitations.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an integer-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>int.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>int.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes an long-based (<see cref="T:System.Int64" />) range validator.
            </summary>
            <param name="min">The minimum value, or <c>long.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>long.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes an decimal-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>decimal.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>decimal.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a DateTime-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>DateTime.MinValue</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>DateTime.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.#ctor(System.String,System.String)">
            <summary>
            Initializes a string-based range validator.
            </summary>
            <param name="min">The minimum value, or <c>String.Empty</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>String.Empty</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.#ctor(Castle.Components.Validator.RangeValidationType,System.Object,System.Object)">
            <summary>
            Initializes a range validator of the given type with the given minimum and maximum values.
            </summary>
            <param name="type">The type of range validator.</param>
            <param name="min">The minimum value, or <c>null</c> if this should not be tested.</param>
            <param name="max">The maximum value, or <c>null</c> if this should not be tested.</param>
        </member>
        <member name="P:Castle.Components.Validator.RangeValidator.Type">
            <summary>
            Gets or sets the range validation type for this validator. If the type is changed,
            the minimum and maximum values are reset to null-equivalent values (i.e. appropriate
            minimum and maximum values for the data type).
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.RangeValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.RangeValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.GetMaxValue(System.Object)">
            <summary>
            Internal method that checks a given maximum value's data type and converts
            null values to the proper maximum value for the data type.
            </summary>
            <param name="max">The maximum value to be processed.</param>
            <returns>The maximum value with appropriate null-converted minimum values.</returns>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validate that the property value matches the value requirements.
            </summary>
            <param name="instance">
            </param>
            <param name="fieldValue">
            </param>
            <returns>
                <c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.BuildErrorMessage">
            <summary>
            Builds the error message.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.BuildIntegerErrorMessage(System.Int32,System.Int32)">
            <summary>
            Gets the error message string for Integer validation
            </summary>
            <returns>an error message</returns>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.BuildLongErrorMessage(System.Int64,System.Int64)">
            <summary>
            Gets the error message string for long validation
            </summary>
            <returns>an error message</returns>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.BuildDecimalErrorMessage(System.Decimal,System.Decimal)">
            <summary>
            Gets the error message string for Decimal validation
            </summary>
            <returns>an error message</returns>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.BuildDateTimeErrorMessage(System.DateTime,System.DateTime)">
            <summary>
            Gets the error message string for DateTime validation
            </summary>
            <returns>an error message</returns>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.BuildStringErrorMessage(System.String,System.String)">
            <summary>
            Gets the error message string for string validation
            </summary>
            <returns>an error message</returns>
        </member>
        <member name="M:Castle.Components.Validator.RangeValidator.GetMinValue(System.Object)">
            <summary>
            Internal method that checks a given minimum value's data type and converts
            null values to the proper minimum value for the data type.
            </summary>
            <param name="min">The minimum value to be processed.</param>
            <returns>The minimum value with appropriate null-converted minimum values.</returns>
        </member>
        <member name="T:Castle.Components.Validator.RegularExpressionValidator">
            <summary>
            Validate a property using regular expression
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.RegularExpressionValidator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.RegularExpressionValidator" /> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Castle.Components.Validator.RegularExpressionValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.RegularExpressionValidator" /> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="options">The regular expression options.</param>
        </member>
        <member name="P:Castle.Components.Validator.RegularExpressionValidator.RegexRule">
            <summary>
            Gets the regular expression object.
            </summary>
            <value>The regular expression object.</value>
        </member>
        <member name="P:Castle.Components.Validator.RegularExpressionValidator.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Castle.Components.Validator.RegularExpressionValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:Castle.Components.Validator.RegularExpressionValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validate that the property value match the given regex.  Null or empty values are allowed.
            </summary>
            <param name="instance">
            </param>
            <param name="fieldValue">
            </param>
            <returns>
                <c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.RegularExpressionValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.SameAsValidator">
            <summary>
            Validates that the content has the same
            value as the property informed.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.SameAsValidator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.SameAsValidator" /> class.
            </summary>
            <param name="propertyToCompare">The property to compare.</param>
        </member>
        <member name="P:Castle.Components.Validator.SameAsValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.SameAsValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.SameAsValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validates that the <c>fieldValue</c>
            is the same as the property set through the constructor.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.SameAsValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.SetValidator">
            <summary>
            Ensures that a property's string representation
            is within a given set of values.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.SetValidator.#ctor">
            <summary>
            Initializes a set-based validator with an empty set.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.SetValidator.#ctor(System.String[])">
            <summary>
            Initializes a set-based validator.
            </summary>
            <param name="set">The set of values to validate against.</param>
        </member>
        <member name="M:Castle.Components.Validator.SetValidator.#ctor(System.Int32[])">
            <summary>
            Initializes a set-based validator.
            </summary>
            <param name="set">The set of values to validate against.</param>
        </member>
        <member name="M:Castle.Components.Validator.SetValidator.#ctor(System.Type)">
            <summary>
            Initializes a set-based validator.
            </summary>
            <param name="type">The <see cref="T:System.Type" /> of an <c>enum</c> class.
            The enum names will be added to the contents of the set.</param>
        </member>
        <member name="P:Castle.Components.Validator.SetValidator.Set">
            <summary>
            Gets or sets the set of values to validate against.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.SetValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.SetValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.SetValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validate that the property value matches the set requirements.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)</returns>
        </member>
        <member name="M:Castle.Components.Validator.SetValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Castle.Components.Validator.SetValidator.BuildErrorMessage">
            <summary>
            Builds the error message.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.SingleValidator">
            <summary>
            This is a meta validator.
            It is only useful to test a source content before setting it on the
            target instance.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.SingleValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.SingleValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.SingleValidator.IsValid(System.Object,System.Object)">
            <summary>
            If the <c>fieldValue</c> is not null, an attempt to convert the
            content to a Single is performed, and the field is considered value
            if the conversion is successful.  Null and empty are allowed.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.SingleValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.TimeSpanValidator">
            <summary>
            This is a meta validator.
            It is only useful to test a source content before setting it on the
            target instance.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.TimeSpanValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.TimeSpanValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value>
            </value>
        </member>
        <member name="M:Castle.Components.Validator.TimeSpanValidator.IsValid(System.Object,System.Object)">
            <summary>
            Checks if the <c>fieldValue</c> can be converted to a valid TimeSpan.
            Null or empty value are allowed.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
                <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.TimeSpanValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.AccessorUtil">
            <summary>
            Utility for accessing parts of an instance.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AccessorUtil.GetAccessor(System.Reflection.PropertyInfo)">
            <summary>
            Gets the accessor for the property.
            </summary>
            <param name="property">The property.</param>
            <returns>The property accessor.</returns>
        </member>
        <member name="M:Castle.Components.Validator.AccessorUtil.GetAccessor(System.Type,System.String)">
            <summary>
            Gets the access to an an expression on a type.
            </summary>
            <param name="type">The target type.</param>
            <param name="path">The path expression.</param>
            <returns>The expression accessor.</returns>
        </member>
        <member name="M:Castle.Components.Validator.AccessorUtil.GetPropertyValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Obtains the value of a property on a specific instance.
            </summary>
            <param name="instance">The instance to inspect.</param>
            <param name="property">The property to inspect.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Castle.Components.Validator.AccessorUtil.GetPathValue(System.Object,System.String)">
            <summary>
            Obtains the value of a property or field expression on a specific instance.
            </summary>
            <param name="instance">The instance to inspect.</param>
            <param name="path">The path of the field or property to inspect.</param>
            <returns>The path value.</returns>
        </member>
        <member name="M:Castle.Components.Validator.AccessorUtil.GetPathValue(System.Object,System.String[])">
            <summary>
            Obtains the value of a property or field expression on a specific instance.
            </summary>
            <param name="instance">The instance to inspect.</param>
            <param name="path">The path of the field or property to inspect.</param>
            <returns>The path value.</returns>
        </member>
        <member name="T:Castle.Components.Validator.BrowserValidationConfiguration">
            <summary>
            Represents the base of a browser configuration.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.BrowserValidationConfiguration.Configure(System.Collections.IDictionary)">
            <summary>
            Configures the JS library based on the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Castle.Components.Validator.BrowserValidationConfiguration.CreateAfterFormOpened(System.String)">
            <summary>
            Implementors should return any tag/js content
            to be rendered after the form tag is rendered.
            </summary>
            <param name="formId">The form id.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.BrowserValidationConfiguration.CreateBeforeFormClosed(System.String)">
            <summary>
            Implementors should return any tag/js content
            to be rendered after the form tag is closed.
            </summary>
            <param name="formId">The form id.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.CachedValidationRegistry">
            <summary>
                <see cref="T:Castle.Components.Validator.IValidatorRegistry" /> implementation that
            caches the reflection and custom attributes calls for better performance.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.#ctor">
            <summary>
            Initializes the <see cref="T:Castle.Components.Validator.CachedValidationRegistry" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.CachedValidationRegistry" /> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.#ctor(System.Resources.ResourceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.CachedValidationRegistry" /> class.
            </summary>
            <param name="resourceManager">The resource manager.</param>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.GetValidators(Castle.Components.Validator.IValidatorRunner,System.Type,Castle.Components.Validator.RunWhen)">
            <summary>
            Gets all validators associated with a <see cref="T:System.Type" />.
            <para>
            The validators returned are initialized.
            </para></summary>
            <param name="validatorRunner">The validator runner.</param>
            <param name="targetType">Target type.</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <returns>A Validator array</returns>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.GetValidators(Castle.Components.Validator.IValidatorRunner,System.Type,System.Reflection.PropertyInfo,Castle.Components.Validator.RunWhen)">
            <summary>
            Gets all validators associated with a property.
            <para>
            The validators returned are initialized.
            </para></summary>
            <param name="validatorRunner">The validator runner.</param>
            <param name="targetType">Target type.</param>
            <param name="property">The property.</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <returns>A Validator array</returns>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.GetPropertyAccessor(System.Reflection.PropertyInfo)">
            <summary>
            Gets the property value accessor.
            </summary>
            <param name="property">The property.</param>
            <returns>The property value accessor.</returns>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.GetFieldOrPropertyAccessor(System.Type,System.String)">
            <summary>
            Gets the expression value accessor.
            </summary>
            <param name="targetType">The target type.</param>
            <param name="path">The expression path.</param>
            <returns>The expression accessor.</returns>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.GetStringFromResource(System.String)">
            <summary>
            Gets the string from resource by key
            </summary>
            <param name="key">The key.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.GetValidatorBuildersForProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets IValidatorBuilders for the specified targetType and property.
            </summary>
            <param name="property">The property.</param>
            <returns>Array of IValidatorBuilders.</returns>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.ResolveProperties(System.Type)">
            <summary>
            Resolve properties that will be inspected for registered validators
            </summary>
            <param name="targetType">the type to examinate properties for</param>
            <returns>resolved properties</returns>
        </member>
        <member name="T:Castle.Components.Validator.TypeNameComparer">
            <summary>
            Compares to objects by type name.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.TypeNameComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects by type name and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero <paramref name="x" /> is less than <paramref name="y" />. Zero <paramref name="x" /> equals <paramref name="y" />. Greater than zero <paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
            <exception cref="T:System.ArgumentException">Neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.-or- <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Castle.Components.Validator.DefaultValidationPerformer">
            <summary>
            Default validation performer implementation
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.ErrorSummary">
            <summary>
            Represents a validation report for an object instance
            which is a snapshot since the last validation check.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.ErrorSummary.HasError">
            <summary>
            Indicates whether some error was registered on this summary instance.
            </summary>
            <value>
                <c>true</c> if this instance has any error registered; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.Components.Validator.ErrorSummary.ErrorsCount">
            <summary>
            Gets the total of validation errors since the last validation check.
            <para>
            That includes all errors for all properties.
            </para></summary>
            <value>The error count.</value>
        </member>
        <member name="P:Castle.Components.Validator.ErrorSummary.InvalidPropertiesCount">
            <summary>
            Gets the total of properties that have failed validation checks.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.ErrorSummary.InvalidProperties">
            <summary>
            Gets the invalid properties' name.
            </summary>
            <value>The invalid properties.</value>
        </member>
        <member name="P:Castle.Components.Validator.ErrorSummary.ErrorMessages">
            <summary>
            Gets the error messages.
            </summary>
            <value>The error messages.</value>
        </member>
        <member name="M:Castle.Components.Validator.ErrorSummary.GetErrorsForProperty(System.String)">
            <summary>
            Gets the errors for a property.
            </summary>
            <param name="name">The property name.</param>
            <returns>Array of error messages</returns>
        </member>
        <member name="M:Castle.Components.Validator.ErrorSummary.RegisterErrorMessage(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Registers the error message per <see cref="T:System.Reflection.PropertyInfo" />.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ErrorSummary.RegisterErrorMessage(System.String,System.String)">
            <summary>
            Registers the error message per <see cref="T:System.Reflection.PropertyInfo" />.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ErrorSummary.RegisterErrorsFrom(Castle.Components.Validator.ErrorSummary)">
            <summary>
            Registers the errors from another error summary instance.
            </summary>
            <param name="errorSummary">The error summary.</param>
        </member>
        <member name="T:Castle.Components.Validator.IBrowserValidationGenerator">
            <summary>
            Abstracts a JS validation library implementation.
            Each implementation should map the calls to their
            own approach to enforce validation.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetDigitsOnly(System.String,System.String)">
            <summary>
            Set that a field should only accept digits.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetNumberOnly(System.String,System.String)">
            <summary>
            Set that a field should only accept numbers.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetAsRequired(System.String,System.String)">
            <summary>
            Sets that a field is required.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetRegExp(System.String,System.String,System.String)">
            <summary>
            Sets that a field value must match the specified regular expression.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="regExp">The reg exp.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetEmail(System.String,System.String)">
            <summary>
            Sets that a field value must be a valid email address.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetExactLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an exact lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetExactLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an exact lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="length">The length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetMinLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an minimum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetMinLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an minimum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetMaxLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an maximum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetMaxLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an maximum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="maxLength">The maximum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetLengthRange(System.String,System.Int32,System.Int32)">
            <summary>
            Sets that field must be between a length range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetLengthRange(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Sets that field must be between a length range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetValueRange(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetValueRange(System.String,System.Decimal,System.Decimal,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetValueRange(System.String,System.DateTime,System.DateTime,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetValueRange(System.String,System.String,System.String,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetAsSameAs(System.String,System.String,System.String)">
            <summary>
            Set that a field value must be the same as another field's value.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="comparisonFieldName">The name of the field to compare with.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetAsNotSameAs(System.String,System.String,System.String)">
            <summary>
            Set that a field value must _not_ be the same as another field's value.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="comparisonFieldName">The name of the field to compare with.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetDate(System.String,System.String)">
            <summary>
            Set that a field value must be a valid date.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetAsGreaterThan(System.String,System.String,Castle.Components.Validator.IsGreaterValidationType,System.String)">
            <summary>
            Sets that a field's value must be greater than another field's value.
            </summary>
            <remarks>Not implemented by the JQuery validate plugin. Done via a custom rule.</remarks>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="comparisonFieldName">The name of the field to compare with.</param>
            <param name="validationType">The type of data to compare.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetAsLesserThan(System.String,System.String,Castle.Components.Validator.IsLesserValidationType,System.String)">
            <summary>
            Sets that a field's value must be lesser than another field's value.
            </summary>
            <remarks>Not implemented by the JQuery validate plugin. Done via a custom rule.</remarks>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="comparisonFieldName">The name of the field to compare with.</param>
            <param name="validationType">The type of data to compare.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IBrowserValidationGenerator.SetAsGroupValidation(System.String,System.String,System.String)">
            <summary>
            Sets that a flied is part of a group validation.
            </summary>
            <remarks>Not implemented by the JQuery validate plugin. Done via a custom rule.</remarks>
            <param name="target">The target.</param>
            <param name="groupName">Name of the group.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="T:Castle.Components.Validator.IHasValidationPerformerDependency">
            <summary>
            For class having dependency on <see cref="T:Castle.Components.Validator.IValidationPerformer" /> instance
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IHasValidationPerformerDependency.ValidationPerformer">
            <summary>
                <see cref="T:Castle.Components.Validator.IValidationPerformer" /> instance dependency setter
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.IHasValidatorRegistryDependency">
            <summary>
            For class having dependency on <see cref="T:Castle.Components.Validator.IValidatorRegistry" /> instance
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IHasValidatorRegistryDependency.ValidatorRegistry">
            <summary>
                <see cref="T:Castle.Components.Validator.IValidatorRegistry" /> instance dependency setter
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.IHasValidatorRunnerDependency">
            <summary>
            For class having dependency on <see cref="T:Castle.Components.Validator.IValidatorRunner" /> instance
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IHasValidatorRunnerDependency.ValidatorRunner">
            <summary>
                <see cref="T:Castle.Components.Validator.IValidatorRunner" /> instance dependency setter
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.IPropertyAccessAware">
            <summary>
            Implemented by validators who want to delegate access to the property value.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IPropertyAccessAware.PropertyAccessor">
            <summary>
            Sets the property accessor.
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.IReferenceAccessAware">
            <summary>
            Implemented by validators who want to delegate comparison to a reference value.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IReferenceAccessAware.ReferenceAccessor">
            <summary>
            Sets the property accessor.
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.IValidationContributor">
            <summary>
            Provides hook for allowing custom validation of an instance beyond
            the <see cref="T:Castle.Components.Validator.IValidator">IValidator</see> instances registered for
            the object.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IValidationContributor.IsValid(System.Object,Castle.Components.Validator.RunWhen)">
            <summary>
            Determines whether the specified instance is valid.  Returns an
            <see cref="T:Castle.Components.Validator.ErrorSummary" /> that will be appended to the existing
            error summary for an object.
            </summary>
            <param name="instance">The instance.</param>
            <param name="runWhen">The run when.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.IValidationPerformer">
            <summary>
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IValidationPerformer.PerformValidation(System.Object,System.Collections.Generic.IEnumerable{Castle.Components.Validator.IValidator},System.Collections.Generic.IEnumerable{Castle.Components.Validator.IValidationContributor},Castle.Components.Validator.RunWhen,Castle.Components.Validator.ErrorSummary)">
            <summary>
            Performs validation on a given object instance
            </summary>
            <param name="objectInstance">object instance to validate</param>
            <param name="validators">validators to apply</param>
            <param name="contributors">validation contributors to apply</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <param name="summaryToPopulate">instance which will be populated by the performed validation</param>
            <returns>wether the instance is valid or not</returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidationPerformer.ExecuteContributors(System.Object,System.Collections.Generic.IEnumerable{Castle.Components.Validator.IValidationContributor},Castle.Components.Validator.ErrorSummary,Castle.Components.Validator.RunWhen)">
            <summary>
            Executes the validation contributors.
            </summary>
            <param name="objectInstance">The object instance.</param>
            <param name="contributors">contributors to apply</param>
            <param name="summaryToPopulate">The summary to populate.</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
        </member>
        <member name="T:Castle.Components.Validator.IValidator">
            <summary>
            Defines the basic contract for validators.
            <para>
            To create a new validation you should use <see cref="T:Castle.Components.Validator.AbstractValidator" /> as it
            implements most of the common methods and properties.
            </para><para>
            The validation should happen at <c>IsValid</c>, and if the validator can configure
            a client-side validation script, it should use the <see cref="P:Castle.Components.Validator.IValidator.SupportsBrowserValidation" />
            to indicate that it does support client-side validation and also implement the
            <see cref="M:Castle.Components.Validator.IValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)" /> to configure it.
            </para></summary>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.Property">
            <summary>
            The target property
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.RunWhen">
            <summary>
            Defines when to run the validation.
            Defaults to <c>RunWhen.Everytime</c></summary>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.ExecutionOrder">
            <summary>
            Gets or sets the validation execution order.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.ErrorMessage">
            <summary>
            The error message to be displayed if the validation fails
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.FriendlyName">
            <summary>
            Gets or sets the a friendly name for the target property
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.SupportsBrowserValidation">
            <summary>
            Gets a value indicating whether this validator supports browser validation.
            </summary>
            <value>
                <see langword="true" /> if browser validation is supported; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.Name">
            <summary>
            Gets the property name. The <see cref="P:Castle.Components.Validator.IValidator.FriendlyName" />
            is returned if non-null, otherwise it will return the property name.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IValidator.Initialize(Castle.Components.Validator.IValidatorRegistry,System.Reflection.PropertyInfo)">
            <summary>
            Implementors should perform any initialization logic
            </summary>
            <param name="validationRegistry">The validation registry.</param>
            <param name="property">The target property</param>
        </member>
        <member name="M:Castle.Components.Validator.IValidator.IsValid(System.Object)">
            <summary>
            Implementors should perform the actual validation upon
            the property value
            </summary>
            <param name="instance">
            </param>
            <returns>
                <c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidator.IsValid(System.Object,System.Object)">
            <summary>
            Implementors should perform the actual validation upon
            the property value
            </summary>
            <param name="instance">
            </param>
            <param name="fieldValue">
            </param>
            <returns>
                <c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>
            Applies the browser validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IBrowserValidationGenerator" />.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Castle.Components.Validator.IValidatorBuilder">
            <summary>
            Constructs an <see cref="T:Castle.Components.Validator.IValidator" /> implementation.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorBuilder.Initialize(Castle.Components.Validator.IValidatorRegistry,System.Reflection.PropertyInfo)">
            <summary>
            Implementors should perform any initialization logic
            </summary>
            <param name="validationRegistry">The validation registry.</param>
            <param name="property">The target property</param>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorBuilder.Build(Castle.Components.Validator.IValidatorRunner,System.Type)">
            <summary>
            Builds this instance.
            </summary>
            <param name="validatorRunner">The validator runner.</param>
            <param name="type">The type that this validator is built for</param>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.IValidatorContainerInterface">
            <summary>
            This is a base interface that should be implemented by
            interfaces that have members with validation attributes.
            </summary>
            <remarks>
            Note that that the interface should be explicitely flagged
            with the <see cref="T:Castle.Components.Validator.Attributes.ValidatorContainerInterfaceFlagAttribute" />
            attribute
            </remarks>
            <example>
            [ValidatorContainerInterfaceFlag]
            public interface IMyModelValidationDeclaration
            		: IValidatorContainerInterface
            {
            		[ValidateNonEmpty]
            		string MyProperty { get; }
            }
            </example>
        </member>
        <member name="T:Castle.Components.Validator.IValidatorRegistry">
            <summary>
            Abstracts a validation registry per <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorRegistry.GetValidators(Castle.Components.Validator.IValidatorRunner,System.Type,Castle.Components.Validator.RunWhen)">
            <summary>
            Gets all validators associated with a <see cref="T:System.Type" />.
            <para>
            The validators returned are initialized.
            </para></summary>
            <param name="validatorRunner">The validator runner.</param>
            <param name="targetType">Target type.</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <returns>A Validator array</returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorRegistry.GetValidators(Castle.Components.Validator.IValidatorRunner,System.Type,System.Reflection.PropertyInfo,Castle.Components.Validator.RunWhen)">
            <summary>
            Gets all validators associated with a property.
            <para>
            The validators returned are initialized.
            </para></summary>
            <param name="validatorRunner">The validator runner.</param>
            <param name="targetType">Target type.</param>
            <param name="property">The property.</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <returns>A Validator array</returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorRegistry.GetPropertyAccessor(System.Reflection.PropertyInfo)">
            <summary>
            Gets the property value accessor.
            </summary>
            <param name="property">The property.</param>
            <returns>The property value accessor.</returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorRegistry.GetFieldOrPropertyAccessor(System.Type,System.String)">
            <summary>
            Gets the expression value accessor.
            </summary>
            <param name="targetType">The target type.</param>
            <param name="path">The expression path.</param>
            <returns>The expression accessor.</returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorRegistry.GetStringFromResource(System.String)">
            <summary>
            Gets the string from resource by key
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:Castle.Components.Validator.IValidatorRunner">
            <summary>
            Defines the entry point for validation.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IValidatorRunner.ExtendedProperties">
            <summary>
            Gets the extended properties, which allows <see cref="T:Castle.Components.Validator.IValidator" />
            implementation to store additional information to track state.
            </summary>
            <value>The extended properties.</value>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorRunner.IsValid(System.Object)">
            <summary>
            Determines whether the specified instance is valid.
            <para>
            All validators are run.
            </para></summary>
            <param name="objectInstance">The object instance to be validated (cannot be null).</param>
            <returns>
                <see langword="true" /> if the specified obj is valid; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorRunner.IsValid(System.Object,Castle.Components.Validator.RunWhen)">
            <summary>
            Determines whether the specified instance is valid.
            <para>
            All validators are run for the specified <see cref="T:Castle.Components.Validator.RunWhen" /> phase.
            </para></summary>
            <param name="objectInstance">The object instance to be validated (cannot be null).</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <returns>
                <see langword="true" /> if the specified instance is valid; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorRunner.HasErrors(System.Object)">
            <summary>
            Checks whether an error summary exists for this instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
                <see langword="true" /> if and only if an error summary exists. See <see cref="M:Castle.Components.Validator.IValidatorRunner.GetErrorSummary(System.Object)" />
            for detailed conditions.
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorRunner.GetErrorSummary(System.Object)">
            <summary>
            Gets the error list per instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The error summary for the instance or <see langword="null" /> if the instance
            was either valid or has not been validated before.
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.InputElementType">
            <summary>
            Defines a html element type
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.InputElementType.Undefined">
            <summary>
            Nothing specified
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.InputElementType.Text">
            <summary>
            Text input element
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.InputElementType.Select">
            <summary>
            Select element
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.InputElementType.Radio">
            <summary>
            Radio element
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.InputElementType.Checkbox">
            <summary>
            Checkbox element
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.Messages">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.ResourceManager">
            <summary>
            Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.Culture">
            <summary>
            Overrides the current thread's CurrentUICulture property for all
            resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.collection_not_empty">
            <summary>
            Looks up a localized string similar to Collection must not be empty.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.credit_card_invalid">
            <summary>
            Looks up a localized string similar to Field value does not appear to be a valid credit card number, or is of an unsupported type..
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.date_invalid">
            <summary>
            Looks up a localized string similar to Please enter a valid date.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.decimal_invalid">
            <summary>
            Looks up a localized string similar to Please enter a valid decimal in this field.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.double_invalid">
            <summary>
            Looks up a localized string similar to Please enter a valid double in this field.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.email">
            <summary>
            Looks up a localized string similar to Please enter a valid email address. For example fred@domain.com.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.exactlength">
            <summary>
            Looks up a localized string similar to Field must be {0} characters long.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.generic_invalid">
            <summary>
            Looks up a localized string similar to Field has an invalid content.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.greater_than_invalid">
            <summary>
            Looks up a localized string similar to This field value must be greater than the other field value..
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.group_not_empty_invalid">
            <summary>
            Looks up a localized string similar to At least one of the values should not be empty.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.guid">
            <summary>
            Looks up a localized string similar to Please enter a valid GUID (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.integer_invalid">
            <summary>
            Looks up a localized string similar to Please enter a valid integer in this field.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.ipaddress">
            <summary>
            Looks up a localized string similar to Please enter a valid IP address..
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.isrequired">
            <summary>
            Looks up a localized string similar to This is a required field.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.length_invalidrange">
            <summary>
            Looks up a localized string similar to Field must be between {0} and {1} characters long.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.length_toolong">
            <summary>
            Looks up a localized string similar to Field must be less than {0} characters long.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.length_tooshort">
            <summary>
            Looks up a localized string similar to Field must be at least {0} characters long.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.lesser_than_invalid">
            <summary>
            Looks up a localized string similar to This field value must be lesser than the other field value..
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.not_same_as_invalid">
            <summary>
            Looks up a localized string similar to Fields should not match.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.not_same_value_invalid">
            <summary>
            Looks up a localized string similar to Field must not equals '{0}'.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.range_invalid">
            <summary>
            Looks up a localized string similar to Field must be between {0} and {1}.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.range_toohigh">
            <summary>
            Looks up a localized string similar to Field must be less than or equal to {0}.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.range_toohighorlow">
            <summary>
            Looks up a localized string similar to Field must be between {0} and {1}.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.range_toolow">
            <summary>
            Looks up a localized string similar to Field must be greater than or equal to {0}.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.same_as_invalid">
            <summary>
            Looks up a localized string similar to Fields do not match.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.set_invalid">
            <summary>
            Looks up a localized string similar to Field must be within a given set of values..
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.single_invalid">
            <summary>
            Looks up a localized string similar to Field value is invalid (not a valid single).
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.time_invalid">
            <summary>
            Looks up a localized string similar to Field value is invalid (not a valid time).
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.timespan">
            <summary>
            Looks up a localized string similar to Please enter a valid time-span (ddd.hh:mm:ss.xxx).
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.ValidationException">
            <summary>
            This exception is raised when a validation error occurs
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errorMessages">The error messages.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.#ctor(System.String,System.Exception,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="errorMessages">The error messages.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="P:Castle.Components.Validator.ValidationException.ValidationErrorMessages">
            <summary>
            Returns a list of current validation errors messages, if available.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Castle.Components.Validator.ValidationInternalError">
            <summary>
            Exception used when something goes wrong on
            validation internal inner workings.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidationInternalError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationInternalError" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationInternalError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationInternalError" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationInternalError.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationInternalError" /> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Castle.Components.Validator.ValidatorRunner">
            <summary>
            Coordinates the gathering and execution of validators.
            <seealso cref="T:Castle.Components.Validator.IValidatorRegistry" /></summary>
            <remarks>
            This class is not thread safe and should not be shared. It should only be
            used in small scopes and discarded.
            </remarks>
            <example>
            ValidatorRunner runner = new ValidatorRunner(new CachedValidationRegistry());
            if (!runner.IsValid(customer))
            {
            		// do something as the Customer instance is not valid
            }
            </example>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.#ctor(Castle.Components.Validator.IValidatorRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidatorRunner" /> class.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.#ctor(System.Boolean,Castle.Components.Validator.IValidatorRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidatorRunner" /> class.
            </summary>
            <param name="inferValidators">If true, the runner will try to infer the validators based on data types</param>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.#ctor(Castle.Components.Validator.IValidationContributor[],Castle.Components.Validator.IValidatorRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidatorRunner" /> class.
            </summary>
            <param name="contributors">The contributors.</param>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.#ctor(System.Boolean,Castle.Components.Validator.IValidatorRegistry,Castle.Components.Validator.IValidationContributor[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidatorRunner" /> class.
            </summary>
            <param name="inferValidators">If true, the runner will try to infer the validators based on data types</param>
            <param name="registry">The registry.</param>
            <param name="contributors">The contributors.</param>
        </member>
        <member name="T:Castle.Components.Validator.ValidatorRunner.DefaultSettings">
            <summary>
            Default settings value being used for constructor or method overloads
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.ValidatorRunner.DefaultSettings.InferValidators">
            <summary>
            Default setting is false: the validation runner will not infer validators based on data types
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.ValidatorRunner.DefaultSettings.DefaultValidationPerformer">
            <summary>
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.ValidatorRunner.DefaultSettings.DefaultContributors">
            <summary>
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.ValidatorRunner.ExtendedProperties">
            <summary>
            Gets the extended properties, which allows <see cref="T:Castle.Components.Validator.IValidator" />
            implementation to store additional information to track state.
            </summary>
            <value>The extended properties.</value>
        </member>
        <member name="P:Castle.Components.Validator.ValidatorRunner.Registry">
            <summary>
            provide read access to validator registry
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.IsValid(System.Object)">
            <summary>
            Determines whether the specified instance is valid.
            <para>
            All validators are run.
            </para></summary>
            <param name="objectInstance">The object instance to be validated (cannot be null).</param>
            <returns>
                <see langword="true" /> if the specified obj is valid; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.IsValid(System.Object,Castle.Components.Validator.RunWhen)">
            <summary>
            Determines whether the specified instance is valid.
            <para>
            All validators are run for the specified <see cref="T:Castle.Components.Validator.RunWhen" /> phase.
            </para></summary>
            <param name="objectInstance">The object instance to be validated (cannot be null).</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <returns>
                <see langword="true" /> if the specified instance is valid; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.GetValidators(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Gets the registered validators.
            </summary>
            <param name="parentType">Type of the parent.</param>
            <param name="property">The property.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.GetValidators(System.Type,System.Reflection.PropertyInfo,Castle.Components.Validator.RunWhen)">
            <summary>
            Gets the registered validators.
            </summary>
            <param name="parentType">Type of the parent.</param>
            <param name="property">The property.</param>
            <param name="runWhenPhase">The run when phase.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.HasErrors(System.Object)">
            <summary>
            Gets the error list per instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.GetErrorSummary(System.Object)">
            <summary>
            Gets the error list per instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.SetErrorSummaryForInstance(System.Object,Castle.Components.Validator.ErrorSummary)">
            <summary>
            associate error summary to the object instance
            </summary>
            <param name="objectInstance">object instance to associate validation error summary with</param>
            <param name="summary">error summary to be associated with object instance</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.SortValidators(Castle.Components.Validator.IValidator[])">
            <summary>
            Sort given validators with default algorithm
            </summary>
            <param name="validators">
            </param>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.GetValidatorsForDeclaringType(System.Type,Castle.Components.Validator.RunWhen)">
            <summary>
            </summary>
            <param name="declaringType">
            </param>
            <param name="runWhen">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Castle.Components.Validator.Accessor">
            <summary>
            Delegate to represent access to an instance.
            </summary>
            <param name="target">The target instance.</param>
            <returns>The accessed value.</returns>
        </member>
    </members>
</doc>
