<?xml version="1.0"?>
<project xmlns="http://nant.sf.net/release/0.85-rc4/nant.xsd">
	<!-- 
		Use this to determine if the key file CastleKey.snk should be used to 
		sign the assemblies. Defaults to true since private key is present
		in SVN.
	-->
	<property name="sign" value="true" overwrite="false" />
	<property name="key.file" value="${root.dir}/CastleKey.snk" />

	<!-- Controls whether tests are run. Setting this is as input to the build disables *all* tests. -->
	<property name="common.run-tests" value="true" overwrite="false" />

	<!-- Common properties that allow overrides -->
<!--	
	<if test="${not property::exists('nunit-console')}">
	<property name="nunit-console" readonly="false" value="nunit-console.exe" if="${framework::get-target-framework()=='net-1.1'}" />
	<property name="nunit-console" readonly="false" value="nunit-console-1-1.exe" if="${framework::get-target-framework()=='net-1.1'}" />
	<property name="nunit-console" readonly="false" value="nunit-console-2-0.exe" if="${framework::get-target-framework()=='net-2.0'}" />
	</if>

	<echo message="Using ${nunit-console}" />
-->

	<!-- properties used to connect to database for testing -->
	<property name="ar.dialect" value="NHibernate.Dialect.MsSql2000Dialect" overwrite="false" />
	<property name="ar.connection.driver_class" value="NHibernate.Driver.SqlClientDriver" overwrite="false" />
	<property name="ar.connection.connection_string.1" value="Server=(local);initial catalog=test;Integrated Security=SSPI" overwrite="false" />
	<property name="ar.connection.connection_string.2" value="Server=(local);initial catalog=test2;Integrated Security=SSPI" overwrite="false" />

	<!-- 
		Path to the folder that contain the external assemblies.  For net-1.1 the values will
		be lib, lib/net, and lib/net/1.1 respectively.
	-->
	<property name="lib.dir" value="SharedLibs" dynamic="true" />
	<property name="lib.family.dir" value="${path::combine(lib.dir, framework::get-family(framework::get-target-framework()))}" dynamic="true" />
	<property name="lib.framework.dir" value="${path::combine(lib.family.dir, version::to-string(framework::get-version(framework::get-target-framework())))}" dynamic="true" />

	<!-- 
		Versioning
	-->
	<property name="project.version" 	value="1.0.0.0" overwrite="false" />
	<property name="project.major" 		value="${version::get-major(version::parse(project.version))}" 		dynamic="true" />
	<property name="project.minor" 		value="${version::get-minor(version::parse(project.version))}" 		dynamic="true" />
	<property name="project.build"		value="${version::get-build(version::parse(project.version))}" 		dynamic="true" />
	<property name="project.revision"	value="${svn.revision}" 											dynamic="true" />

	<property name="assembly.major" 	value="${version::get-major(version::parse(assembly.version))}"		dynamic="true" />
	<property name="assembly.minor" 	value="${version::get-minor(version::parse(assembly.version))}" 	dynamic="true" />
	<property name="assembly.build"		value="${version::get-build(version::parse(assembly.version))}" 	dynamic="true" />
	<property name="assembly.revision"	value="${version::get-revision(version::parse(assembly.version))}"	dynamic="true" />
	
	<property name="svn.revision" value="0" overwrite="false" />

	<!-- 
		These are used to set the correct attributes in AssemblyInfo.cs.  
	-->
	<property name="project.company" value="Castle Project" />

	<!-- debug|release -->
	<property name="build.defines" value="TRACE" />
	<property name="build.defines" value="${build.defines},STRONG" if="${sign}" />

	<!-- platform specific properties. These are the defaults -->
	<property name="current.build.defines" value="${build.defines}" />

	<!-- named project configurations -->
	<target name="set-debug-project-configuration" description="Perform a 'debug' build">
		<property name="build.debug"	value="true" />
		<property name="build.optimize"	value="false" overwrite="false" />
	</target>
	
	<target name="set-release-project-configuration" description="Perform a 'release' build">
		<property name="build.debug"	value="false" />
		<property name="build.optimize" value="true" overwrite="false" />
	</target>

	<target name="set-project-configuration">
		<property name="project.config" value="debug" overwrite="false" />
		<if test="${not(target::exists('set-' + project.config + '-project-configuration'))}">
			<fail message="Unknown configuration: '${project.config}'" />
		</if>
		<call target="set-${project.config}-project-configuration" />

		<property name="src.dir" 			value="${path::get-full-path(project::get-base-directory())}" />
		<property name="build.base.dir"		value="${root.dir}/build" />
		<property name="build.family.dir"	value="${build.base.dir}/${nant.settings.currentframework}" />
		<property name="build.dir" 			value="${path::get-full-path(path::combine(build.family.dir,project.config))}" dynamic="true" />
		<property name="testresults.dir" 	value="${build.dir}/test-results" />
		<property name="releasenotes.dir"	value="${build.dir}/ReleaseNotes" />
	</target>

	<target name="set-framework-configuration">
		<if test="${not(target::exists('set-'+framework::get-target-framework()+'-framework-configuration'))}">
			<fail message="The '${framework::get-target-framework()}' framework is not supported by this version of Cast;e." />
		</if>
		<call target="set-${framework::get-target-framework()}-framework-configuration" />
		<property name="nunit-console" value="nunit-console.exe" overwrite="false" />
		<property name="wix.dir" value="C:\Program Files\WiX" overwrite="false" />
	</target>

	<target name="set-net-1.1-framework-configuration">
		<property name="nant.settings.currentframework" value="net-1.1" />
		<property name="current.build.defines" value="${build.defines},NET,DOTNET1" />
		<property name="link.sdkdoc.version" value="SDK_v1_1" />
		<property name="merge.targetplatform" value="v1.1" />
	</target>

	<target name="set-net-2.0-framework-configuration">
		<property name="nant.settings.currentframework" value="net-2.0" />
		<property name="current.build.defines" value="${build.defines},NET,DOTNET2" />
		<property name="link.sdkdoc.version" value="SDK_v2_0" />
		<property name="merge.targetplatform" value="v2" />
	</target>

	<target name="set-mono-1.0-framework-configuration">
		<property name="nant.settings.currentframework" value="mono-1.0" />
		<property name="current.build.defines" value="${build.defines},MONO,MONO1" />
		<property name="link.sdkdoc.version" value="MsdnOnline" />
	</target>

	<target name="display-current-runtime">
		<echo message="" />
		<echo message="----------------------------------------------------------" />
		<echo message=" ${framework::get-description(framework::get-target-framework())}" />
		<echo message="----------------------------------------------------------" />
		<echo message="" />
		<echo message="framework : ${framework::get-target-framework()}" />
		<echo message="description : ${framework::get-description(framework::get-target-framework())}" />
		<echo message="sdk directory : ${framework::get-sdk-directory(framework::get-target-framework())}" />
		<echo message="framework directory : ${framework::get-framework-directory(framework::get-target-framework())}" />
		<echo message="assembly directory : ${framework::get-assembly-directory(framework::get-target-framework())}" />
		<echo message="runtime engine : ${framework::get-runtime-engine(framework::get-target-framework())}" />
		<echo message="" />
	</target>

	<target name="common.init"
		depends="set-framework-configuration set-project-configuration"
		description="Initializes build properties">

		<fileset id="project.sources" failonempty="true">
			<include name="**/*.cs" />
		</fileset>
		<resourcefileset id="project.resources" />
	</target>
	
	<script language="C#" prefix="build">
		<code>
			<![CDATA[
				[Function("path-make-relative")]
				public static string PathMakeRelative(string fromPath, string toPath)
				{
					Uri uri1 = new Uri(Path.GetFullPath(fromPath));
					Uri uri2 = new Uri(Path.GetFullPath(toPath));
					return uri1.MakeRelative(uri2);
				}
				
			]]>
		</code>
	</script>
	
</project>
