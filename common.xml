<?xml version="1.0"?>
<project name="Castle" xmlns="http://nant.sf.net/release/0.85/nant.xsd">
	<!-- 
		Use this to determine if the key file CastleKey.snk should be used to 
		sign the assemblies. Defaults to true since private key is present
		in SVN.
	-->
	<property name="sign" value="true" overwrite="false" />
	<property name="key.file" value="${path::get-full-path(root.dir)}/CastleKey.snk" />

	<!-- Controls whether tests are run. Setting this is as input to the build disables *all* tests. -->
	<property name="common.run-tests" value="true" overwrite="false" />

	<!-- Check which nant version we're using - fail if it's not the minium  -->
	<property name="current.nant-version" value="${assemblyname::get-version(assembly::get-name(nant::get-assembly()))}" />
	<property name="required.nant-version" value="0.85.2478.0" /> <!-- Nant 0.85 release version -->

	<!-- properties used to connect to database for testing -->
	<property name="ar.dialect" value="NHibernate.Dialect.MsSql2000Dialect" overwrite="false" />
	<property name="ar.connection.driver_class" value="NHibernate.Driver.SqlClientDriver" overwrite="false" />
	<property name="ar.connection.connection_string.1" value="Server=(local);initial catalog=test;Integrated Security=SSPI" overwrite="false" />
	<property name="ar.connection.connection_string.2" value="Server=(local);initial catalog=test2;Integrated Security=SSPI" overwrite="false" />

	<!-- 
		Path to the folder that contain the external assemblies.  For net-1.1 the values will
		be lib, lib/net, and lib/net/1.1 respectively.
	-->
	<property name="lib.dir" value="SharedLibs" dynamic="true" />
	<property name="lib.family.dir" value="${path::combine(lib.dir, framework::get-family(framework::get-target-framework()))}" dynamic="true" />
	<property name="lib.framework.dir" value="${path::combine(lib.family.dir, version::to-string(framework::get-version(framework::get-target-framework())))}" dynamic="true" />

	<!-- 
		Versioning
	-->
	<property name="project.version" 	value="1.1.0.0" overwrite="false" />
	<property name="project.major" 		value="${version::get-major(version::parse(project.version))}" 		dynamic="true" />
	<property name="project.minor" 		value="${version::get-minor(version::parse(project.version))}" 		dynamic="true" />
	<property name="project.build"		value="${version::get-build(version::parse(project.version))}" 		dynamic="true" />
	<property name="project.revision"	value="${svn.revision}" 											dynamic="true" />

	<property name="assembly.major" 	value="${version::get-major(version::parse(assembly.version))}"		dynamic="true" />
	<property name="assembly.minor" 	value="${version::get-minor(version::parse(assembly.version))}" 	dynamic="true" />
	<property name="assembly.build"		value="${version::get-build(version::parse(assembly.version))}" 	dynamic="true" />
	<property name="assembly.revision"	value="${version::get-revision(version::parse(assembly.version))}"	dynamic="true" />
	
	<property name="svn.revision" value="0" overwrite="false" />

	<!-- 
		These are used to set the correct attributes in AssemblyInfo.cs.  
	-->
	<property name="project.company" value="Castle Project" />

	<!-- debug|release -->
	<property name="build.defines" value="TRACE" />
	<property name="build.defines" value="${build.defines},STRONG" if="${sign}" />

	<!-- platform specific properties. These are the defaults -->
	<property name="current.build.defines" value="${build.defines}" />

	<!-- named project configurations -->
	<target name="set-debug-project-configuration" description="Perform a 'debug' build">
		<property name="build.debug"	value="true" />
		<property name="build.optimize"	value="false" overwrite="false" />
	</target>
	
	<target name="set-release-project-configuration" description="Perform a 'release' build">
		<property name="build.debug"	value="false" />
		<property name="build.optimize" value="true" overwrite="false" />
	</target>

	<target name="set-project-configuration">
		<property name="project.config" value="debug" overwrite="false" />
		<if test="${not(target::exists('set-' + project.config + '-project-configuration'))}">
			<fail message="Unknown configuration: '${project.config}'" />
		</if>
		<property name="build.warnaserrors" value="true" overwrite="false" />
		<property name="build.warnmissingdocs" value="false" overwrite="false" />
		<call target="set-${project.config}-project-configuration" />

		<property name="src.dir" 			value="${path::get-full-path(project::get-base-directory())}" />
		<property name="build.base.dir"	value="${root.dir}/build" />
		<property name="build.family.dir"	value="${build.base.dir}/${nant.settings.currentframework}" />
		<property name="build.dir" 		value="${path::get-full-path(path::combine(build.family.dir,project.config))}" dynamic="true" />
		<property name="testresults.dir" 	value="${build.dir}/test-results" />
		<property name="releasenotes.dir"	value="${build.dir}/ReleaseNotes" />
		<property name="build.rebuild"		value="false" overwrite="false" />
	</target>

	<target name="set-framework-configuration">
		<if test="${not(target::exists('set-'+framework::get-target-framework()+'-framework-configuration'))}">
			<fail message="The '${framework::get-target-framework()}' framework is not supported by this version of Cast;e." />
		</if>
		<property name="csc.keyfile" 	value="" />
		<property name="csc.args" 		value="" />
		<call target="set-${framework::get-target-framework()}-framework-configuration" />

		<property name="build.msbuild" 	value="false" overwrite="false" />

		<!-- Where is MbUnit.Cons.exe ? -->
		<property name="mbunit-console" value="MbUnit.Cons.exe" overwrite="false" />

		<!-- Where is nunit-console executable(win/mono) ? -->
		<property name="nunit-console2" value="nunit-console2" overwrite="false" />
		<property name="nunit-console" value="nunit-console" overwrite="false" />

		<property name="testrunner" value="NUnit" />

		<!-- Where is WiX? -->
		<property name="wix.dir" value="%ProgramFiles%\wix" overwrite="false" />
	</target>

	<target name="set-net-1.1-framework-configuration">
		<property name="nant.settings.currentframework" value="net-1.1" />
		<property name="current.build.defines" value="${build.defines},NET,DOTNET1" />
		<property name="link.sdkdoc.version" value="SDK_v1_1" />
		<property name="merge.targetplatform" value="v1.1" />
		<!-- If DevEnvDir exists, we grab it, otherwise we try if the default location (if it exists) -->
		<if test="${environment::variable-exists('DevEnvDir')}">
			<property name="dev.env.dir" value="${environment::get-variable('DevEnvDir')}" />
		</if>
		<if test="${not environment::variable-exists('DevEnvDir')}">
			<property name="default.dev.env.dir" value="%ProgramFiles%\Microsoft Visual Studio .NET 2003\Common7\IDE" />
			<if test="${directory::exists(default.dev.env.dir)}">
				<property name="dev.env.dir" value="${default.dev.env.dir}" />
			</if>
		</if>
	</target>

	<target name="set-net-2.0-framework-configuration">
		<property name="nant.settings.currentframework" value="net-2.0" />
		<property name="current.build.defines" value="${build.defines},NET,DOTNET2" />
		<property name="link.sdkdoc.version" value="SDK_v2_0" />
		<property name="merge.targetplatform" value="v2" />
		<property name="csc.keyfile" value="/keyfile:${key.file}" />
		<!-- If DevEnvDir exists, we grab it, otherwise we try if the default location (if it exists) -->
		<if test="${environment::variable-exists('DevEnvDir')}">
			<property name="dev.env.dir" value="${environment::get-variable('DevEnvDir')}" />
		</if>
		<if test="${not environment::variable-exists('DevEnvDir')}">
			<property name="default.dev.env.dir" value="%ProgramFiles%\Microsoft Visual Studio 8\Common7\IDE" />
			<if test="${directory::exists(default.dev.env.dir)}">
				<property name="dev.env.dir" value="${default.dev.env.dir}" />
			</if>
		</if>
		<property name="build.msbuild"	value="false" overwrite="false" />
		<property name="project.vsproj" value="${project::get-name()}-vs2005.csproj" />
	</target>

	<target name="set-mono-1.0-framework-configuration">
		<property name="nant.settings.currentframework" value="mono-1.0" />
		<property name="current.build.defines" value="${build.defines},MONO,MONO1" />
		<property name="link.sdkdoc.version" value="MsdnOnline" />
		<!-- mono puts gacutil on PATH -->
		<property name="gacutil.file" value="gacutil" />
		<property name="build.warnaserrors" value="false" />
	</target>
	
	<target name="set-mono-2.0-framework-configuration">
		<property name="nant.settings.currentframework" value="mono-2.0" />
		<property name="current.build.defines" value="${build.defines},MONO,MONO2,DOTNET2" />
		<property name="link.sdkdoc.version" value="MsdnOnline" />
		<!-- mono puts gacutil on PATH -->
		<property name="gacutil.file" value="gacutil" />
		<property name="build.warnaserrors" value="false" />
	</target>

	<target name="display-current-runtime">
		<echo message="" />
		<echo message="----------------------------------------------------------" />
		<echo message=" ${framework::get-description(framework::get-target-framework())}" />
		<echo message="----------------------------------------------------------" />
		<echo message="" />
		<echo message="framework : ${framework::get-target-framework()}" />
		<echo message="description : ${framework::get-description(framework::get-target-framework())}" />
		<echo message="sdk directory : ${framework::get-sdk-directory(framework::get-target-framework())}" />
		<echo message="framework directory : ${framework::get-framework-directory(framework::get-target-framework())}" />
		<echo message="assembly directory : ${framework::get-assembly-directory(framework::get-target-framework())}" />
		<echo message="runtime engine : ${framework::get-runtime-engine(framework::get-target-framework())}" />
		<echo message="" />
	</target>

	<target name="common.init"
		depends="set-framework-configuration set-project-configuration common.check-nant-version"
		description="Initializes build properties">

		<fileset id="project.sources" failonempty="true">
			<include name="${src.dir}/**/*.cs" />
		</fileset>
		<resourcefileset id="project.resources" />
	</target>
	
	<target name="common.find-svninfo">
		<!-- For adding SVN revision to builds -->
		<property name="svn.revision" value="0" overwrite="false" />
		<!-- try to update the revision -->
		<exec
			program="svn"
			commandline='info "${project::get-base-directory()}" --xml'
			output="_revision.xml"
			failonerror="false"/>
		<xmlpeek
			file="_revision.xml"
			xpath="/info/entry/commit/@revision"
			property="svn.revision"
			failonerror="false"/>
		<delete file="_revision.xml" failonerror="false" />
		<echo message="INFO: Using Subversion revision number: ${svn.revision}"/>
	</target>

	<target name="common.find-nunit">
		<if test="${not property::exists('nunit.found')}">
			<exec 
				program="${mbunit-console}" 
				resultproperty="mbunit.found"
				failonerror="false" />

			<property name="mbunit.found" value="${mbunit.found == '0' and string::to-lower(testrunner)=='mbunit'}" readonly="true" />
			
			<property name="nunit.found" value="-1" />
			<exec
				unless="${mbunit.found}"
				program="${nunit-console2}" 
				resultproperty="nunit.found"
				failonerror="false" />

			<property name="nunit-console" value="${nunit-console2}" if="${nunit.found == '0'}" />

			<exec unless="${mbunit.found or nunit.found == '0'}"
				program="${nunit-console}" 
				resultproperty="nunit.found"
				failonerror="false" />

			<property name="nunit.found" value="${nunit.found == '0'}" readonly="true" />

			<echo message="INFO: Using MBUnit for running unit tests" if="${mbunit.found}"/>
			<echo message="INFO: Using NUnit for running unit tests" if="${nunit.found}"/>
			<echo message="WARNING: MBUnit or NUnit not found, using less predictable NAnt &lt;nunit2&gt; task" unless="${nunit.found or mbunit.found}"/>
		</if>
	</target>

	<target name="common.check-nant-version">
		<fail if="${current.nant-version&lt;required.nant-version}" message="Not using minimum required Nant version: ${required.nant-version} (current version: ${current.nant-version}). Please upgrade your copy of nant." />
	</target>

</project>
