// Copyright 2004-2007 Castle Project - http://www.castleproject.org/
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace Castle.DynamicProxy
{
	using System;
	using System.Collections;
	using System.IO;
	using System.Reflection;
	using System.Reflection.Emit;
	using System.Resources;
	using System.Threading;
	using Castle.DynamicProxy.Generators;

	/// <summary>
	/// Summary description for ModuleScope.
	/// </summary>
	[CLSCompliant(false)]
	public class ModuleScope
	{
		/// <summary>
		/// The default file name used when the assembly is saved using <see cref="DEFAULT_FILE_NAME"/>.
		/// </summary>
		public static readonly String DEFAULT_FILE_NAME = "CastleDynProxy2.dll";

		/// <summary>
		/// The default assembly (simple) name used for the assemblies generated by a <see cref="ModuleScope"/> instance.
		/// </summary>
		public static readonly String DEFAULT_ASSEMBLY_NAME = "DynamicProxyGenAssembly2";

		// Avoid leaks caused by non disposal of generated types.
		private ModuleBuilder moduleBuilderWithStrongName = null;
		private ModuleBuilder moduleBuilder = null;

		// The names to use for the generated assemblies
		private string strongAssemblyName;
		private string weakAssemblyName;

		// Keeps track of generated types
		private Hashtable typeCache = Hashtable.Synchronized(new Hashtable());

		// Users of ModuleScope should use this lock when accessing the cache
		private ReaderWriterLock readerWriterLock = new ReaderWriterLock ();

		// Used to lock the module builder creation
		private object _lockobj = new object();

		// Specified whether the generated assemblies are intended to be saved
		private bool savePhysicalAssembly;

		/// <summary>
		/// Initializes a new instance of the <see cref="ModuleScope"/> class; assemblies created by this instance will not be saved.
		/// </summary>
		public ModuleScope() : this (false)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
		/// should be saved.
		/// </summary>
		/// <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
		public ModuleScope (bool savePhysicalAssembly)
			: this (savePhysicalAssembly, DEFAULT_ASSEMBLY_NAME, DEFAULT_ASSEMBLY_NAME)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
		/// should be saved and what simple names are to be assigned to them.
		/// </summary>
		/// <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
		/// <param name="strongAssemblyName">The simple name of the strong-named assembly generated by this <see cref="ModuleScope"/>.</param>
		/// <param name="weakAssemblyName">The simple name of the weak-named assembly generated by this <see cref="ModuleScope"/>.</param>
		public ModuleScope (bool savePhysicalAssembly, string strongAssemblyName, string weakAssemblyName)
		{
			this.savePhysicalAssembly = savePhysicalAssembly;
			this.strongAssemblyName = strongAssemblyName;
			this.weakAssemblyName = weakAssemblyName;
		}

		/// <summary>
		/// Users of this <see cref="ModuleScope"/> should use this lock when accessing the cache.
		/// </summary>
		public ReaderWriterLock RWLock
		{
			get { return readerWriterLock; }
		}

		/// <summary>
		/// Returns a type from this scope's type cache, or null if the key cannot be found.
		/// </summary>
		/// <param name="key">The key to be looked up in the cache.</param>
		/// <returns>The type from this scope's type cache matching the key, or null if the key cannot be found</returns>
		public Type GetFromCache (CacheKey key)
		{
			// no lock needed, typeCache is synchronized
			return (Type) typeCache[key];
		}

		/// <summary>
		/// Registers a type in this scope's type cache.
		/// </summary>
		/// <param name="key">The key to be associated with the type.</param>
		/// <param name="type">The type to be stored in the cache.</param>
		public void RegisterInCache (CacheKey key, Type type)
		{
			// no lock needed, typeCache is synchronized
			typeCache[key] = type;
		}

		/// <summary>
		/// Gets the key pair used to sign the strong-named assembly generated by this <see cref="ModuleScope"/>.
		/// </summary>
		/// <returns></returns>
		public static byte[] GetKeyPair ()
		{
			byte[] keyPair;

			using (Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream ("Castle.DynamicProxy.DynProxy.snk"))
			{
				if (stream == null)
					throw new MissingManifestResourceException (
						"Should have a Castle.DynamicProxy.DynProxy.snk as an embedded resource, so Dynamic Proxy could sign generated assembly");

				int length = (int) stream.Length;
				keyPair = new byte[length];
				stream.Read (keyPair, 0, length);
			}

			return keyPair;
		}

		/// <summary>
		/// Gets the strong-named module generated by this scope, or <see langword="null"/> if none has yet been generated.
		/// </summary>
		/// <value>The strong-named module generated by this scope, or <see langword="null"/> if none has yet been generated.</value>
		public ModuleBuilder StrongNamedModule
		{
			get
			{
				lock (_lockobj)
				{
					return moduleBuilderWithStrongName;
				}
			}
		}

		/// <summary>
		/// Gets the weak-named module generated by this scope, or <see langword="null"/> if none has yet been generated.
		/// </summary>
		/// <value>The weak-named module generated by this scope, or <see langword="null"/> if none has yet been generated.</value>
		public ModuleBuilder WeakNamedModule
		{
			get
			{
				lock (_lockobj)
				{
					return moduleBuilder;
				}
			}
		}

		/// <summary>
		/// Gets the specified module generated by this scope, creating a new one if none has yet been generated.
		/// </summary>
		/// <param name="isStrongNamed">If set to true, a strong-named module is returned; otherwise, a weak-named module is returned.</param>
		/// <returns>A strong-named or weak-named module generated by this scope, as specified by the <paramref name="isStrongNamed"/> parameter.</returns>
		public ModuleBuilder ObtainDynamicModule (bool isStrongNamed)
		{
			lock (_lockobj)
			{
				if (isStrongNamed)
					return ObtainDynamicModuleWithStrongName ();
				else
					return ObtainDynamicModuleWithWeakName ();
			}
		}

		/// <summary>
		/// Gets the strong-named module generated by this scope, creating a new one if none has yet been generated.
		/// </summary>
		/// <returns>A strong-named module generated by this scope.</returns>
		public ModuleBuilder ObtainDynamicModuleWithStrongName()
		{
			lock (_lockobj)
			{
				if (moduleBuilderWithStrongName == null)
				{
					moduleBuilderWithStrongName = CreateModule (true);
				}
				return moduleBuilderWithStrongName;
			}
		}

		/// <summary>
		/// Gets the weak-named module generated by this scope, creating a new one if none has yet been generated.
		/// </summary>
		/// <returns>A weak-named module generated by this scope.</returns>
		public ModuleBuilder ObtainDynamicModuleWithWeakName ()
		{
			lock (_lockobj)
			{
				if (moduleBuilder == null)
				{
					moduleBuilder = CreateModule (false);
				}
				return moduleBuilder;
			}
		}

		private ModuleBuilder CreateModule(bool signStrongName)
		{
			AssemblyName assemblyName = new AssemblyName();
			assemblyName.Name = signStrongName ? strongAssemblyName : weakAssemblyName;

			if (signStrongName)
			{
				byte[] keyPairStream = GetKeyPair();

				if (keyPairStream != null)
				{
					assemblyName.KeyPair = new StrongNameKeyPair(keyPairStream);
				}
			}

			if (savePhysicalAssembly)
			{
				AssemblyBuilder assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(
					assemblyName, AssemblyBuilderAccess.RunAndSave);

				return assemblyBuilder.DefineDynamicModule(assemblyName.Name, DEFAULT_FILE_NAME, true);
			}
			else
			{
				AssemblyBuilder assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(
					assemblyName,
					AssemblyBuilderAccess.Run);

				return assemblyBuilder.DefineDynamicModule(assemblyName.Name, true);
			}
		}

		/// <summary>
		/// Saves the generated assembly at the default path.
		/// </summary>
		/// <remarks>
		/// <para>
		/// This method stores the generated assembly in the current directory with the name <see cref="DEFAULT_FILE_NAME"/>. If both a strong-named
		/// and a weak-named assembly have been generated, it will throw an exception; in this case, use the <see cref="SaveAssembly (bool, string)"/>
		/// overload.
		/// </para>
		/// <para>
		/// If this <see cref="ModuleScope"/> was created without indicating the assembly should be saved, this method does nothing.
		/// </para></remarks>
		/// <exception cref="InvalidOperationException">Both a strong-named and a weak-named assembly have been generated or no assembly has been
		/// generated.</exception>
		public void SaveAssembly ()
		{
			if (StrongNamedModule != null && WeakNamedModule != null)
					throw new InvalidOperationException ("Both a strong-named and a weak-named assembly have been generated.");
			else if (StrongNamedModule != null)
				SaveAssembly (true, DEFAULT_FILE_NAME);
			else if (WeakNamedModule != null)
				SaveAssembly (false, DEFAULT_FILE_NAME);
			else
				throw new InvalidOperationException ("No assembly has been generated.");
		}

		/// <summary>
		/// Saves the specified generated assembly at the specified path.
		/// </summary>
		/// <param name="strongNamed">True if the generated assembly with a strong name should be saved (see <see cref="StrongNamedModule"/>);
		///   false if the generated assembly without a strong name should be saved (see <see cref="WeakNamedModule"/>.</param>
		/// <param name="assemblyFileName">The path to save the assembly to.</param>
		/// <remarks>
		/// <para>
		/// If this <see cref="ModuleScope"/> was created without indicating the assembly should be saved, this method does nothing.
		/// </para>
		/// </remarks>
		/// <exception cref="InvalidOperationException">No assembly has been generated that matches the <paramref name="strongNamed"/> parameter.
		/// </exception>
		public void SaveAssembly (bool strongNamed, string assemblyFileName)
		{
			if (!savePhysicalAssembly)
				return;

			AssemblyBuilder assemblyBuilder;
			if (strongNamed)
			{
				if (StrongNamedModule == null)
					throw new InvalidOperationException ("No strong-named assembly has been generated.");
				else
					assemblyBuilder = (AssemblyBuilder) StrongNamedModule.Assembly;
			}
			else
			{
				if (WeakNamedModule == null)
					throw new InvalidOperationException ("No weak-named assembly has been generated.");
				else
					assemblyBuilder = (AssemblyBuilder) WeakNamedModule.Assembly;
			}

			if (File.Exists (assemblyFileName))
			{
				File.Delete (assemblyFileName);
			}

			assemblyBuilder.Save (assemblyFileName);
		}
	}
}