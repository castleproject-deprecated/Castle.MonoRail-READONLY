<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Npgsql</name>
    </assembly>
    <members>
        <member name="M:Npgsql.HashAlgorithm.#ctor">
            <summary>
            Called from constructor of derived class.
            </summary>
        </member>
        <member name="M:Npgsql.HashAlgorithm.Finalize">
            <summary>
            Finalizer for HashAlgorithm
            </summary>
        </member>
        <member name="M:Npgsql.HashAlgorithm.ComputeHash(System.Byte[])">
            <summary>
            Computes the entire hash of all the bytes in the byte array.
            </summary>
        </member>
        <member name="M:Npgsql.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, drives the hashing function.
            </summary>
            <param name="rgb"></param>
            <param name="start"></param>
            <param name="size"></param>
        </member>
        <member name="M:Npgsql.HashAlgorithm.HashFinal">
            <summary>
            When overridden in a derived class, this pads and hashes whatever data might be left in the buffers and then returns the hash created.
            </summary>
        </member>
        <member name="M:Npgsql.HashAlgorithm.Initialize">
            <summary>
            When overridden in a derived class, initializes the object to prepare for hashing.
            </summary>
        </member>
        <member name="M:Npgsql.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Used for stream chaining.  Computes hash as data passes through it.
            </summary>
            <param name="inputBuffer">The buffer from which to grab the data to be copied.</param>
            <param name="inputOffset">The offset into the input buffer to start reading at.</param>
            <param name="inputCount">The number of bytes to be copied.</param>
            <param name="outputBuffer">The buffer to write the copied data to.</param>
            <param name="outputOffset">At what point in the outputBuffer to write the data at.</param>
        </member>
        <member name="M:Npgsql.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Used for stream chaining.  Computes hash as data passes through it.  Finishes off the hash.
            </summary>
            <param name="inputBuffer">The buffer from which to grab the data to be copied.</param>
            <param name="inputOffset">The offset into the input buffer to start reading at.</param>
            <param name="inputCount">The number of bytes to be copied.</param>
        </member>
        <member name="P:Npgsql.HashAlgorithm.CanTransformMultipleBlocks">
            <summary>
            Get whether or not the hash can transform multiple blocks at a time.
            Note: MUST be overriden if descendant can transform multiple block
            on a single call!
            </summary>
        </member>
        <member name="P:Npgsql.HashAlgorithm.Hash">
            <summary>
            Gets the previously computed hash.
            </summary>
        </member>
        <member name="P:Npgsql.HashAlgorithm.HashSize">
            <summary>
            Returns the size in bits of the hash.
            </summary>
        </member>
        <member name="P:Npgsql.HashAlgorithm.InputBlockSize">
            <summary>
            Must be overriden if not 1
            </summary>
        </member>
        <member name="P:Npgsql.HashAlgorithm.OutputBlockSize">
            <summary>
            Must be overriden if not 1
            </summary>
        </member>
        <member name="T:Npgsql.MD5">
            <summary>
            Common base class for all derived MD5 implementations.
            </summary>
        </member>
        <member name="M:Npgsql.MD5.#ctor">
            <summary>
            Called from constructor of derived class.
            </summary>
        </member>
        <member name="M:Npgsql.MD5.Create">
            <summary>
            Creates the default derived class.
            </summary>
        </member>
        <member name="T:Npgsql.MD5CryptoServiceProvider">
            <summary>
            C# implementation of the MD5 cryptographic hash function.
            </summary>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.#ctor">
            <summary>
            Creates a new MD5CryptoServiceProvider.
            </summary>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Drives the hashing function.
            </summary>
            <param name="rgb">Byte array containing the data to hash.</param>
            <param name="start">Where in the input buffer to start.</param>
            <param name="size">Size in bytes of the data in the buffer to hash.</param>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.HashFinal">
            <summary>
            This finalizes the hash.  Takes the data from the chaining variables and returns it.
            </summary>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.Initialize">
            <summary>
            Resets the class after use.  Called automatically after hashing is done.
            </summary>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.ProcessBlock(System.Byte[],System.Int32)">
            <summary>
            This is the meat of the hash function.  It is what processes each block one at a time.
            </summary>
            <param name="inputBuffer">Byte array to process data from.</param>
            <param name="inputOffset">Where in the byte array to start processing.</param>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.ProcessFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pads and then processes the final block.
            </summary>
            <param name="inputBuffer">Buffer to grab data from.</param>
            <param name="inputOffset">Position in buffer in bytes to get data from.</param>
            <param name="inputCount">How much data in bytes in the buffer to use.</param>
        </member>
        <member name="T:Npgsql.NpgsqlAsciiRow">
            <summary>
            This class represents the AsciiRow (version 2) and DataRow (version 3+)
            message sent from the PostgreSQL server.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlRow">
            <summary>
            This is the abstract base class for NpgsqlAsciiRow and NpgsqlBinaryRow.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlRow.Item(System.Int32)">
            <summary>
            Provide access to the fields in this row.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlBackEndKeyData">
            <summary>
            This class represents a BackEndKeyData message received
            from PostgreSQL
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlBinaryRow">
            <summary>
            This class represents the BinaryRow message sent from  the PostgreSQL
            server.  This is unused as of protocol version 3.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlBind">
             <summary>
             This class represents the Bind message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlCancelRequest">
             <summary>
             This class represents the CancelRequest message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlState">
            <summary> This class represents the base class for the state pattern design pattern
             implementation.
             </summary>
            
        </member>
        <member name="M:Npgsql.NpgsqlState.ChangeState(Npgsql.NpgsqlConnector,Npgsql.NpgsqlState)">
            <summary>
            This method is used by the states to change the state of the context.
             </summary>
        </member>
        <member name="M:Npgsql.NpgsqlState.ProcessBackendResponses(Npgsql.NpgsqlConnector)">
            <summary>
             This method is responsible to handle all protocol messages sent from the backend.
             It holds all the logic to do it.
             To exchange data, it uses a Mediator object from which it reads/writes information
             to handle backend requests.
             </summary>
            
        </member>
        <member name="M:Npgsql.NpgsqlClosedState.ResolveIPHost(System.String)">
            <summary>
            Resolve a host name or IP address.
            This is needed because if you call Dns.Resolve() with an IP address, it will attempt
            to resolve it as a host name, when it should just convert it to an IP address.
            </summary>
            <param name="HostName"></param>
        </member>
        <member name="T:Npgsql.NpgsqlCommand">
            <summary>
            Represents a SQL statement or function (stored procedure) to execute
            against a PostgreSQL database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> class with the text of the query.
            </summary>
            <param name="cmdText">The text of the query.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.String,Npgsql.NpgsqlConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> class with the text of the query and a <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>.
            </summary>
            <param name="cmdText">The text of the query.</param>
            <param name="connection">A <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see> that represents the connection to a PostgreSQL server.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.String,Npgsql.NpgsqlConnection,Npgsql.NpgsqlTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> class with the text of the query, a <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>, and the <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>.
            </summary>
            <param name="cmdText">The text of the query.</param>
            <param name="connection">A <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see> that represents the connection to a PostgreSQL server.</param>
            <param name="transaction">The <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see> in which the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> executes.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.String,Npgsql.NpgsqlConnector)">
            <summary>
            Used to execute internal commands.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Cancel">
            <summary>
            Attempts to cancel the execution of a <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see>.
            </summary>
            <remarks>This Method isn't implemented yet.</remarks>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.System#ICloneable#Clone">
            <summary>
            Create a new command based on this one.
            </summary>
            <returns>A new NpgsqlCommand object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Clone">
            <summary>
            Create a new connection based on this one.
            </summary>
            <returns>A new NpgsqlConnection object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.System#Data#IDbCommand#CreateParameter">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.IDbDataParameter">IDbDataParameter</see> object.
            </summary>
            <returns>An <see cref="T:System.Data.IDbDataParameter">IDbDataParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.CreateParameter">
            <summary>
            Creates a new instance of a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against the connection and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.System#Data#IDbCommand#ExecuteReader">
            <summary>
            Sends the <see cref="P:Npgsql.NpgsqlCommand.CommandText">CommandText</see> to
            the <see cref="T:Npgsql.NpgsqlConnection">Connection</see> and builds a
            <see cref="T:Npgsql.NpgsqlDataReader">NpgsqlDataReader</see>.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlDataReader">NpgsqlDataReader</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Sends the <see cref="P:Npgsql.NpgsqlCommand.CommandText">CommandText</see> to
            the <see cref="T:Npgsql.NpgsqlConnection">Connection</see> and builds a
            <see cref="T:Npgsql.NpgsqlDataReader">NpgsqlDataReader</see>
            using one of the <see cref="T:System.Data.CommandBehavior">CommandBehavior</see> values.
            </summary>
            <param name="cb">One of the <see cref="T:System.Data.CommandBehavior">CommandBehavior</see> values.</param>
            <returns>A <see cref="T:Npgsql.NpgsqlDataReader">NpgsqlDataReader</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteReader">
            <summary>
            Sends the <see cref="P:Npgsql.NpgsqlCommand.CommandText">CommandText</see> to
            the <see cref="T:Npgsql.NpgsqlConnection">Connection</see> and builds a
            <see cref="T:Npgsql.NpgsqlDataReader">NpgsqlDataReader</see>.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlDataReader">NpgsqlDataReader</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Sends the <see cref="P:Npgsql.NpgsqlCommand.CommandText">CommandText</see> to
            the <see cref="T:Npgsql.NpgsqlConnection">Connection</see> and builds a
            <see cref="T:Npgsql.NpgsqlDataReader">NpgsqlDataReader</see>
            using one of the <see cref="T:System.Data.CommandBehavior">CommandBehavior</see> values.
            </summary>
            <param name="cb">One of the <see cref="T:System.Data.CommandBehavior">CommandBehavior</see> values.</param>
            <returns>A <see cref="T:Npgsql.NpgsqlDataReader">NpgsqlDataReader</see> object.</returns>
            <remarks>Currently the CommandBehavior parameter is ignored.</remarks>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.BindParameters">
            <summary>
             This method binds the parameters from parameters collection to the bind
             message.
             </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row
            in the result set returned by the query. Extra columns or rows are ignored.
            </summary>
            <returns>The first column of the first row in the result set,
            or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Prepare">
            <summary>
            Creates a prepared version of the command on a PostgreSQL server.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.CheckConnectionState">
            <summary>
             This method checks the connection state to see if the connection
             is set or it is open. If one of this conditions is not met, throws
             an InvalidOperationException
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.GetCommandText">
            <summary>
            This method substitutes the <see cref="P:Npgsql.NpgsqlCommand.Parameters">Parameters</see>, if exist, in the command
            to their actual values.
            The parameter name format is <b>:ParameterName</b>.
            </summary>
            <returns>A version of <see cref="P:Npgsql.NpgsqlCommand.CommandText">CommandText</see> with the <see cref="P:Npgsql.NpgsqlCommand.Parameters">Parameters</see> inserted.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ProcessRefcursorFunctionReturn(System.String)">
            <summary>
             This methods takes a string with a function call witch returns a refcursor or a set of
             refcursor. It will return the names of the open cursors/portals which will hold
             results. In turn, it returns the string which is needed to get the data of this cursors
             in form of one resultset for each cursor open. This way, clients don't need to do anything
             else besides calling function normally to get results in this way.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.CommandText">
            <summary>
            Gets or sets the SQL statement or function (stored procedure) to execute at the data source.
            </summary>
            <value>The Transact-SQL statement or stored procedure to execute. The default is an empty string.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt
            to execute a command and generating an error.
            </summary>
            <value>The time (in seconds) to wait for the command to execute.
            The default is 20 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.CommandType">
            <summary>
            Gets or sets a value indicating how the
            <see cref="P:Npgsql.NpgsqlCommand.CommandText">CommandText</see> property is to be interpreted.
            </summary>
            <value>One of the <see cref="T:System.Data.CommandType">CommandType</see> values. The default is <see cref="T:System.Data.CommandType">CommandType.Text</see>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.Connection">
            <summary>
            Gets or sets the <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>
            used by this instance of the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see>.
            </summary>
            <value>The connection to a data source. The default value is a null reference.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.Parameters">
            <summary>
            Gets the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see>.
            </summary>
            <value>The parameters of the SQL statement or function (stored procedure). The default is an empty collection.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.Transaction">
            <summary>
            Gets or sets the <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>
            within which the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> executes.
            </summary>
            <value>The <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>.
            The default value is a null reference.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow">DataRow</see>
            when used by the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)">Update</see>
            method of the <see cref="T:System.Data.Common.DbDataAdapter">DbDataAdapter</see>.
            </summary>
            <value>One of the <see cref="T:System.Data.UpdateRowSource">UpdateRowSource</see> values.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.LastInsertedOID">
            <summary>
            Returns oid of inserted row. This is only updated when using executenonQuery and when command inserts just a single row. If table is created without oids, this will always be 0.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlCommandBuilder">
            <summary>
             This class is responsible to create database commands for automatic insert, update and delete operations.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.DeriveParameters(Npgsql.NpgsqlCommand)">
            <summary>
            
             This method is reponsible to derive the command parameter list with values obtained from function definition. 
             It clears the Parameters collection of command. Also, if there is any parameter type which is not supported by Npgsql, an InvalidOperationException will be thrown.
             Parameters name will be parameter1, parameter2, ...
             For while, only parameter name and NpgsqlDbType are obtained.
            </summary>
             <param name="command">NpgsqlCommand whose function parameters will be obtained.</param>
        </member>
        <member name="T:Npgsql.NoticeEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Npgsql.NpgsqlConnection.Notification">Notice</see> events.
            </summary>
            <param name="e">A <see cref="T:Npgsql.NpgsqlNoticeEventArgs">NpgsqlNoticeEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Npgsql.NotificationEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Npgsql.NpgsqlConnection.Notification">Notification</see> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Npgsql.NpgsqlNotificationEventArgs">NpgsqlNotificationEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Npgsql.NpgsqlConnection">
            <summary>
            This class represents a connection to a
            PostgreSQL server.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see> class
            and sets the <see cref="P:Npgsql.NpgsqlConnection.ConnectionString">ConnectionString</see>.
            </summary>
            <param name="ConnectionString">The connection used to open the PostgreSQL database.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.System#Data#IDbConnection#BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
            <returns>An <see cref="T:System.Data.IDbTransaction">IDbTransaction</see>
            object representing the new transaction.</returns>
            <remarks>
            Currently there's no support for nested transactions.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified isolation level.
            </summary>
            <param name="level">The <see cref="T:System.Data.IsolationLevel">isolation level</see> under which the transaction should run.</param>
            <returns>An <see cref="T:System.Data.IDbTransaction">IDbTransaction</see>
            object representing the new transaction.</returns>
            <remarks>
            Currently the IsolationLevel ReadCommitted and Serializable are supported by the PostgreSQL backend.
            There's no support for nested transactions.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>
            object representing the new transaction.</returns>
            <remarks>
            Currently there's no support for nested transactions.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified isolation level.
            </summary>
            <param name="level">The <see cref="T:System.Data.IsolationLevel">isolation level</see> under which the transaction should run.</param>
            <returns>A <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>
            object representing the new transaction.</returns>
            <remarks>
            Currently the IsolationLevel ReadCommitted and Serializable are supported by the PostgreSQL backend.
            There's no support for nested transactions.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Open">
            <summary>
            Opens a database connection with the property settings specified by the
            <see cref="P:Npgsql.NpgsqlConnection.ConnectionString">ConnectionString</see>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.ChangeDatabase(System.String)">
            <summary>
            This method changes the current database by disconnecting from the actual
            database and connecting to the specified.
            </summary>
            <param name="dbName">The name of the database to use in place of the current database.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Close">
            <summary>
            Releases the connection to the database.  If the connection is pooled, it will be
            made available for re-use.  If it is non-pooled, the actual connection will be shutdown.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.System#Data#IDbConnection#CreateCommand">
            <summary>
            Creates and returns a <see cref="T:System.Data.IDbCommand">IDbCommand</see>
            object associated with the <see cref="T:System.Data.IDbConnection">IDbConnection</see>.
            </summary>
            <returns>A <see cref="T:System.Data.IDbCommand">IDbCommand</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.CreateCommand">
            <summary>
            Creates and returns a <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see>
            object associated with the <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the
            <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>.
            </summary>
            <param name="disposing"><b>true</b> when called from Dispose();
            <b>false</b> when being called from the finalizer.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.System#ICloneable#Clone">
            <summary>
            Create a new connection based on this one.
            </summary>
            <returns>A new NpgsqlConnection object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Clone">
            <summary>
            Create a new connection based on this one.
            </summary>
            <returns>A new NpgsqlConnection object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.DefaultCertificateSelectionCallback(System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Default SSL CertificateSelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.DefaultCertificateValidationCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32[])">
            <summary>
            Default SSL CertificateValidationCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.DefaultPrivateKeySelectionCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.String)">
            <summary>
            Default SSL PrivateKeySelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.LogConnectionString">
            <summary>
            Write each key/value pair in the connection string to the log.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Npgsql.NpgsqlConnection.GetSchema" -->
        <member name="M:Npgsql.NpgsqlConnection.GetSchema(System.String)">
            <summary>
            Returns the schema collection specified by the collection name.
            </summary>
            <param name="collectionName">The collection name.</param>
            <returns>The collection specified.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.GetSchema(System.String,System.String[])">
            <summary>
            Returns the schema collection specified by the collection name filtered by the restrictions.
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="restrictions">
            The restriction values to filter the results.  A description of the restrictions is contained
            in the Restrictions collection.
            </param>
            <returns>The collection specified.</returns>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.Notice">
            <summary>
            Occurs on NoticeResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.Notification">
            <summary>
            Occurs on NotificationResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.CertificateSelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateSelectionCallback delegate.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.CertificateValidationCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateValidationCallback delegate.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.PrivateKeySelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.PrivateKeySelectionCallback delegate.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Npgsql.NpgsqlConnection.ConnectionString" -->
        <member name="P:Npgsql.NpgsqlConnection.Host">
            <summary>
            Backend server host name.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Port">
            <summary>
            Backend server port.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.SSL">
            <summary>
            If true, the connection will attempt to use SSL.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while trying to establish a connection
            before terminating the attempt and generating an error.
            </summary>
            <value>The time (in seconds) to wait for a connection to open. The default value is 15 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ConnectionLifeTime">
            <summary>
            Gets the time to wait before closing unused connections in the pool if the count
            of all connections exeeds MinPoolSize.
            </summary>
            <remarks>
            If connection pool contains unused connections for ConnectionLifeTime seconds,
            the half of them will be closed. If there will be unused connections in a second
            later then again the half of them will be closed and so on.
            This strategy provide smooth change of connection count in the pool.
            </remarks>
            <value>The time (in seconds) to wait. The default value is 15 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Database">
            <summary>
             Gets the name of the current database or the database to be used after a connection is opened.
             </summary>
             <value>The name of the current database or the name of the database to be
             used after a connection is opened. The default value is the empty string.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.SyncNotification">
            <summary>
            Gets flag indicating if we are using Synchronous notification or not.
            The default value is false.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
            <value>A bitwise combination of the <see cref="T:System.Data.ConnectionState">ConnectionState</see> values. The default is <b>Closed</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ServerVersion">
            <summary>
            Version of the PostgreSQL backend.
            This can only be called when there is an active connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.BackendProtocolVersion">
            <summary>
            Protocol version in use.
            This can only be called when there is an active connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Connector">
            <summary>
            The connector object connected to the backend.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ConnectionStringValues">
            <summary>
            Gets the NpgsqlConnectionString containing the parsed connection string values.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Pooling">
            <summary>
            Determine if connection pooling will be used for this connection.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlConnectionString">
            <summary>
            Represents a connection string.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.Clone">
            <summary>
            Return an exact copy of this NpgsqlConnectionString.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ParseConnectionString(System.String)">
            <summary>
            This method parses a connection string and returns a new NpgsqlConnectionString object.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.Contains(System.String)">
            <summary>
            Report whether a value with the provided key name exists in this connection string.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ToString">
            <summary>
            Return a clean string representation of this connection string.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ToString(System.String)">
            <summary>
            Return a string value from the current connection string, even if the
            given key is not in the string or if the value is null.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ToString(System.String,System.String)">
            <summary>
            Return a string value from the current connection string, even if the
            given key is not in the string or if the value is null.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ToInt32(System.String)">
            <summary>
            Return an integer value from the current connection string, even if the
            given key is not in the string or if the value is null.
            Throw an appropriate exception if the value cannot be coerced to an integer.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ToInt32(System.String,System.Int32,System.Int32)">
            <summary>
            Return an integer value from the current connection string, even if the
            given key is not in the string or if the value is null.
            Throw an appropriate exception if the value cannot be coerced to an integer.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ToInt32(System.String,System.Int32)">
            <summary>
            Return an integer value from the current connection string, even if the
            given key is not in the string or if the value is null.
            Throw an appropriate exception if the value cannot be coerced to an integer.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ToInt32(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return an integer value from the current connection string, even if the
            given key is not in the string.
            Throw an appropriate exception if the value cannot be coerced to an integer.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ToBool(System.String)">
            <summary>
            Return a boolean value from the current connection string, even if the
            given key is not in the string.
            Throw an appropriate exception if the value is not recognized as a boolean.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ToBool(System.String,System.Boolean)">
            <summary>
            Return a boolean value from the current connection string, even if the
            given key is not in the string.
            Throw an appropriate exception if the value is not recognized as a boolean.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ToProtocolVersion(System.String)">
            <summary>
            Return a ProtocolVersion from the current connection string, even if the
            given key is not in the string.
            Throw an appropriate exception if the value is not recognized as
            integer 2 or 3.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionString.ToSslMode(System.String,Npgsql.SslMode)">
            <summary>
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionString.Item(System.String)">
            <summary>
            Case insensative accessor for indivual connection string values.
            </summary>
        </member>
        <member name="T:Npgsql.ConnectionStringKeys">
            <summary>
            Know connection string keys.
            </summary>
        </member>
        <member name="T:Npgsql.ConnectionStringDefaults">
            <summary>
            Connection string default values.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlConnector">
            <summary>
            !!! Helper class, for compilation only.
            Connector implements the logic for the Connection Objects to
            access the physical connection to the database, and isolate
            the application developer from connection pooling internals.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.#ctor(Npgsql.NpgsqlConnectionString,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="Shared">Controls whether the connector can be shared.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.IsValid">
            <summary>
            This method checks if the connector is still ok.
            We try to send a simple query text, select 1 as ConnectionTest;
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.ReleaseResources">
            <summary>
            This method is responsible for releasing all resources associated with this Connector.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.ReleasePlansPortals">
            <summary>
            This method is responsible to release all portals used by this Connector.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.CheckErrors">
            <summary>
            Check for mediator errors (sent by backend) and throw the appropriate
            exception if errors found.  This needs to be called after every interaction
            with the backend.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.CheckNotices">
            <summary>
            Check for notices and fire the appropiate events.
            This needs to be called after every interaction
            with the backend.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.CheckNotifications">
            <summary>
            Check for notifications and fire the appropiate events.
            This needs to be called after every interaction
            with the backend.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.CheckErrorsAndNotifications">
            <summary>
            Check for errors AND notifications in one call.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.DefaultCertificateSelectionCallback(System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Default SSL CertificateSelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.DefaultCertificateValidationCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32[])">
            <summary>
            Default SSL CertificateValidationCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.DefaultPrivateKeySelectionCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.String)">
            <summary>
            Default SSL PrivateKeySelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.ProcessServerVersion">
            <summary>
            This method is required to set all the version dependent features flags.
            SupportsPrepare means the server can use prepared query plans (7.3+)
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.Open">
            <summary>
            Opens the physical connection to the server.
            </summary>
            <remarks>Usually called by the RequestConnector
            Method of the connection pool manager.</remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.Close">
            <summary>
            Closes the physical connection to the server.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.NextPortalName">
            <summary>
             Returns next portal index.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.NextPlanName">
            <summary>
             Returns next plan index.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.Notice">
            <summary>
            Occurs on NoticeResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.Notification">
            <summary>
            Occurs on NotificationResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.CertificateSelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateSelectionCallback delegate.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.CertificateValidationCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateValidationCallback delegate.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.PrivateKeySelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.PrivateKeySelectionCallback delegate.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.ServerVersion">
            <summary>
            Version of backend server this connector is connected to.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.BackendProtocolVersion">
            <summary>
            Backend protocol version in use by this connector.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.Stream">
            <summary>
            The physical connection stream to the backend.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.Socket">
            <summary>
            The physical connection socket to the backend.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.IsInitialized">
            <summary>
            Reports if this connector is fully connected.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.Mediator">
            <summary>
            The connection mediator.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.Transaction">
            <summary>
            Report if the connection is in a transaction.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.SupportsPrepare">
            <summary>
            Report whether the current connection can support prepare functionality.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlConnectorPool">
            <summary>
            This class manages all connector objects, pooled AND non-pooled.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnectorPool.ConnectorPoolMgr">
            <value>Unique static instance of the connector pool
            mamager.</value>
        </member>
        <member name="F:Npgsql.NpgsqlConnectorPool.PooledConnectors">
            <value>Map of index to unused pooled connectors, avaliable to the
            next RequestConnector() call.</value>
            <remarks>This hashmap will be indexed by connection string.
            This key will hold a list of queues of pooled connectors available to be used.</remarks>
        </member>
        <member name="F:Npgsql.NpgsqlConnectorPool.Timer">
            <value>Timer for tracking unused connections in pools.</value>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.RequestConnector(Npgsql.NpgsqlConnection)">
            <summary>
            Searches the shared and pooled connector lists for a
            matching connector object or creates a new one.
            </summary>
            <param name="Connection">The NpgsqlConnection that is requesting
            the connector. Its ConnectionString will be used to search the
            pool for available connectors.</param>
            <returns>A connector object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.RequestPooledConnector(Npgsql.NpgsqlConnection)">
            <summary>
            Find a pooled connector.  Handle locking and timeout here.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.RequestPooledConnectorInternal(Npgsql.NpgsqlConnection)">
            <summary>
            Find a pooled connector.  Handle shared/non-shared here.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.ReleaseConnector(Npgsql.NpgsqlConnection,Npgsql.NpgsqlConnector)">
            <summary>
            Releases a connector, possibly back to the pool for future use.
            </summary>
            <remarks>
            Pooled connectors will be put back into the pool if there is room.
            Shared connectors should just have their use count decremented
            since they always stay in the shared pool.
            </remarks>
            <param name="Connector">The connector to release.</param>
            <param name="ForceClose">Force the connector to close, even if it is pooled.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.ReleasePooledConnector(Npgsql.NpgsqlConnection,Npgsql.NpgsqlConnector)">
            <summary>
            Release a pooled connector.  Handle locking here.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.ReleasePooledConnectorInternal(Npgsql.NpgsqlConnection,Npgsql.NpgsqlConnector)">
            <summary>
            Release a pooled connector.  Handle shared/non-shared here.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.GetNonPooledConnector(Npgsql.NpgsqlConnection)">
            <summary>
            Create a connector without any pooling functionality.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.GetPooledConnector(Npgsql.NpgsqlConnection)">
            <summary>
            Find an available pooled connector in the non-shared pool, or create
            a new one if none found.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.GetSharedConnector(Npgsql.NpgsqlConnection)">
            <summary>
            Find an available shared connector in the shared pool, or create
            a new one if none found.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Npgsql.NpgsqlConnectorPool.FixPoolCountBecauseOfConnectionDisposeFalse(Npgsql.NpgsqlConnection)" -->
        <member name="M:Npgsql.NpgsqlConnectorPool.UngetNonPooledConnector(Npgsql.NpgsqlConnection,Npgsql.NpgsqlConnector)">
            <summary>
            Close the connector.
            </summary>
            <param name="Connector">Connector to release</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.UngetPooledConnector(Npgsql.NpgsqlConnection,Npgsql.NpgsqlConnector)">
            <summary>
            Put a pooled connector into the pool queue.
            </summary>
            <param name="Connector">Connector to pool</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.UngetSharedConnector(Npgsql.NpgsqlConnection,Npgsql.NpgsqlConnector)">
            <summary>
            Stop sharing a shared connector.
            </summary>
            <param name="Connector">Connector to unshare</param>
        </member>
        <member name="T:Npgsql.NpgsqlConnectorPool.ConnectorQueue">
            <summary>
            A queue with an extra Int32 for keeping track of busy connections.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnectorPool.ConnectorQueue.UseCount">
            <summary>
            The number of pooled Connectors that belong to this queue but
            are currently in use.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlRowUpdatedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Npgsql.NpgsqlDataAdapter.RowUpdated">RowUpdated</see> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="!:Npgsql.NpgsqlRowUpdatedEventArgs">NpgsqlRowUpdatedEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Npgsql.NpgsqlRowUpdatingEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Npgsql.NpgsqlDataAdapter.RowUpdating">RowUpdating</see> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="!:Npgsql.NpgsqlRowUpdatingEventArgs">NpgsqlRowUpdatingEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Npgsql.NpgsqlDataAdapter">
            <summary>
            This class represents an adapter from many commands: select, update, insert and delete to fill <see cref="T:System.Data.DataSet">Datasets.</see>
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlDataReader">
            <summary>
            Provides a means of reading a forward-only stream of rows from a PostgreSQL backend.  This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.Close">
            <summary>
            Closes the data reader object.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when multiple result sets were returned by the PostgreSQL backend.
            </summary>
            <returns>True if the reader was advanced, otherwise false.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.Read">
            <summary>
            Advances the data reader to the next row.
            </summary>
            <returns>True if the reader was advanced, otherwise false.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetSchemaTable">
            <summary>
            Returns a System.Data.DataTable that describes the column metadata of the DataReader.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetName(System.Int32)">
            <summary>
            Return the column name of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDataTypeOID(System.Int32)">
            <summary>
            Return the data type OID of the column at index <param name="Index"></param>.
            </summary>
            FIXME: Why this method returns String?
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Return the data type name of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetFieldType(System.Int32)">
            <summary>
            Return the data type of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetFieldDbType(System.Int32)">
            <summary>
            Return the data DbType of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetFieldNpgsqlDbType(System.Int32)">
            <summary>
            Return the data NpgsqlDbType of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the column at index <param name="Index"></param>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetValues(System.Object[])">
            <summary>
            Copy values from each column in the current row into <param name="Values"></param>.
            </summary>
            <returns>The number of column values copied.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetOrdinal(System.String)">
            <summary>
            Return the column name of the column named <param name="Name"></param>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of a column as Boolean.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of a column as Byte.  Not implemented.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets raw data from a column.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of a column as Char.  Not implemented.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets raw data from a column.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of a column converted to a Guid.  Not implemented.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of a column as Int16.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of a column as Int32.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of a column as Int64.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of a column as Single.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of a column as Double.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of a column as String.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of a column as Decimal.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of a column as DateTime.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetData(System.Int32)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.IsDBNull(System.Int32)">
            <summary>
            Report whether the value in a column is DBNull.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetTableNameFromQuery">
            <summary>
             This methods parses the command text and tries to get the tablename
             from it.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.  Always returns zero.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.HasRows">
            <summary>
            Indicates if NpgsqlDatareader has rows to be read.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlDataReader.ReaderClosed">
            <summary>
            Is raised whenever Close() is called.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.Item(System.Int32)">
            <summary>
            Gets the value of a column in its native format.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.Item(System.String)">
            <summary>
            Gets the value of a column in its native format.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader.KeyLookup.primaryKey">
            <summary>
            Contains the column names as the keys
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader.KeyLookup.uniqueColumns">
            <summary>
            Contains all unique columns
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlDescribe">
             <summary>
             This class represents the Parse message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlNoticeEventArgs">
            <summary>
            EventArgs class to send Notice parameters, which are just NpgsqlError's in a lighter context.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlNoticeEventArgs.Notice">
            <summary>
            Notice information.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlError">
            <summary>
            This class represents the ErrorResponse and NoticeResponse
            message sent from PostgreSQL server.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlError.ToString">
            <summary>
            Return a string representation of this error object.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Severity">
            <summary>
            Severity code.  All versions.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Code">
            <summary>
            Error code.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Message">
            <summary>
            Terse error message.  All versions.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Detail">
            <summary>
            Detailed error message.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Hint">
            <summary>
            Suggestion to help resolve the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Position">
            <summary>
            Position (one based) within the query string where the error was encounterd.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Where">
            <summary>
            Trace back information.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.File">
            <summary>
            Source file (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Line">
            <summary>
            Source file line number (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Routine">
            <summary>
            Source routine (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.ErrorSql">
            <summary>
            String containing the sql sent which produced this error.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.BackendProtocolVersion">
            <summary>
            Backend protocol version in use.
            </summary>
        </member>
        <member name="T:Npgsql.LogLevel">
            <summary>
            The level of verbosity of the NpgsqlEventLog
            </summary>
        </member>
        <member name="F:Npgsql.LogLevel.None">
            <summary>
            Don't log at all
            </summary>
        </member>
        <member name="F:Npgsql.LogLevel.Normal">
            <summary>
            Only log the most common issues
            </summary>
        </member>
        <member name="F:Npgsql.LogLevel.Debug">
            <summary>
            Log everything
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlEventLog">
            <summary>
            This class handles all the Npgsql event and debug logging
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlEventLog.LogMsg(System.String,Npgsql.LogLevel)">
            <summary>
            Writes a string to the Npgsql event log if msglevel is bigger then <see cref="P:Npgsql.NpgsqlEventLog.Level">NpgsqlEventLog.Level</see>
            </summary>
            <remarks>
            This method is obsolete and should no longer be used.
            It is likely to be removed in future versions of Npgsql
            </remarks>
            <param name="message">The message to write to the event log</param>
            <param name="msglevel">The minimum <see cref="T:Npgsql.LogLevel">LogLevel</see> for which this message should be logged.</param>
        </member>
        <member name="M:Npgsql.NpgsqlEventLog.LogMsg(System.Resources.ResourceManager,System.String,Npgsql.LogLevel,System.Object[])">
            <summary>
            Writes a string to the Npgsql event log if msglevel is bigger then <see cref="P:Npgsql.NpgsqlEventLog.Level">NpgsqlEventLog.Level</see>
            </summary>
            <param name="resman">The <see cref="T:System.Resources.ResourceManager">ResourceManager</see> to get the localized resources</param>
            <param name="ResourceString">The name of the resource that should be fetched by the <see cref="T:System.Resources.ResourceManager">ResourceManager</see></param>
            <param name="msglevel">The minimum <see cref="T:Npgsql.LogLevel">LogLevel</see> for which this message should be logged.</param>
            <param name="Parameters">The additional parameters that shall be included into the log-message (must be compatible with the string in the resource):</param>
        </member>
        <member name="M:Npgsql.NpgsqlEventLog.LogIndexerGet(Npgsql.LogLevel,System.String,System.Object)">
            <summary>
            Writes the default log-message for the action of calling the Get-part of an Indexer to the log file.
            </summary>
            <param name="msglevel">The minimum <see cref="T:Npgsql.LogLevel">LogLevel</see> for which this message should be logged.</param>
            <param name="ClassName">The name of the class that contains the Indexer</param>
            <param name="IndexerParam">The parameter given to the Indexer</param>
        </member>
        <member name="M:Npgsql.NpgsqlEventLog.LogIndexerSet(Npgsql.LogLevel,System.String,System.Object,System.Object)">
            <summary>
            Writes the default log-message for the action of calling the Set-part of an Indexer to the logfile.
            </summary>
            <param name="msglevel">The minimum <see cref="T:Npgsql.LogLevel">LogLevel</see> for which this message should be logged.</param>
            <param name="ClassName">The name of the class that contains the Indexer</param>
            <param name="IndexerParam">The parameter given to the Indexer</param>
            <param name="value">The value the Indexer is set to</param>
        </member>
        <member name="M:Npgsql.NpgsqlEventLog.LogPropertyGet(Npgsql.LogLevel,System.String,System.String)">
            <summary>
            Writes the default log-message for the action of calling the Get-part of a Property to the logfile.
            </summary>
            <param name="msglevel">The minimum <see cref="T:Npgsql.LogLevel">LogLevel</see> for which this message should be logged.</param>
            <param name="ClassName">The name of the class that contains the Property</param>
            <param name="PropertyName">The name of the Property</param>
        </member>
        <member name="M:Npgsql.NpgsqlEventLog.LogPropertySet(Npgsql.LogLevel,System.String,System.String,System.Object)">
            <summary>
            Writes the default log-message for the action of calling the Set-part of a Property to the logfile.
            </summary>
            <param name="msglevel">The minimum <see cref="T:Npgsql.LogLevel">LogLevel</see> for which this message should be logged.</param>
            <param name="ClassName">The name of the class that contains the Property</param>
            <param name="PropertyName">The name of the Property</param>
            <param name="value">The value the Property is set to</param>
        </member>
        <member name="M:Npgsql.NpgsqlEventLog.LogMethodEnter(Npgsql.LogLevel,System.String,System.String)">
            <summary>
            Writes the default log-message for the action of calling a Method without Arguments to the logfile.
            </summary>
            <param name="msglevel">The minimum <see cref="T:Npgsql.LogLevel">LogLevel</see> for which this message should be logged.</param>
            <param name="ClassName">The name of the class that contains the Method</param>
            <param name="MethodName">The name of the Method</param>
        </member>
        <member name="M:Npgsql.NpgsqlEventLog.LogMethodEnter(Npgsql.LogLevel,System.String,System.String,System.Object)">
            <summary>
            Writes the default log-message for the action of calling a Method with one Argument to the logfile.
            </summary>
            <param name="msglevel">The minimum <see cref="T:Npgsql.LogLevel">LogLevel</see> for which this message should be logged.</param>
            <param name="ClassName">The name of the class that contains the Method</param>
            <param name="MethodName">The name of the Method</param>
            <param name="MethodParameter">The value of the Argument of the Method</param>
        </member>
        <member name="M:Npgsql.NpgsqlEventLog.LogMethodEnter(Npgsql.LogLevel,System.String,System.String,System.Object,System.Object)">
            <summary>
            Writes the default log-message for the action of calling a Method with two Arguments to the logfile.
            </summary>
            <param name="msglevel">The minimum <see cref="T:Npgsql.LogLevel">LogLevel</see> for which this message should be logged.</param>
            <param name="ClassName">The name of the class that contains the Method</param>
            <param name="MethodName">The name of the Method</param>
            <param name="MethodParameter1">The value of the first Argument of the Method</param>
            <param name="MethodParameter2">The value of the second Argument of the Method</param>
        </member>
        <member name="M:Npgsql.NpgsqlEventLog.LogMethodEnter(Npgsql.LogLevel,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the default log-message for the action of calling a Method with three Arguments to the logfile.
            </summary>
            <param name="msglevel">The minimum <see cref="T:Npgsql.LogLevel">LogLevel</see> for which this message should be logged.</param>
            <param name="ClassName">The name of the class that contains the Method</param>
            <param name="MethodName">The name of the Method</param>
            <param name="MethodParameter1">The value of the first Argument of the Method</param>
            <param name="MethodParameter2">The value of the second Argument of the Method</param>
            <param name="MethodParameter3">The value of the third Argument of the Method</param>
        </member>
        <member name="M:Npgsql.NpgsqlEventLog.LogMethodEnter(Npgsql.LogLevel,System.String,System.String,System.Object[])">
            <summary>
            Writes the default log-message for the action of calling a Method with more than three Arguments to the logfile.
            </summary>
            <param name="msglevel">The minimum <see cref="T:Npgsql.LogLevel">LogLevel</see> for which this message should be logged.</param>
            <param name="ClassName">The name of the class that contains the Method</param>
            <param name="MethodName">The name of the Method</param>
            <param name="MethodParameters">A <see cref="T:System.Object">Object</see>-Array with zero or more Ojects that are Arguments of the Method.</param>
        </member>
        <member name="P:Npgsql.NpgsqlEventLog.Level">
            <summary>
             Sets/Returns the level of information to log to the logfile.
             </summary>
             <value>The current <see cref="T:Npgsql.LogLevel">LogLevel</see></value>
        </member>
        <member name="P:Npgsql.NpgsqlEventLog.LogName">
            <summary>
             Sets/Returns the filename to use for logging.
             </summary>
             <value>The filename of the current Log file.</value>
        </member>
        <member name="P:Npgsql.NpgsqlEventLog.EchoMessages">
            <summary>
             Sets/Returns whether Log messages should be echoed to the console
             </summary>
             <value><b>true</b> if Log messages are echoed to the console, otherwise <b>false</b></value>
        </member>
        <member name="T:Npgsql.NpgsqlException">
            <summary>
            The exception that is thrown when the PostgreSQL backend reports errors.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlException.#ctor(System.Collections.IList)">
            <summary>
            Construct a backend error exception based on a list of one or more
            backend errors.  The basic Exception.Message will be built from the
            first (usually the only) error in the list.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlException.ToString">
            <summary>
            Format a .NET style exception string.
            Include all errors in the list, including any hints.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlException.AppendString(System.IO.StringWriter,System.String,System.String)">
            <summary>
            Append a line to the given Stream, first checking for zero-length.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Item(System.Int32)">
            <summary>
            Provide access to the entire list of errors provided by the PostgreSQL backend.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Severity">
            <summary>
            Severity code.  All versions.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Code">
            <summary>
            Error code.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.BaseMessage">
            <summary>
            Basic error message.  All versions.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Detail">
            <summary>
            Detailed error message.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Hint">
            <summary>
            Suggestion to help resolve the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Position">
            <summary>
            Position (one based) within the query string where the error was encounterd.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Where">
            <summary>
            Trace back information.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.File">
            <summary>
            Source file (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Line">
            <summary>
            Source file line number (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Routine">
            <summary>
            Source routine (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.ErrorSql">
            <summary>
            String containing the sql sent which produced this error.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Errors">
            <summary>
            Returns the entire list of errors provided by the PostgreSQL backend.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlExecute">
             <summary>
             This class represents the Parse message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlFlush">
             <summary>
             This class represents the Parse message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlMediator">
            <summary>
             This class is responsible for serving as bridge between the backend
             protocol handling and the core classes. It is used as the mediator for
             exchanging data generated/sent from/to backend.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlMessageTypes_Ver_2">
            <summary>
            Class NpgsqlMessageTypes_Ver_2.
            Defines PG frontend/backend protocol message types and parameters used in protocol version 2.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlMessageTypes_Ver_3">
            <summary>
            Class NpgsqlMessageTypes_Ver_3.
            Defines PG frontend/backend protocol message types and parameters used in protocol version 3.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlNotificationEventArgs">
            <summary>
            EventArgs class to send Notification parameters.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlNotificationEventArgs.PID">
            <summary>
            Process ID of the PostgreSQL backend that sent this notification.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlNotificationEventArgs.Condition">
            <summary>
            Condition that triggered that notification.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlParameter">
            <summary>
             This class represents a parameter to a command that will be sent to server
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Npgsql.NpgsqlParameter.#ctor" -->
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter name and a value of the new <b>NpgsqlParameter</b>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="value">An <see cref="T:System.Object">Object</see> that is the value of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
            <remarks>
            <p>When you specify an <see cref="T:System.Object">Object</see>
            in the value parameter, the <see cref="T:System.Data.DbType">DbType</see> is
            inferred from the .NET Framework type of the <b>Object</b>.</p>
            <p>When using this constructor, you must be aware of a possible misuse of the constructor which takes a DbType parameter.
            This happens when calling this constructor passing an int 0 and the compiler thinks you are passing a value of DbType.
            Use <code> Convert.ToInt32(value) </code> for example to have compiler calling the correct constructor.</p>
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlNativeTypeInfo)">
            <summary>
            Internal constructor to handle parameter creation from CommandBuilder passing a NpgsqlNativeTypeInfo directly.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter name, the <see cref="T:System.Data.DbType">DbType</see>, and the size.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
            <param name="size">The length of the parameter.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter name, the <see cref="T:System.Data.DbType">DbType</see>, the size,
            and the source column name.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.String,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter name, the <see cref="T:System.Data.DbType">DbType</see>, the size,
            the source column name, a <see cref="T:System.Data.ParameterDirection">ParameterDirection</see>,
            the precision of the parameter, the scale of the parameter, a
            <see cref="T:System.Data.DataRowVersion">DataRowVersion</see> to use, and the
            value of the parameter.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection">ParameterDirection</see> values.</param>
            <param name="isNullable"><b>true</b> if the value of the field can be null, otherwise <b>false</b>.</param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> is resolved.</param>
            <param name="scale">The total number of decimal places to which
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> is resolved.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion">DataRowVersion</see> values.</param>
            <param name="value">An <see cref="T:System.Object">Object</see> that is the value
            of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.System#ICloneable#Clone">
            <summary>
            Creates a new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> that
            is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> that is a copy of this instance.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Precision">
            <summary>
            Gets or sets the maximum number of digits used to represent the
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> property.
            </summary>
            <value>The maximum number of digits used to represent the
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> property.
            The default value is 0, which indicates that the data provider
            sets the precision for <b>Value</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Scale">
            <summary>
            Gets or sets the number of decimal places to which
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> is resolved.
            </summary>
            <value>The number of decimal places to which
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> is resolved. The default is 0.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            </summary>
            <value>The maximum size, in bytes, of the data within the column.
            The default value is inferred from the parameter value.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.DbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType">DbType</see> of the parameter.
            </summary>
            <value>One of the <see cref="T:System.Data.DbType">DbType</see> values. The default is <b>String</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.NpgsqlDbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType">DbType</see> of the parameter.
            </summary>
            <value>One of the <see cref="T:System.Data.DbType">DbType</see> values. The default is <b>String</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Direction">
            <summary>
            Gets or sets a value indicating whether the parameter is input-only,
            output-only, bidirectional, or a stored procedure return value parameter.
            </summary>
            <value>One of the <see cref="T:System.Data.ParameterDirection">ParameterDirection</see>
            values. The default is <b>Input</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.IsNullable">
            <summary>
            Gets or sets a value indicating whether the parameter accepts null values.
            </summary>
            <value><b>true</b> if null values are accepted; otherwise, <b>false</b>. The default is <b>false</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.ParameterName">
            <summary>
            Gets or sets the name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            </summary>
            <value>The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            The default is an empty string.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column that is mapped to the
            <see cref="T:System.Data.DataSet">DataSet</see> and used for loading or
            returning the <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see>.
            </summary>
            <value>The name of the source column that is mapped to the
            <see cref="T:System.Data.DataSet">DataSet</see>. The default is an empty string.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion">DataRowVersion</see>
            to use when loading <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see>.
            </summary>
            <value>One of the <see cref="T:System.Data.DataRowVersion">DataRowVersion</see> values.
            The default is <b>Current</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>An <see cref="T:System.Object">Object</see> that is the value of the parameter.
            The default value is null.</value>
        </member>
        <member name="T:Npgsql.NpgsqlParameterCollection">
            <summary>
            Represents a collection of parameters relevant to a <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see>
            as well as their respective mappings to columns in a <see cref="T:System.Data.DataSet">DataSet</see>.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the NpgsqlParameterCollection class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(Npgsql.NpgsqlParameter)">
            <summary>
            Adds the specified <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> given the specified parameter name and value.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
            <param name="value">The Value of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
            <remarks>
            Use caution when using this overload of the
            <b>Add</b> method to specify integer parameter values.
            Because this overload takes a <i>value</i> of type Object,
            you must convert the integral value to an <b>Object</b>
            type when the value is zero, as the following C# example demonstrates.
            <code>parameters.Add(":pname", Convert.ToInt32(0));</code>
            If you do not perform this conversion, the compiler will assume you
            are attempting to call the NpgsqlParameterCollection.Add(string, DbType) overload.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.String,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> given the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the DbType values.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> with the parameter name, the data type, and the column length.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the DbType values.</param>
            <param name="size">The length of the column.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> with the parameter name, the data type, the column length, and the source column name.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the DbType values.</param>
            <param name="size">The length of the column.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the specified <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> from the collection using the parameter name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to retrieve.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Contains(System.String)">
            <summary>
            Gets a value indicating whether a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> with the specified parameter name exists in the collection.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns><b>true</b> if the collection contains the parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> in the collection with a specific parameter name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns>The zero-based location of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> in the collection.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> from the collection using a specific index.
            </summary>
            <param name="index">The zero-based index of the parameter.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is to be inserted within the collection.</param>
            <param name="value">The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> from the collection.
            </summary>
            <param name="value">The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to remove from the collection.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Contains(System.Object)">
            <summary>
            Gets a value indicating whether a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> exists in the collection.
            </summary>
            <param name="value">The value of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns>true if the collection contains the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object; otherwise, false.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.TryGetValue(System.String,Npgsql.NpgsqlParameter@)">
            <returns><b>true</b> if the collection contains the parameter and param will contain the parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> in the collection.
            </summary>
            <param name="value">The value of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns>The zero-based index of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object in the collection.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.Object)">
            <summary>
            Adds the specified <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
            <returns>The zero-based index of the new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects from the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> to the specified array.
            </summary>
            <param name="array">An <see cref="T:System.Array">Array</see> to which to copy the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects in the collection.</param>
            <param name="index">The starting index of the array.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator">IEnumerator</see> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.CheckType(System.Object)">
            <summary>
            In methods taking an object as argument this method is used to verify
            that the argument has the type <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            </summary>
            <param name="Object">The object to verify</param>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> with the specified name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to retrieve.</param>
            <value>The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> with the specified name, or a null reference if the parameter is not found.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to retrieve.</param>
            <value>The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> at the specified index.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.Count">
            <summary>
            Gets the number of <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects in the collection.
            </summary>
            <value>The number of <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects in the collection.</value>
        </member>
        <member name="T:Npgsql.NpgsqlParameterStatus">
             <summary>
             This class represents the ParameterStatus message sent from PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlParse">
             <summary>
             This class represents the Parse message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlPasswordPacket">
            <summary>
            This class represents a PasswordPacket message sent to backend
            PostgreSQL.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlQuery">
            <summary>
            Summary description for NpgsqlQuery
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlRowDescriptionFieldData">
             <summary>
             This struct represents the internal data of the RowDescription message.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlRowDescription">
             <summary>
             This class represents a RowDescription message sent from
             the PostgreSQL.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlSchema">
            <summary>
            Provides the underlying mechanism for reading schema information.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.#ctor(Npgsql.NpgsqlConnection)">
            <summary>
            Creates an NpgsqlSchema that can read schema information from the database.
            </summary>
            <param name="connection">An open database connection for reading metadata.</param>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetMetaDataCollections">
            <summary>
            Returns the MetaDataCollections that lists all possible collections.
            </summary>
            <returns>The MetaDataCollections</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetRestrictions">
            <summary>
            Returns the Restrictions that contains the meaning and position of the values in the restrictions array.
            </summary>
            <returns>The Restrictions</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetDatabases(System.String[])">
            <summary>
            Returns the Databases that contains a list of all accessable databases.
            </summary>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Databases</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetTables(System.String[])">
            <summary>
            Returns the Tables that contains table and view names and the database and schema they come from.
            </summary>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Tables</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetColumns(System.String[])">
            <summary>
            Returns the Columns that contains information about columns in tables. 
            </summary>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Columns.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetViews(System.String[])">
            <summary>
            Returns the Views that contains view names and the database and schema they come from.
            </summary>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Views</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetUsers(System.String[])">
            <summary>
            Returns the Users containing user names and the sysid of those users.
            </summary>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Users.</returns>
        </member>
        <member name="T:Npgsql.NpgsqlStartupPacket">
             <summary>
             This class represents a StartupPacket message of PostgreSQL
             protocol.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlSync">
             <summary>
             This class represents the Parse message sent to PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="T:Npgsql.NpgsqlTransaction">
            <summary>
            Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Dispose">
            <summary>
            Releases the unmanaged resources used by the
            <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>
            and optionally releases the managed resources.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Commit">
            <summary>
            Commits the database transaction.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Cancel">
            <summary>
            Cancel the transaction without telling the backend about it.  This is
            used to make the transaction go away when closing a connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlTransaction.Connection">
            <summary>
            Gets the <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>
            object associated with the transaction, or a null reference if the
            transaction is no longer valid.
            </summary>
            <value>The <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>
            object associated with the transaction.</value>
        </member>
        <member name="P:Npgsql.NpgsqlTransaction.IsolationLevel">
            <summary>
            Specifies the <see cref="T:System.Data.IsolationLevel">IsolationLevel</see> for this transaction.
            </summary>
            <value>The <see cref="T:System.Data.IsolationLevel">IsolationLevel</see> for this transaction.
            The default is <b>ReadCommitted</b>.</value>
        </member>
        <member name="T:Npgsql.ProtocolVersion">
            <summary>
            Represent the frontend/backend protocol version.
            </summary>
        </member>
        <member name="T:Npgsql.ServerVersion">
            <summary>
            Represent the backend server version.
            </summary>
        </member>
        <member name="M:Npgsql.ServerVersion.ToString">
            <summary>
            Returns the string representation of this version in three place dot notation (Major.Minor.Patch).
            </summary>
        </member>
        <member name="P:Npgsql.ServerVersion.Major">
            <summary>
            Server version major number.
            </summary>
        </member>
        <member name="P:Npgsql.ServerVersion.Minor">
            <summary>
            Server version minor number.
            </summary>
        </member>
        <member name="P:Npgsql.ServerVersion.Patch">
            <summary>
            Server version patch level number.
            </summary>
        </member>
        <member name="T:Npgsql.PGUtil">
            <summary>
             This class provides many util methods to handle
             reading and writing of PostgreSQL protocol messages.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ConvertProtocolVersion(Npgsql.ProtocolVersion)">
            <summary>
             This method takes a ProtocolVersion and returns an integer
             version number that the Postgres backend will recognize in a
             startup packet.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ExtractServerVersion(System.String)">
            <summary>
            This method takes a version string as returned by SELECT VERSION() and returns
            a valid version string ("7.2.2" for example).
            This is only needed when running protocol version 2.
            This does not do any validity checks.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ParseServerVersion(System.String)">
            <summary>
            This method takes a version string ("7.4.1" for example) and produces
            the required integer version numbers (7, 4, and 1).
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ConvertBeginToInt32(System.String)">
            <summary>
            Convert the beginning numeric part of the given string to Int32.
            For example:
              Strings "12345ABCD" and "12345.54321" would both be converted to int 12345.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ReadString(System.IO.Stream,System.Text.Encoding)">
            <summary>
             This method gets a C NULL terminated string from the network stream.
             It keeps reading a byte in each time until a NULL byte is returned.
             It returns the resultant string of bytes read.
             This string is sent from backend.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ReadString(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
             This method gets a length terminated string from a network stream.
             It returns the resultant string of bytes read.
             This string is sent from backend.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteString(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>
             This method writes a C NULL terminated string to the network stream.
             It appends a NULL terminator to the end of the String.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteLimString(System.String,System.Int32,System.IO.Stream,System.Text.Encoding)">
            <summary>
             This method writes a C NULL terminated string limited in length to the
             backend server.
             It pads the string with null bytes to the size specified.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteInt32(System.IO.Stream,System.Int32)">
            <summary>
            Write a 32-bit integer to the given stream in the correct byte order.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ReadInt32(System.IO.Stream,System.Byte[])">
            <summary>
            Read a 32-bit integer from the given stream in the correct byte order.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteInt16(System.IO.Stream,System.Int16)">
            <summary>
            Write a 16-bit integer to the given stream in the correct byte order.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ReadInt16(System.IO.Stream,System.Byte[])">
            <summary>
            Read a 16-bit integer from the given stream in the correct byte order.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.LargeObjectManager">
            <summary>
            Summary description for LargeObjectManager.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.BasicBackendToNativeTypeConverter">
            <summary>
            Provide event handlers to convert all native supported basic data types from their backend
            text representation to a .NET object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ToBinary(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Binary data.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ToBoolean(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql boolean to a System.Boolean.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ToBit(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql bit to a System.Boolean.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ToDateTime(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql datetime to a System.DateTime.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ToDate(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql date to a System.DateTime.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ToTime(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql time to a System.DateTime.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ToMoney(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql money to a System.Decimal.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.BasicNativeToBackendTypeConverter">
            <summary>
            Provide event handlers to convert the basic native supported data types from
            native form to backend representation.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToBinary(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Binary data.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToBoolean(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Convert to a postgresql boolean.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToBit(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Convert to a postgresql bit.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToDateTime(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Convert to a postgresql timestamp.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToDate(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Convert to a postgresql date.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToTime(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Convert to a postgresql time.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToMoney(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Convert to a postgres money.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.ExtendedBackendToNativeTypeConverter">
            <summary>
            Provide event handlers to convert extended native supported data types from their backend
            text representation to a .NET object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToPoint(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql point to a System.NpgsqlPoint.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToBox(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Convert a postgresql point to a System.RectangleF.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToLSeg(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            LDeg.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToPath(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Path.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToPolygon(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToCircle(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToInet(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Inet.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.ExtendedNativeToBackendTypeConverter">
            <summary>
            Provide event handlers to convert extended native supported data types from
            native form to backend representation.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToPoint(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Point.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToBox(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Box.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToLSeg(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            LSeg.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToPath(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Open path.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToPolygon(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToCircle(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToIPAddress(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object)">
            <summary>
            Convert to a postgres inet.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlPoint">
            <summary>
            Represents a PostgreSQL Point type
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlLSeg">
            <summary>
            Represents a PostgreSQL Line Segment type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlPath">
            <summary>
            Represents a PostgreSQL Path type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlPolygon">
            <summary>
            Represents a PostgreSQL Polygon type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlCircle">
            <summary>
            Represents a PostgreSQL Circle type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlInet">
            <summary>
            Represents a PostgreSQL inet type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTypesHelper">
            <summary>
            This class contains helper methods for type conversion between
            the .Net type system and postgresql.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTypesHelper.BackendTypeMappingCache">
            <summary>
            A cache of basic datatype mappings keyed by server version.  This way we don't
            have to load the basic type mappings for every connection.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.GetNativeTypeInfo(NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Find a NpgsqlNativeTypeInfo in the default types map that can handle objects
            of the given NpgsqlDbType.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.GetNativeTypeInfo(System.Data.DbType)">
            <summary>
            Find a NpgsqlNativeTypeInfo in the default types map that can handle objects
            of the given DbType.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.GetNativeTypeInfo(System.Type)">
            <summary>
            Find a NpgsqlNativeTypeInfo in the default types map that can handle objects
            of the given System.Type.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.ConvertBackendStringToSystemType(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
             This method is responsible to convert the string received from the backend
             to the corresponding NpgsqlType.
             The given TypeInfo is called upon to do the conversion.
             If no TypeInfo object is provided, no conversion is performed.
             </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.VerifyDefaultTypesMap">
            <summary>
            Create the one and only native to backend type map.
            This map is used when formatting native data
            types to backend representations.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.CreateAndLoadInitialTypesMapping(Npgsql.NpgsqlConnector)">
            <summary>
             This method creates (or retrieves from cache) a mapping between type and OID 
             of all natively supported postgresql data types.
             This is needed as from one version to another, this mapping can be changed and
             so we avoid hardcoding them.
             </summary>
             <returns>NpgsqlTypeMapping containing all known data types.  The mapping must be
             cloned before it is modified because it is cached; changes made by one connection may
             effect another connection.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.LoadTypesMappings(Npgsql.NpgsqlConnector,NpgsqlTypes.NpgsqlBackendTypeMapping,System.Collections.IList)">
            <summary>
            Attempt to map types by issuing a query against pg_type.
            This function takes a list of NpgsqlTypeInfo and attempts to resolve the OID field
            of each by querying pg_type.  If the mapping is found, the type info object is
            updated (OID) and added to the provided NpgsqlTypeMapping object.
            </summary>
            <param name="conn">NpgsqlConnector to send query through.</param>
            <param name="TypeMappings">Mapping object to add types too.</param>
            <param name="TypeInfoList">List of types that need to have OID's mapped.</param>
        </member>
        <member name="T:NpgsqlTypes.ConvertBackendToNativeHandler">
            <summary>
            Delegate called to convert the given backend data to its native representation.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.ConvertNativeToBackendHandler">
            <summary>
            Delegate called to convert the given native data to its backand representation.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlBackendTypeInfo">
            <summary>
            Represents a backend data type.
            This class can be called upon to convert a backend field representation to a native object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeInfo.#ctor(System.Int32,System.String,NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Type,NpgsqlTypes.ConvertBackendToNativeHandler)">
            <summary>
            Construct a new NpgsqlTypeInfo with the given attributes and conversion handlers.
            </summary>
            <param name="OID">Type OID provided by the backend server.</param>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="Type">System type to convert fields of this type to.</param>
            <param name="ConvertBackendToNative">Data conversion handler.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeInfo.ConvertToNative(System.String,System.Int16,System.Int32)">
            <summary>
            Perform a data conversion from a backend representation to 
            a native object.
            </summary>
            <param name="BackendData">Data sent from the backend.</param>
            <param name="TypeModifier">Type modifier field sent from the backend.</param>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.OID">
            <summary>
            Type OID provided by the backend server.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.Name">
            <summary>
            Type name provided by the backend server.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.NpgsqlDbType">
            <summary>
            NpgsqlDbType.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.DbType">
            <summary>
            NpgsqlDbType.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.Type">
            <summary>
            System type to convert fields of this type to.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlNativeTypeInfo">
            <summary>
            Represents a backend data type.
            This class can be called upon to convert a native object to its backend field representation,
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeInfo.#ctor(System.String,NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Boolean,NpgsqlTypes.ConvertNativeToBackendHandler)">
            <summary>
            Construct a new NpgsqlTypeInfo with the given attributes and conversion handlers.
            </summary>
            <param name="OID">Type OID provided by the backend server.</param>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="Type">System type to convert fields of this type to.</param>
            <param name="ConvertBackendToNative">Data conversion handler.</param>
            <param name="ConvertNativeToBackend">Data conversion handler.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeInfo.ConvertToBackend(System.Object,System.Boolean)">
            <summary>
            Perform a data conversion from a native object to
            a backend representation.
            DBNull and null values are handled differently depending if a plain query is used
            When 
            </summary>
            <param name="NativeData">Native .NET object to be converted.</param>
            <param name="ForExtendedQuery">Flag indicating if the conversion has to be done for 
            plain queries or extended queries</param>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeInfo.Name">
            <summary>
            Type name provided by the backend server.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeInfo.NpgsqlDbType">
            <summary>
            NpgsqlDbType.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeInfo.DbType">
            <summary>
            DbType.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeInfo.Quote">
            <summary>
            Apply quoting.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeInfo.UseSize">
            <summary>
            Use parameter size information.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlBackendTypeMapping">
            <summary>
            Provide mapping between type OID, type name, and a NpgsqlBackendTypeInfo object that represents it.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.#ctor">
            <summary>
            Construct an empty mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.#ctor(NpgsqlTypes.NpgsqlBackendTypeMapping)">
            <summary>
            Copy constuctor.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.AddType(NpgsqlTypes.NpgsqlBackendTypeInfo)">
            <summary>
            Add the given NpgsqlBackendTypeInfo to this mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.AddType(System.Int32,System.String,NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Type,NpgsqlTypes.ConvertBackendToNativeHandler)">
            <summary>
            Add a new NpgsqlBackendTypeInfo with the given attributes and conversion handlers to this mapping.
            </summary>
            <param name="OID">Type OID provided by the backend server.</param>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="Type">System type to convert fields of this type to.</param>
            <param name="ConvertBackendToNative">Data conversion handler.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.Clone">
            <summary>
            Make a shallow copy of this type mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.ContainsOID(System.Int32)">
            <summary>
            Determine if a NpgsqlBackendTypeInfo with the given backend type OID exists in this mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.ContainsName(System.String)">
            <summary>
            Determine if a NpgsqlBackendTypeInfo with the given backend type name exists in this mapping.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeMapping.Count">
            <summary>
            Get the number of type infos held.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeMapping.Item(System.Int32)">
            <summary>
            Retrieve the NpgsqlBackendTypeInfo with the given backend type OID, or null if none found.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeMapping.Item(System.String)">
            <summary>
            Retrieve the NpgsqlBackendTypeInfo with the given backend type name, or null if none found.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlNativeTypeMapping">
            <summary>
            Provide mapping between type Type, NpgsqlDbType and a NpgsqlNativeTypeInfo object that represents it.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.#ctor">
            <summary>
            Construct an empty mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.AddType(NpgsqlTypes.NpgsqlNativeTypeInfo)">
            <summary>
            Add the given NpgsqlNativeTypeInfo to this mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.AddType(System.String,NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Boolean,NpgsqlTypes.ConvertNativeToBackendHandler)">
            <summary>
            Add a new NpgsqlNativeTypeInfo with the given attributes and conversion handlers to this mapping.
            </summary>
            <param name="OID">Type OID provided by the backend server.</param>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="ConvertBackendToNative">Data conversion handler.</param>
            <param name="ConvertNativeToBackend">Data conversion handler.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.ContainsName(System.String)">
            <summary>
            Determine if a NpgsqlNativeTypeInfo with the given backend type name exists in this mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.ContainsNpgsqlDbType(NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Determine if a NpgsqlNativeTypeInfo with the given NpgsqlDbType exists in this mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.ContainsType(System.Type)">
            <summary>
            Determine if a NpgsqlNativeTypeInfo with the given Type name exists in this mapping.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeMapping.Count">
            <summary>
            Get the number of type infos held.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeMapping.Item(System.String)">
            <summary>
            Retrieve the NpgsqlNativeTypeInfo with the given backend type name, or null if none found.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeMapping.Item(NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Retrieve the NpgsqlNativeTypeInfo with the given NpgsqlDbType, or null if none found.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeMapping.Item(System.Data.DbType)">
            <summary>
            Retrieve the NpgsqlNativeTypeInfo with the given DbType, or null if none found.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeMapping.Item(System.Type)">
            <summary>
            Retrieve the NpgsqlNativeTypeInfo with the given Type, or null if none found.
            </summary>
        </member>
        <member name="T:Npgsql.Design.ConnectionStringEditor">
            <summary>
            An UITypeEditor that simply initializes a
            ConnectionStringEditorForm if possible
            </summary>
        </member>
        <member name="M:Npgsql.Design.ConnectionStringEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the Value of the given Object using the EditSyle given by GetEditStyle.
            </summary>
            <param name="context">An ITypeDescriptorContext, through wich you can get additional context information.</param>
            <param name="provider">An IServiceProvider, through which this editor may order services.</param>
            <param name="value">The Object to edit</param>
            <returns>The new value of the Object</returns>
        </member>
        <member name="M:Npgsql.Design.ConnectionStringEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Requests the EditSyle to be used by EditValue
            </summary>
            <param name="context">An ITypeDescriptorContext, through wich you can get additional context information.</param>
            <returns>An UITypeEditorEditStyle-Value, indicating the EditStyle used by EditValue. If UITypeEditor doesn't support this method, GetEditStyle returns the value None.</returns>
        </member>
        <member name="F:Npgsql.Design.ConnectionStringEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Npgsql.Design.ConnectionStringEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Npgsql.Design.ConnectionStringEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Npgsql.Design.ConnectionStringEditorForm.ConnectionString">
            <summary>
            Returns the generated ConnectionString
            </summary>
        </member>
        <member name="T:Npgsql.Design.NpgsqlParameterConverter">
            <summary>
            Zusammenfassung fr NpgsqlParameterConverter.
            </summary>
        </member>
        <member name="T:Npgsql.Design.NpgsqlParametersEditor">
            <summary>
            Zusammenfassung fr NpgsqlParametersEditor.
            </summary>
        </member>
    </members>
</doc>
