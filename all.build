<?xml version="1.0" encoding='iso-8859-1' ?>
<project name="all" default="build">

	<property name="base.dir" value="${path::get-full-path( project::get-base-directory() )}" />
	<property name="skipcaspol" value="true" />
	<property name="sharedlibrary.dir" value="${base.dir}/SharedLibs" />
	<property name="releasenotes.dir" value="ReleaseNotes" />
	<property name="test.output.dir" value="${path::combine(base.dir, 'test-results')}" />

	<include buildfile="common.xml" />
	
	<target name="build" depends="clean, init, core, services, tools, container, components, activerecord, monorail, aspectsharp, facilities, samples" />

	<target name="clean">
		<delete dir="${build.dir}" failonerror="false" />
		
		<delete dir="${test.output.dir}" failonerror="false" />
	</target>
		
	<target name="cleanall">
		<delete dir="${build.dir}" failonerror="false" />
		<nant buildfile="ActiveRecord/activerecord.build" target="clean" inheritall="true" />
		<nant buildfile="Tools/DynamicProxy/DynamicProxy.build" target="clean" inheritall="true" />
		<nant buildfile="Tools/NVelocity/nvelocity.build" target="clean" inheritall="true" />
		<nant buildfile="InversionOfControl/container.build" target="clean" inheritall="true" />
		<nant buildfile="Services/services.build" target="clean" inheritall="true" />
		<nant buildfile="Facilities/facilities.build" target="clean" inheritall="true" />
		<nant buildfile="Components/components.build" target="clean" inheritall="true" />
		<nant buildfile="MonoRail/monorail.build" target="clean" inheritall="true" />
		<nant buildfile="AspectSharp/aspectsharp.build" target="clean" inheritall="true" />
	</target>
	
	<target name="init">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${test.output.dir}" />
		
		<call target="copydistdependencies" />

		<exec 
			program="${nunit-console}" 
			resultproperty="nunit.found"
			failonerror="false" />

		<echo message="nunit-console invocation result: ${nunit.found}" />

		<property name="tests.disabled" value="false" />

		<if test="${nunit.found!='0'}">
			<property name="tests.disabled" value="true" />
		</if>

		<echo message="Tests with nunit-console are disabled?  ${tests.disabled}" />
	</target>
	
	<target name="copydistdependencies">
		<copy todir="${build.dir}">
			<fileset basedir="${sharedlibrary.dir}/boo">
				<include name="*.dll" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${sharedlibrary.dir}/cassini">
				<include name="*.*" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${sharedlibrary.dir}/ibatis/${framework::get-target-framework()}">
				<include name="*.dll" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${sharedlibrary.dir}/log4net">
				<include name="*.dll" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${sharedlibrary.dir}/netron">
				<include name="*.dll" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${sharedlibrary.dir}/nhibernate">
				<include name="*.*" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${sharedlibrary.dir}/nlog/${framework::get-target-framework()}">
				<include name="*.*" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${sharedlibrary.dir}/nvelocity">
				<include name="*.*" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${sharedlibrary.dir}/prevalence">
				<include name="*.*" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${sharedlibrary.dir}/nunit/${framework::get-target-framework()}">
				<include name="*.*" />
			</fileset>
		</copy>
	</target>

	<target name="activerecord" depends="init">
		<nant buildfile="ActiveRecord/activerecord.build" target="build" inheritall="true" />
	</target>
	
	<target name="tools" depends="init">
		<nant buildfile="Tools/DynamicProxy/DynamicProxy.build" target="build" inheritall="true" />
		<nant buildfile="Tools/NVelocity/nvelocity.build" target="build" inheritall="true" />
	</target>

	<target name="container" depends="init">
		<nant buildfile="InversionOfControl/container.build" target="build" inheritall="true" />
	</target>

	<target name="services" depends="init">
		<nant buildfile="Services/services.build" target="build" inheritall="true" />
	</target>

	<target name="core" depends="init">
		<nant buildfile="Core/core.build" target="build" inheritall="true" />
	</target>

	<target name="facilities" depends="init">
		<nant buildfile="Facilities/facilities.build" target="build" inheritall="true" />
	</target>

	<target name="components" depends="init">
		<nant buildfile="Components/components.build" target="build" inheritall="true" />
	</target>

	<target name="monorail" depends="init">
		<nant buildfile="MonoRail/monorail.build" target="build" inheritall="true" />
	</target>

	<target name="aspectsharp" depends="init">
		<nant buildfile="AspectSharp/aspectsharp.build" target="build" inheritall="true" />
	</target>

	<target name="samples" depends="init">

	</target>

	<!-- Packaging related tasks -->
	
	<target name="createreleasenotes">
		<mkdir dir="${releasenotes.dir}" />
		<delete dir="${releasenotes.dir}" />
		
		<echo message="Top level projects Release notes" />

		<copy file="ActiveRecord/Changes.txt" tofile="${releasenotes.dir}/ActiveRecord Release Notes.txt" />
		<copy file="MonoRail/Changes.txt" tofile="${releasenotes.dir}/MonoRail Release Notes.txt" />
		<copy file="InversionOfControl/Changes.txt" tofile="${releasenotes.dir}/InversionOfControl Release Notes.txt" />
		<copy file="AspectSharp/Changes.txt" tofile="${releasenotes.dir}/AspectSharp Release Notes.txt" />
		<copy file="Tools/DynamicProxy/Changes.txt" tofile="${releasenotes.dir}/DynamicProxy Release Notes.txt" />
		<copy file="Core/Changes.txt" tofile="${releasenotes.dir}/Core Release Notes.txt" />

		<echo message="Components Release notes" />
		
		<mkdir dir="${releasenotes.dir}/Components" />
		<property name="target.folder" value="Components" />
		<call target="copy-scope-releasednotes" />

		<echo message="Facilities Release notes" />

		<mkdir dir="${releasenotes.dir}/Facilities" />
		<property name="target.folder" value="Facilities" />
		<call target="copy-scope-releasednotes" />

		<echo message="Services Release notes" />

		<mkdir dir="${releasenotes.dir}/Services" />
		<property name="target.folder" value="Services" />
		<call target="copy-scope-releasednotes" />
		
	</target>
	
	<target name="copy-scope-releasednotes">
		<foreach item="File" property="changeLogFile">
			<in>
				<items>
					<include name="${target.folder}/**/Changes.txt"/>
				</items>
			</in>
			<do>
				<echo message="changeLogFile ${changeLogFile}" />

				<property name="folder" value="${directory::get-parent-directory(changeLogFile)}" />
				
				<if test="${platform::is-win32()}">
					<property name="lastsepindex" value="${string::last-index-of(folder, '\') + 1}" />
				</if>
				
				<if test="${platform::is-unix()}">
					<property name="lastsepindex" value="${string::last-index-of(folder, '/') + 1}" />
				</if>

				<property name="length" value="${string::get-length(folder) - int::parse(lastsepindex)}" />

				<property name="project.name" value="${string::substring(folder, lastsepindex, length)}" />

				<copy file="${changeLogFile}" tofile="${releasenotes.dir}/${target.folder}/${project.name} Release Notes.txt" />
			</do>
		</foreach>	
	</target>
	
	<target name="deletereleasenotes">
		<delete dir="${releasenotes.dir}" />
	</target>

	<target name="zip_dependencies"  >
		<zip zipfile="${base.dir}/build/${framework::get-target-framework()}/external-dependencies.zip">
			<fileset basedir="${base.dir}/build/${framework::get-target-framework()}">
				<include name="*.*" />
				<exclude name="**/Castle*" />
				<exclude name="**/AspectSharp*" />
				<exclude name="**/db4o.dll" />
				<exclude name="**/EULA.rtf" />
			</fileset>
		</zip>
	</target>

	<target name="zip-build" depends="build">
		<property name="build-type" value="release" unless="${debug}" />
		<property name="build-type" value="debug" if="${debug}"/>
		<property name="build-zipfile" value="${base.dir}/castleproject-build_${CCNetLabel}-${framework::get-target-framework()}-${build-type}.zip" />
		
		<delete>
			<fileset basedir="${base.dir}">
				<include name="*.zip" />
				<include name="${base.dir}/build/${framework::get-target-framework()}/external-dependencies.zip" />
			</fileset>
		</delete>

		<!-- Prepare release note files -->
		<call target="createreleasenotes" />

		<!-- Include a zip file with all source code -->
		<call target="zipsource" if="${debug}" />

		<!-- Include a zip file with all dependencies -->
		<call target="zip_dependencies" />

		<!-- Create the master zip file with all files included -->
		<zip zipfile="${build-zipfile}">
			<fileset basedir="${base.dir}/build/">
				<include name="${framework::get-target-framework()}/Castle*.*" />
				<include name="${framework::get-target-framework()}/AspectSharp*.*" />
				<include name="${framework::get-target-framework()}/external-dependencies.zip" />
			</fileset>
			<fileset basedir="${base.dir}">
				<include name="ASL - Apache Software Foundation License.txt" />
				<include name="Committers.txt" />
				<include name="Castle main limitations.txt" />
				<include name="castle-sourcecode.zip" />
			</fileset>
			<fileset>
				<include name="${releasenotes.dir}/**/*.txt" />
			</fileset>
		</zip>
		
		<if test="${property::exists('build.target.dir')}">
			<copy file="${build-zipfile}" todir="${build.target.dir}" />
		</if>
		
		<call target="deletereleasenotes" />
	
	</target>
	
	<target name="zipdoc">
		<zip zipfile="${base.dir}/Castle-api-doc.zip">
			<fileset basedir="${base.dir}/docs">
				<include name="Castle.chm" />
			</fileset>
		</zip>
	</target>

	<target name="zipsamples">
		<zip zipfile="${base.dir}/Samples/ActiveRecord-Samples.zip">
			<fileset basedir="${base.dir}/Samples/ActiveRecord">
				<include name="**/*.build" />
				<include name="**/*.sln" />
				<include name="**/*.cs" />
				<include name="**/*.ico" />
				<include name="**/*.csproj" />
				<include name="**/*.xml" />
				<include name="**/*.config" />
				<include name="**/*.lang" />
				<include name="**/*.txt" />
				<include name="**/*.inc" />
				<include name="**/*.vm" />
				<include name="*.snk" />
				<exclude name="**\obj\Debug\*.*" />
				<exclude name="**\bin\*.*" />
				<exclude name="**\*.user" />
			</fileset>
		</zip>
		<zip zipfile="${base.dir}/Samples/Facilities-Samples.zip">
			<fileset basedir="${base.dir}/Samples/Facilities">
				<include name="**/*.build" />
				<include name="**/*.sln" />
				<include name="**/*.cs" />
				<include name="**/*.ico" />
				<include name="**/*.csproj" />
				<include name="**/*.xml" />
				<include name="**/*.config" />
				<include name="**/*.lang" />
				<include name="**/*.txt" />
				<include name="**/*.inc" />
				<include name="**/*.vm" />
				<include name="*.snk" />
				<exclude name="**\obj\Debug\*.*" />
				<exclude name="**\bin\*.*" />
				<exclude name="**\*.user" />
			</fileset>
		</zip>
		<zip zipfile="${base.dir}/Samples/InversionOfControl-Samples.zip">
			<fileset basedir="${base.dir}/Samples/InversionOfControl">
				<include name="**/*.build" />
				<include name="**/*.sln" />
				<include name="**/*.cs" />
				<include name="**/*.ico" />
				<include name="**/*.csproj" />
				<include name="**/*.xml" />
				<include name="**/*.config" />
				<include name="**/*.lang" />
				<include name="**/*.txt" />
				<include name="**/*.inc" />
				<include name="**/*.vm" />
				<include name="*.snk" />
				<exclude name="**\obj\Debug\*.*" />
				<exclude name="**\bin\*.*" />
				<exclude name="**\*.user" />
			</fileset>
		</zip>
		<zip zipfile="${base.dir}/Samples/MonoRail-Samples.zip">
			<fileset basedir="${base.dir}/Samples/MonoRail">
				<include name="**/*.build" />
				<include name="**/*.sln" />
				<include name="**/*.cs" />
				<include name="**/*.css" />
				<include name="**/*.gif" />
				<include name="**/*.png" />
				<include name="**/*.jpg" />
				<include name="**/*.js" />
				<include name="**/*.ico" />
				<include name="**/*.csproj" />
				<include name="**/*.xml" />
				<include name="**/*.config" />
				<include name="**/*.lang" />
				<include name="**/*.txt" />
				<include name="**/*.inc" />
				<include name="**/*.vm" />
				<include name="*.snk" />
				<exclude name="**\obj\Debug\*.*" />
				<exclude name="**\bin\*.*" />
				<exclude name="**\*.user" />
			</fileset>
		</zip>
		<zip zipfile="${base.dir}/Samples/Castle-Samples.zip">
			<fileset basedir="${base.dir}/Samples/Castle">
				<include name="**/*.build" />
				<include name="**/*.sln" />
				<include name="**/*.cs" />
				<include name="**/*.ico" />
				<include name="**/*.csproj" />
				<include name="**/*.xml" />
				<include name="**/*.config" />
				<include name="**/*.lang" />
				<include name="**/*.txt" />
				<include name="**/*.inc" />
				<include name="**/*.vm" />
				<include name="*.snk" />
				<exclude name="**\obj\Debug\*.*" />
				<exclude name="**\bin\*.*" />
				<exclude name="**\*.user" />
			</fileset>
		</zip>
	</target>
	
	<target name="zipsource">
		<zip zipfile="castle-sourcecode.zip">
			<fileset basedir="${base.dir}">
				<include name="**/*.build" />
				<include name="**/*.sln" />
				<include name="**/*.cs" />
				<include name="**/*.ico" />
				<include name="**/*.csproj" />
				<include name="**/*.xml" />
				<include name="**/*.config" />
				<include name="**/*.lang" />
				<include name="**/*.txt" />
				<include name="**/*.inc" />
				<include name="**/*.vm" />
				<include name="**/*.gif" />
				<include name="**/*.resx" />
				
				<exclude name="**/obj/" />
				<exclude name="**/obj/**/*.*" />
				<exclude name="**/bin*/**/*.*" />
				<exclude name="**/temp/**/*.*" />
				<exclude name="**/*.user" />
				<exclude name="**/_ReSharper.*" />
				<exclude name="**/_ReSharper.*/**/*.*" />
				<exclude name="**/*.suo" />
				<exclude name="SharedLibs/**/*.*" />
				<exclude name="Samples/**/*.*" />
				<exclude name="Experiments/**/*.*" />
				<exclude name="build/**/*.*" />
				<exclude name="Rook/**/*.*" />
				<exclude name="setup/*.*" />
				<exclude name="Tools/VSNetWizards/**/*.*" />
				<exclude name="Tools/SubversionHooks/**/*.*" />
				<exclude name="Tools/ManagedExtensions/**/*.*" />
				<exclude name="Tools/Castle.DynamicProxy2/**/*.*" />
				<exclude name="Tools/DynamicProxy2/**/*.*" />
			</fileset>
		</zip>
	</target>
	
	<description>Documentation generation.</description><property name="base.dir" value="." />
	<property name="doc.dir" value="${base.dir}/docs" />
	<property name="tempBin.dir" value="${doc.dir}/bin"/>
	<property name="outputDocs.file" value="Castle"/>
	
	<description>Docs generation properties.</description>
	<property name="ShowMissing" value="false"/>
	<property name="ShowPrivate" value="false"/>
	<property name="OutputTarget" value="HTMLHelp"/>

	<description>Generates documentation with default properties.</description>
	<target name="releaseDocs" depends="cleanup">
		<call target="copyFilesToDocument"/>
		<call target="generateReleaseDocs"/>
	</target>
	
	<description>Generates documentation for developers, with all missing information indicated and private members visible.</description>
	<target name="devDocs" depends="cleanup">
		<property name="ShowMissing" value="true"/>
		<property name="ShowPrivate" value="true"/>
		<property name="outputDocs.file" value="CastleDev"/>
		<call target="copyFilesToDocument"/>
		<call target="generateReleaseDocs"/>
	</target>
	
	<description>Generates documentation for release.</description>
	<target name="generateReleaseDocs">
		<ndoc failonerror="true">
			<assemblies basedir="${tempBin.dir}">
				<include name="Castle.*.dll"/>
			</assemblies>
			<referencepaths>
				<include name="ActiveRecord/lib"/>
				<include name="AspectSharp/bin"/>
				<include name="Monorail/lib"/>
				<include name="Tools/DynamicProxy/bin"/>
				<include name="Tools/NVelocity/bin"/>
				
				<!-- Components -->
				<include name="SharedLibs/Prevalence"/>
				<include name="SharedLibs/Db4o/net-1.1"/>
				<include name="SharedLibs/IBatis"/>
				<include name="SharedLibs/NHibernate"/>
				<include name="SharedLibs/boo"/>
				<include name="SharedLibs/cassini"/>
				<include name="SharedLibs/log4net"/>
				<include name="SharedLibs/netron"/>
				<include name="SharedLibs/Nlog"/>
				<include name="SharedLibs/log4net"/>
				<include name="SharedLibs/Nvelocity"/>
			    <include name="SharedLibs/stringtemplate/net-1.1"/> 
			</referencepaths>
			<documenters>
				<documenter name="MSDN">
					<property name="OutputTarget" value="${OutputTarget}" />
					<property name="Preliminary" value="true" />
					<property name="BinaryTOC" value="true" />
					<property name="CleanIntermediates" value="true" />
					<property name="SdkLinksOnWeb" value="true" />
					
					<property name="OutputDirectory" value="${doc.dir}" />
					<property name="HtmlHelpName" value="${outputDocs.file}" />
					<property name="IncludeFavorites" value="True" />
					<property name="SplitTOCs" value="False" />
					
					<property name="Title" value="Castle API documentation" />	
					<property name="DefaulTOC" value="Castle.MicroKernel" />
					
					<property name="ShowVisualBasic" value="True" />
					<property name="ShowMissingSummaries" value="${ShowMissing}" />
					<property name="ShowMissingRemarks" value="${ShowMissing}" />
					<property name="ShowMissingParams" value="${ShowMissing}" />
					<property name="ShowMissingReturns" value="${ShowMissing}" />
					<property name="ShowMissingValues" value="${ShowMissing}" />
					<property name="DocumentEmptyNamespaces" value="${ShowMissing}" />
					
					<property name="AutoPropertyBackerSummaries" value="true" />
					<property name="AutoDocumentConstructors" value="true" />
					<property name="DocumentProtected" value="True" />
					<property name="DocumentInternals" value="${ShowPrivate}" />
					<property name="DocumentPrivates" value="${ShowPrivate}" />
					
					<property name="IncludeAssemblyVersion" value="True" />
					<property name="CopyrightText" value="Copyright 2004,2006 - Castle Project (original author or authors)" />
					<property name="CopyrightHref" value="http://www.castleproject.org" />
				</documenter>
			</documenters>
		</ndoc>
	</target>
	
	<description>Copies all files to be documented to a single location to speed up the documentation process.</description>
	<target name="copyFilesToDocument">
		<foreach item="Folder" property="foldername">
			<in>
				<!-- Hardcode projects folders to speed up assemblies search -->
				<items>
					<include name="${build.dir}"/>
				</items>
			</in>
			<do>
			   <echo message="${foldername}" />

				<foreach item="File" property="file">
					<in>
						<items>
							<include name="${foldername}/Castle.*.dll"/>
							<include name="${foldername}/AspectSharp*.dll"/>
							<include name="${foldername}/NVelocity.dll"/>
							<exclude name="Castle.*.Tests.dll"/>
						</items>
					</in>
					<do>
						<property name="xml.file" value="${path::change-extension( file, 'xml' )}"/>
						<copy todir="${tempBin.dir}" if="${file::exists( xml.file )}" flatten="true">
							<fileset>
								<include name="${file}"/>
								<include name="${xml.file}"/>
							</fileset>
						</copy>
					</do>
				</foreach>
			</do>
		</foreach>
	</target>
	
	<description>Cleans up prior to documentation generation.</description>
	<target name="cleanup">
		<delete>
			<fileset>
				<include name="${doc.dir}/**"/>
				<exclude name="**/*.chm"/>
			</fileset>
		</delete>
	</target>

</project>
