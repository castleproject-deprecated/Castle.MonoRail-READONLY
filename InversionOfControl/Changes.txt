RC 2
====

- Startable facility: support to specify the attribute startable=true on the configuration

- Better error messages: now the components waiting for dependencies will recursively 
  report what they are waiting for.

- Support for custom lifestyle through configuration (kudos to Bawer Dagdeviren):

  <component id="my.component"
                   type="MyLib.MyComponent, MyLib"
                   lifestyle="custom"
                   customLifestyleType="MyLib.MyCustomLifestyle, MyLib" />

- Added Type converter for enums

- Support to associate configuration nodes to methods. Usage:

	<component>
		<methods>
			<save />
			<save signature="System.String, mscorlib" />
			<save signature="System.String, mscorlib;System.Int32, mscorlib" />
		</methods>
	</component>

  Which is equivalent to

	<component>
		<methods>
			<method name="save" />
			<method name="save" signature="System.String, mscorlib" />
			<method name="save" signature="System.String, mscorlib;System.Int32, mscorlib" />
		</methods>
	</component> 

- IResource introduced (FileResource, AssemblyResource, ConfigResource and UncResource)
  which are accessible through Uris:

  - FileResource:  
    file://pathtofile 
    (For example: file://c:\mydir\file.txt)

  - AssemblyResource:  
    assembly://AssemblyName/ExtendingNamespace/filename 
    (For example: assembly://Castle.Windsor.Tests/Configuration2/include1.xml)

  - ConfigResource:  
    config://sectioname 
    (For example: config://castle will fetch the 
    <configuration><castle> entry in the configuration)

  - UncResource:  
    \\server\file 
    (For example: \\mysharedplace\myconfig.xml)

- IResource, IResourceFactory and IResourceSubSystem introduced

- Ability to use <properties> in configuration files. Usage

	<properties>	
		<prop1>prop1 value</prop1>
		<prop2>prop2 value</prop2>
	</properties>

	<facilities>
	
		<facility id="testidengine" >
			<item>#{prop1}</item>
		</facility>

		<facility id="testidengine2" >
			<item value="#{prop2}"/>
		</facility>
	
	</facilities>


- Ability to use <include> in configuration files. Usage

  Main file:

	<configuration>

		<include uri="file://include1.xml"/>

	</configuration>

  include1.xml:

	<configuration>

		<components>

			<component id="testidcomponent1">
			</component>

			<component id="testidcomponent2">
			</component>

		</components>

	</configuration>


Beta 3
======

- Bug in dependency resolution (when chained) fixed
- Better message description on exceptions related to unresolved dependencies.
- Fixed bug in AddComponentWithProperties

Beta 2  - 10/apr/2005
======

- Bug fixes

- Configuration object model separated into interpreters and sources

- AbstractFacility added


Beta 1  - 21/jan/2005
======

- Changed: from #{} to ${} - way of referencing to another component
  on the configuration.

- Added: support for dictionaries, lists and arrays on the configuration file.

  <component>
    <parameters>
      <properties>
        <dictionary>
          <item key="mykey">value</item>
        </dictionary>
      </properties>
    </parameters>
  </component>

- Added: Component Graph (used by the Remove method and to dispose the components)

- Fixed: Remove method

- Fixed: Windsor: Proxy for components with (service != impl)
