RC 3
====

- Added: Another parameters syntax, #{ kung.foo.fighting @ monkeys }
	Everything after the @ is set into an attributed called "castle.extra.information" that is avialable to the convertors
	It is _not_ used to resolve the property name.
	This allows some advance scenarios for converters.

- Added overload to ITypeConvertor that allows the object to inspect the configuration as well as the type of the parameter

- Change: Better error message when there's an exception 
  setting up properties

- Fixed IOC-25: Overrides on the configuration should be considered a non-optional dependency

  This fix changes a little the MicroKernel behavior. Now if you specify an service override
  through external configuration, it will be considered a _non-optional_ dependency

- Uri usage replaced by CustomUri which, differently than MS' Uri class, has the same
  behavior on net-1.1, net-2.0 and mono

- EventWiring Facility: now when a publisher is requested, the subscribers
  are automatically started. 
  
  The side effects are: 
  
  - when a subscriber is requested it won't be wired automatically. 
  - There no much sense in having a subscriber with a lifestyle other than singleton
  
  I'm still evaluating this idea. Sometimes wiring only when the subscriber is requested
  might make sense, but supporting both approaches is kinda hard.
  

- Applied patch by Alex Henderson <webmaster@bittercoder.com> adding
    IWindsorContainer.RemoveChildContainer(IWindsorContainer childContainer)
    and IKernel.RemoveChildKernel(IKernel kernel)

- Applied fix by Ahmed. Now defines can be used on properties nodes like

  <properties>
   <?if DEBUG?>
    <item>x</item>
   <?end?>
  </properties>

- Now with DictionaryConverter you can specify the keyType and valueType on each entry (kudos to Ahmed)

- xmlinterpreter will throw an exception if a property is not defined but referenced
using #{propertyName} syntax.(Patch from Ahmed)

- XmlProcessor refactored from XmlInterpreter (kudos to Ahmed)
  Now PI are also supported (don't forget to document this on the wiki)

- Support for nested nodes on the properties. (kudos to Ahmed)
  Example:

  <configuration>
    <properties>
       <MyComponentParams>
         <user>Joe</user>
         <pwd>Doe</pwd>
       </MyComponentParams>
     </properties>
     <components id=”MyComponent”>
       <parameters>#{ MyComponentParams }</parameters>
     </components>
  </configuration>
  
  Will result in 

     <components id=”MyComponent”>
       <parameters>
         <user>Joe</user>
         <pwd>Doe</pwd>
       </parameters>
     </components>

- Type converter for kernel components. This allows a usage like this:

  <component id="mycomp">
  
    <parameters>
      <servicelist>
        <list type="IMyService, MyAssembly">
          <item>${keytocomponent1}</item>
          <item>${keytocomponent2}</item>
        </list>
      </servicelist>
    </parameters>

- Removed support for MethodMeta on ComponentModel. The design decision here 
  is to make the facilities interested on it to extend MethodMetaInspector
  reading from a specific node.

RC 2
====

- AsyncInitializationContainer introduced. Special container flavor that installs the
  facilities and components using a background thread.

- Support for evaluation of expressions within the xml configuration (kudos to Ahmed)
  The following "statements" are supported:
  
	<define flag="DEBUG" />
	<undef flag="DEBUG"/>
	
	<if defined="DEBUG">
		component/facility nodes
	</if>
	
	<choose>
		<when defined="DEBUG">
			<component id="debug"/>
		</when>
		<when defined="Qa">
			<component id="qa"/>
		</when>
		<when defined="Prod">
			<component id="prod"/>
		</when>
		<otherwise>
			<component id="default"/>
		</otherwise>
	</choose>

- Startable facility: support to specify the attribute startable=true on the configuration

- Better error messages: now the components waiting for dependencies will recursively 
  report what they are waiting for.

- Support for custom lifestyle through configuration (kudos to Bawer Dagdeviren):

  <component id="my.component"
                   type="MyLib.MyComponent, MyLib"
                   lifestyle="custom"
                   customLifestyleType="MyLib.MyCustomLifestyle, MyLib" />

- Added Type converter for enums

- Support to associate configuration nodes to methods. Usage:

	<component>
		<methods>
			<save />
			<save signature="System.String, mscorlib" />
			<save signature="System.String, mscorlib;System.Int32, mscorlib" />
		</methods>
	</component>

  Which is equivalent to

	<component>
		<methods>
			<method name="save" />
			<method name="save" signature="System.String, mscorlib" />
			<method name="save" signature="System.String, mscorlib;System.Int32, mscorlib" />
		</methods>
	</component> 

- IResource introduced (FileResource, AssemblyResource, ConfigResource and UncResource)
  which are accessible through Uris:

  - FileResource:  
    file://pathtofile 
    (For example: file://c:\mydir\file.txt)

  - AssemblyResource:  
    assembly://AssemblyName/ExtendingNamespace/filename 
    (For example: assembly://Castle.Windsor.Tests/Configuration2/include1.xml)

  - ConfigResource:  
    config://sectioname 
    (For example: config://castle will fetch the 
    <configuration><castle> entry in the configuration)

  - UncResource:  
    \\server\file 
    (For example: \\mysharedplace\myconfig.xml)

- IResource, IResourceFactory and IResourceSubSystem introduced

- Ability to use <properties> in configuration files. Usage

	<properties>	
		<prop1>prop1 value</prop1>
		<prop2>prop2 value</prop2>
	</properties>

	<facilities>
	
		<facility id="testidengine" >
			<item>#{prop1}</item>
		</facility>

		<facility id="testidengine2" >
			<item value="#{prop2}"/>
		</facility>
	
	</facilities>


- Ability to use <include> in configuration files. Usage

  Main file:

	<configuration>

		<include uri="file://include1.xml"/>

	</configuration>

  include1.xml:

	<configuration>

		<components>

			<component id="testidcomponent1">
			</component>

			<component id="testidcomponent2">
			</component>

		</components>

	</configuration>


Beta 3
======

- Bug in dependency resolution (when chained) fixed
- Better message description on exceptions related to unresolved dependencies.
- Fixed bug in AddComponentWithProperties

Beta 2  - 10/apr/2005
======

- Bug fixes

- Configuration object model separated into interpreters and sources

- AbstractFacility added


Beta 1  - 21/jan/2005
======

- Changed: from #{} to ${} - way of referencing to another component
  on the configuration.

- Added: support for dictionaries, lists and arrays on the configuration file.

  <component>
    <parameters>
      <properties>
        <dictionary>
          <item key="mykey">value</item>
        </dictionary>
      </properties>
    </parameters>
  </component>

- Added: Component Graph (used by the Remove method and to dispose the components)

- Fixed: Remove method

- Fixed: Windsor: Proxy for components with (service != impl)
