<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="jsfunctions" xml:space="preserve">
    <value>
function monorail_formhelper_numberonly(e, exceptions, forbidalso)
{
	exceptions = exceptions.concat([8,9,13,38,39,40,46]);
	var code = e.charCode;
	if (!code) code = e.keyCode;
	if ((e.ctrlKey &amp;&amp; code == 118) || (e.ctrlKey &amp;&amp; code == 122))
	{
		return false;
	}
	if (e.ctrlKey || e.altKey) return true;
	for(var i=0; i &lt; forbidalso.length; i++) if (forbidalso[i] == code) return false;
	for(var i=0; i &lt; exceptions.length; i++) if (exceptions[i] == code) return true;
	if (code &lt;= 47 || code &gt; 57) return false;
	return true; 
}

/* 
 The scripts on this page was produced by mordechai Sandhaus - 52action.com,
 and is copyrighted . If you like this script, we encourage you to use it,
 provided that  include this note, and link to 52action.com. 
 */

function monorail_formhelper_getkeycode(e)
{
	if( typeof( e.keyCode ) == 'number'  ) 
	{
		return e.keyCode;
	} 
	else if( typeof( e.which ) == 'number' ) 
	{
		return e.which;
	} 
	else if( typeof( e.charCode ) == 'number'  ) 
	{
		return e.charCode;
	} 
	else 
	{
		return null;
	}
}

function monorail_formhelper_getevent(e)
{
	if (!e)
	{
		if (window.event)
		{
			return window.event;
		} 
		else 
		{
			return null;
		}
	}
	else
	{
		return e;
	}
}
 
function monorail_formhelper_mask(e, elem,loc,delim)
{
	e = monorail_formhelper_getevent(e);
	var keycode = monorail_formhelper_getkeycode(e);

	var locs = loc.split(',');
	var str = elem.value;
	
	for (var i = 0; i &lt;= locs.length; i++)
	{
		for (var k = 0; k &lt;= str.length; k++)
		{
			if (k == locs[i])
			{
				if (str.substring(k, k+1) != delim)
				{
					if (keycode != 8)
					{
						str = str.substring(0,k) + delim + str.substring(k,str.length);
					}
				}
			}
		}
	}
	elem.value = str
} 

/*
* Really easy field validation with Prototype
* http://tetlaw.id.au/view/javascript/really-easy-field-validation
* Andrew Tetlaw
* Version 1.5.4.1 (2007-01-05)
* 
* Copyright (c) 2007 Andrew Tetlaw
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use, copy,
* modify, merge, publish, distribute, sublicense, and/or sell copies
* of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
* 
*/
var Validator = Class.create();

Validator.prototype = {
	initialize : function(className, error, test, options) {
		if(typeof test == 'function'){
			this.options = $H(options);
			this._test = test;
		} else {
			this.options = $H(test);
			this._test = function(){return true};
		}
		this.error = error || 'Validation failed.';
		this.className = className;
	},
	test : function(v, elm) {
		return (this._test(v,elm) &amp;&amp; this.options.all(function(p){
			return Validator.methods[p.key] ? Validator.methods[p.key](v,elm,p.value) : true;
		}));
	}
}
Validator.methods = {
	pattern : function(v,elm,opt) {return Validation.get('IsEmpty').test(v) || opt.test(v)},
	minLength : function(v,elm,opt) {return v.length &gt;= opt},
	maxLength : function(v,elm,opt) {return v.length &lt;= opt},
	min : function(v,elm,opt) {return v &gt;= parseFloat(opt)}, 
	max : function(v,elm,opt) {return v &lt;= parseFloat(opt)},
	notOneOf : function(v,elm,opt) {return $A(opt).all(function(value) {
		return v != value;
	})},
	oneOf : function(v,elm,opt) {return $A(opt).any(function(value) {
		return v == value;
	})},
	is : function(v,elm,opt) {return v == opt},
	isNot : function(v,elm,opt) {return v != opt},
	equalToField : function(v,elm,opt) {return v == $F(opt)},
	notEqualToField : function(v,elm,opt) {return v != $F(opt)},
	include : function(v,elm,opt) {return $A(opt).all(function(value) {return Validation.get(value).test(v,elm);})},
	parameterIsFieldReference : function(v,elm,opt) {return opt}
}

var Validation = Class.create();

Validation.prototype = {
	initialize : function(form, options){
		this.options = Object.extend({
			onSubmit : true,
			stopOnFirst : false,
			immediate : false,
			focusOnError : true,
			useTitles : false,
			onFormValidate : function(result, form) {},
			onElementValidate : function(result, elm) {}
		}, options || {});
		this.form = $(form);
		if(this.options.onSubmit) Event.observe(this.form,'submit',this.onSubmit.bind(this),false);
		if(this.options.immediate) {
			var useTitles = this.options.useTitles;
			var elementValidateCallback = this.options.onElementValidate;
		    var createAdviceCallback = this.options.onCreateAdvice;
			Form.getElements(this.form).each(function(input) { // Thanks Mike!
				Event.observe(input, 'blur', function(ev) { Validation.validate(Event.element(ev),{useTitle : useTitles, onElementValidate : elementValidateCallback, onCreateAdvice : createAdviceCallback}); });
			});
		}
	},
	onSubmit :  function(ev){
		if(!this.validate()) Event.stop(ev);
	},
	validate : function() {
		var result = false;
		var useTitles = this.options.useTitles;
		var elementValidateCallback = this.options.onElementValidate;
		var createAdviceCallback = this.options.onCreateAdvice;
		if(this.options.stopOnFirst) {
			result = Form.getElements(this.form).all(function(elm) { return Validation.validate(elm,{useTitle : useTitles, onElementValidate : elementValidateCallback, onCreateAdvice : createAdviceCallback}); });
		} else {
			result = Form.getElements(this.form).collect(function(elm) { return Validation.validate(elm,{useTitle : useTitles, onElementValidate : elementValidateCallback, onCreateAdvice : createAdviceCallback}); }).all();
		}
		if(!result &amp;&amp; this.options.focusOnError) {
			Form.getElements(this.form).findAll(function(elm){return $(elm).hasClassName('validation-failed')}).first().focus()
		}
		this.options.onFormValidate(result, this.form);
		return result;
	},
	reset : function() {
		Form.getElements(this.form).each(Validation.reset);
	}
}

Object.extend(Validation, {
	validate : function(elm, options){
		options = Object.extend({
			useTitle : false,
			onElementValidate : function(result, elm) {},
			onCreateAdvice : function(elm) {}
		}, options || {});
		elm = $(elm);
		var cn = elm.classNames();
		return result = cn.all(function(value) {
			var test = Validation.test(value,elm,options.useTitle,options.onCreateAdvice);
			options.onElementValidate(test, elm);
			return test;
		});
	},
	test : function(name, elm, useTitle, createAdviceCallback) {
	    var v = Validation.get(name);
		var prop = '__advice'+name.camelize();
		try {
		if(Validation.isVisible(elm) &amp;&amp; !v.test($F(elm), elm)) {
			if(!elm[prop]) {
				var advice = Validation.getAdvice(name, elm);
				if(advice == null) {
				    var adviceId = Validation.getAdviceId(name, elm);
				    if (createAdviceCallback == undefined)
				    {
					    var errorMsg = useTitle ? ((elm &amp;&amp; elm.title) ? elm.title : v.error) : v.error;
					    advice = '&lt;div class="validation-advice" id="' + adviceId + '" style="display:none"&gt;' + errorMsg + '&lt;/div&gt;'
					    switch (elm.type.toLowerCase()) {
						    case 'checkbox':
						    case 'radio':
							    var p = elm.parentNode;
							    if(p) {
								    new Insertion.Bottom(p, advice);
							    } else {
								    new Insertion.After(elm, advice);
							    }
							    break;
						    default:
							    new Insertion.After(elm, advice);
				        }
				    }
				    else
				    {
				        var idPrefix = Validation.getValidatorIdPrefix(elm);
				        createAdviceCallback(adviceId, v.error, idPrefix.length &gt; 0 ? idPrefix.substring(0, idPrefix.length - 1) : '');
				    }
					advice = Validation.getAdvice(name, elm);
				}
				if(typeof Effect == 'undefined') {
					advice.style.display = 'block';
				} else {
					new Effect.Appear(advice, {duration : 1 });
				}
			}
			elm[prop] = true;
			elm.removeClassName('validation-passed');
			elm.addClassName('validation-failed');
			return false;
		} else {
			var advice = Validation.getAdvice(name, elm);
			if(advice != null) advice.hide();
			elm[prop] = '';
			elm.removeClassName('validation-failed');
			elm.addClassName('validation-passed');
			return true;
		}
		} catch(e) {
			throw(e)
		}
	},
	isVisible : function(elm) {
		while(elm.tagName != 'BODY') {
			if(!$(elm).visible()) return false;
			elm = elm.parentNode;
		}
		return true;
	},
	getAdvice : function(name, elm) {
		return $(Validation.getAdviceId(name, elm)) || $('advice-' + Validation.getElmID(elm));
	},
	getAdviceId : function(name, elm) {
	    try {
	        var parameterizedValidatorName = Validation.getParameterizedValidatorName(name);
	        var validatorParameter = Validation.getValidatorParameter(elm, parameterizedValidatorName);
	        var idPrefix = Validation.getValidatorIdPrefix(elm);
	        var parameterIsFieldReference = Validation.parameterizedMethods[parameterizedValidatorName].options.find(function(option) {
	            return option.key == 'parameterIsFieldReference';
	        });
	        
	        if ((parameterIsFieldReference == undefined) || (parameterIsFieldReference.value == false))
                idPrefix = '';
                
	        return 'advice-' + parameterizedValidatorName + '-' + idPrefix + validatorParameter + '-' + Validation.getElmID(elm);
	    }
	    catch (e) {
	        return 'advice-' + name + '-' + Validation.getElmID(elm);
	    }
	},
	getElmID : function(elm) {
		return elm.id ? elm.id : elm.name;
	},
	reset : function(elm) {
		elm = $(elm);
		var cn = elm.classNames();
		cn.each(function(value) {
			var prop = '__advice'+value.camelize();
			if(elm[prop]) {
				var advice = Validation.getAdvice(value, elm);
				advice.hide();
				elm[prop] = '';
			}
			elm.removeClassName('validation-failed');
			elm.removeClassName('validation-passed');
		});
	},
	add : function(className, error, test, options) {
		var nv = {};
		nv[className] = new Validator(className, error, test, options);
		Object.extend(Validation.methods, nv);
	},
	addParameterized : function(className, error, test, options) {
		var nv = {};
		nv[className] = new Validator(className, error, test, options);
		Object.extend(Validation.parameterizedMethods, nv);
	},
	addAllThese : function(validators) {
		var nv = {};
		$A(validators).each(function(value) {
				nv[value[0]] = new Validator(value[0], value[1], value[2], (value.length &gt; 3 ? value[3] : {}));
			});
		Object.extend(Validation.methods, nv);
	},
	addAllTheseParameterized : function(validators) {
		var nv = {};
		$A(validators).each(function(value) {
				nv[value[0]] = new Validator(value[0], value[1], value[2], (value.length &gt; 3 ? value[3] : {}));
			});
		Object.extend(Validation.parameterizedMethods, nv);
	},
	get : function(validatorName) {
	    if (Object.keys(Validation.methods).indexOf(validatorName) != -1)
	        return Validation.methods[validatorName];
	    
	    try {
	        var parameterizedValidatorName = Validation.getParameterizedValidatorName(validatorName);
    	    
	        if (Object.keys(Validation.parameterizedMethods).indexOf(parameterizedValidatorName) != -1)
	            return Validation.parameterizedMethods[parameterizedValidatorName];
	    }
	    catch(e) {}
	    
	    return Validation.methods['_LikeNoIDIEverSaw_'];
	    
	    //try { method = Validation.parameterizedMethods[Validation.getParameterizedValidatorName(validatorName)]; }
	    //catch (e) { method = Validation.methods['_LikeNoIDIEverSaw_']; }

	    //return method;
	},
	methods : {
		'_LikeNoIDIEverSaw_' : new Validator('_LikeNoIDIEverSaw_','',{})
	},
	parameterizedMethods : {
	},
	getValidatorParameter : function(elm, validator) {
	    var validatorClass = elm.classNames().find(function(className) { return className.indexOf(validator) != -1; });
        return validatorClass.substring(validator.length + 1);
	},
	getParameterizedValidatorName : function(name) {
	    var validatorName;
	    Object.keys(Validation.parameterizedMethods).each(function(key) { if (name.indexOf(key) == 0) validatorName = key; });
	    
	    if (validatorName != undefined)
	        return validatorName;
	    else
	        throw 'Could not find parameterized validator name: ' + name;
	},
	getValidatorIdPrefix : function(elm) {
	    var prefixClass = elm.classNames().find(function(className) { return className.indexOf('validator-id-prefix') != -1; });
        return (prefixClass != undefined) ? prefixClass.substring('validator-id-prefix-'.length) : '';
	}
});

Validation.add('IsEmpty', '', function(v) {
				return  ((v == null) || (v.length == 0)); // || /^\s+$/.test(v));
			});

Validation.addAllThese([
	['required', 'This is a required field.', function(v) {
				return !Validation.get('IsEmpty').test(v);
			}],
	['validate-number', 'Please enter a valid number in this field.', function(v) {
				return Validation.get('IsEmpty').test(v) || (!isNaN(v) &amp;&amp; !/^\s+$/.test(v));
			}],
	['validate-digits', 'Please use numbers only in this field. please avoid spaces or other characters such as dots or commas.', function(v) {
				return Validation.get('IsEmpty').test(v) ||  !/[^\d]/.test(v);
			}],
	['validate-alpha', 'Please use letters only (a-z) in this field.', function (v) {
				return Validation.get('IsEmpty').test(v) ||  /^[a-zA-Z]+$/.test(v)
			}],
	['validate-alphanum', 'Please use only letters (a-z) or numbers (0-9) only in this field. No spaces or other characters are allowed.', function(v) {
				return Validation.get('IsEmpty').test(v) ||  !/\W/.test(v)
			}],
	['validate-date', 'Please enter a valid date.', function(v) {
				var test = new Date(v);
				return Validation.get('IsEmpty').test(v) || !isNaN(test);
			}],
	['validate-email', 'Please enter a valid email address. For example fred@domain.com .', function (v) {
				return Validation.get('IsEmpty').test(v) || /\w{1,}[@][\w\-]{1,}([.]([\w\-]{1,})){1,3}$/.test(v)
			}],
	['validate-url', 'Please enter a valid URL.', function (v) {
				return Validation.get('IsEmpty').test(v) || /^(http|https|ftp):\/\/(([A-Z0-9][A-Z0-9_-]*)(\.[A-Z0-9][A-Z0-9_-]*)+)(:(\d+))?\/?/i.test(v)
			}],
	['validate-date-au', 'Please use this date format: dd/mm/yyyy. For example 17/03/2006 for the 17th of March, 2006.', function(v) {
				if(Validation.get('IsEmpty').test(v)) return true;
				var regex = /^(\d{2})\/(\d{2})\/(\d{4})$/;
				if(!regex.test(v)) return false;
				var d = new Date(v.replace(regex, '$2/$1/$3'));
				return ( parseInt(RegExp.$2, 10) == (1+d.getMonth()) ) &amp;&amp; 
							(parseInt(RegExp.$1, 10) == d.getDate()) &amp;&amp; 
							(parseInt(RegExp.$3, 10) == d.getFullYear() );
			}],
	['validate-currency-dollar', 'Please enter a valid $ amount. For example $100.00 .', function(v) {
				// [$]1[##][,###]+[.##]
				// [$]1###+[.##]
				// [$]0.##
				// [$].##
				return Validation.get('IsEmpty').test(v) ||  /^\$?\-?([1-9]{1}[0-9]{0,2}(\,[0-9]{3})*(\.[0-9]{0,2})?|[1-9]{1}\d*(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|(\.[0-9]{1,2})?)$/.test(v)
			}],
	['validate-selection', 'Please make a selection', function(v,elm){
				return elm.options ? elm.selectedIndex &gt; 0 : !Validation.get('IsEmpty').test(v);
			}],
	['validate-one-required', 'Please select one of the above options.', function (v,elm) {
				var p = elm.parentNode;
				var options = p.getElementsByTagName('INPUT');
				return $A(options).any(function(elm) {
					return $F(elm);
				});
			}],
	['validate-checked', 'You must check this box', function(v,elm) {
				return elm.checked;
			}]
]);

Validation.addAllTheseParameterized([	
    ['validate-same-as', 'These fields must match.', function (v,elm) {
                var comparisonId = Validation.getValidatorParameter(elm, 'validate-same-as');
                var idPrefix = Validation.getValidatorIdPrefix(elm);
                
                return v == $F($(idPrefix + comparisonId));
            }, { parameterIsFieldReference : true }],
    ['validate-min-length', 'Field is too short.', function (v,elm) {
                var minimumLength = Validation.getValidatorParameter(elm, 'validate-min-length');
                
                return v.length &gt;= parseInt(minimumLength);
            }],
    ['validate-regex', 'Field has an invalid content.', function (v,elm) {
				var pattern = new RegExp('^' + Validation.getValidatorParameter(elm, 'validate-regex') + '$');
                var matches = v.match(pattern);
                if(matches) return true;
                return false;
            }]
]);</value>
  </data>
</root>
