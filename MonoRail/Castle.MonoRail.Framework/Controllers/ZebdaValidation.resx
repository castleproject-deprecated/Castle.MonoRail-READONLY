<?xml version="1.0" encoding="utf-8"?>
<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="jsfunctions" xml:space="preserve">
    <value><![CDATA[ 

/*

Zebda javascript library, version 0.3.1
 http://labs.cavorite.com/zebda
Copyright (C) 2006 Juan Manuel Caicedo

Contributors:
 - Chris Wilson http://www.christopherwilson.net

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


See http://www.gnu.org/copyleft/lesser.html for more information

*/
 
var Zebda = {
  Version: '0.3.1'
};

 

/*--------------------------------------------------------------------------*/
/*
Zebda javascript library
http://labs.cavorite.com/zebda
Copyright (C) 2006 Juan Manuel Caicedo

See zebda.js for full licence

*/

// Common functions

/**
 * Simple JSON parser
 */
if (!window.JSON){
	JSON = {
		parse: function(str){
			return eval('(' + str + ')');
		}
	};
}

/**
 * Removes trailing withspace
 */
String.prototype.trim = function(){
	return this.replace(/ /g, '');
};


/**
 * Javascript sets
 * 
 * Example:
 * var typeInSet = nodeType in set(2, 3, 4, 7, 8);
 *
 * http://laurens.vd.oever.nl/weblog/items2005/setsinjavascript/
 */
function set (){
	var result = {};
	for (var i = 0; i < arguments.length; i++){
		result[arguments[i]] = true;
	}
	return result;
}


/** 
 * Finds the position of a node
 *
 */
Element.getSiblingPosition = function(element){
	var pos = 0;
	while (element.previousSibling) {
		if (element.previousSibling.nodeType != 3){
			pos++;
		}
		element = element.previousSibling;
	}
	return pos;
};


/**
 * 
 *
 */
Element.getParentNodeByName = function(element, tagName){
	var par = element;
	while(par.tagName.toLowerCase() != tagName && par.parentNode) {
		par = par.parentNode;
	}
	return par;
};

/**
 *
 * @see    http://www.litotes.demon.co.uk/example_scripts/fastTableSort_src.html
 */
Element.getInnerText = function(element){
	if (!element || (typeof element).search(/string|undefined/) > -1)
		return element;

	if (element.innerText)
		return element.innerText;

	var rtn = '';
	var nodes = element.childNodes;
	var len = nodes.length;
	for (var i = 0; i < len; i++) {
		switch (nodes[i].nodeType) {
			case 1: //ELEMENT_NODE
				rtn += Element.getInnerText(nodes[i]);
				break;
			case 3: //TEXT_NODE
				rtn += nodes[i].nodeValue;
				break;
		}
	}
	return rtn;
};


/**
 * Sets the value of a form field
 * 
 */
Form.Element.setValue = function(element, value){
	element = $(element);
	els = ((element.tagName)) && [element] || element;

	$A(els).each(function(element){
		var elmType = element.tagName.toLowerCase();
		switch(elmType){
			case 'select':
				if (typeof(value) != 'object')
					value = [value];

				$A(element.options).each(function(opt){
					opt.selected = value.include(opt.value);
				});
				break;
			case 'input':
				if (element.type in set('radio', 'checkbox')){
					element.checked = (element.value == value);
				}else{
					element.value = value;
				}
		}
	});
}


/*--------------------------------------------------------------------------*/
/*
Zebda javascript library
http://labs.cavorite.com/zebda
Copyright (C) 2006 Juan Manuel Caicedo

See zebda.js for full licence

*/

var FormValidator = {

	/*
		Namespace prefix
	*/
	NSprefix: 'z',

	defaultOptions : {
		inline: false,
		inlineFilters: false,
		dateFormat:'m-d-yyyy',
		thousandSeparator: ',',
		decimalSeparator: '.'
	},
	
	/**
	 * Load the defined condition and filters
	 * Find all the forms with a validation rule and modify theirs onsubmit function
	 */
	init: function(){
		this._definedConditions = [];
		for (name in FormValidator.Conditions){
			this._definedConditions.push(name);
		}

		this._definedFilters = [];
		for (name in FormValidator.Filters){
			this._definedFilters.push(name);
		}

		var forms = $A(document.forms);

		//Modify onsubmit function for forms with defined rules
		forms.each(function(f){

			// attach the validators to the elements on the form
			FormValidator.initForm(f);

			f.onsubmit = function(){
				try {
					f.beforeValidate();
					if (FormValidator.validate(f)){
						return f.afterValidate();
					}else{
						return false;
					}
				} catch (e){
					return false;
				}
			};

			f.originalsubmit = f.submit; 

			f.submit = function(){
				try {
					if(f.onsubmit())
					{
						f.originalsubmit();
					}
				} catch (e){
					return false;
				}
			};

			var disp = f.getAttribute('z:display');
			f._displayFunction = (FormValidator.Display[disp] || FormValidator.Display.alert);
		});
		
		FormValidator.initializeDateCollection();
		
	},

	 /**
	 * create a datematch object (js doesn't support named captures...)
	 *
	 */
	createDateInfo :function(regex, year, month, day){
			var dateInfo 	= new Object;
		
			dateInfo.regex	= new RegExp(regex);
			dateInfo.year 	= year;
			dateInfo.month 	= month;
			dateInfo.day 	= day;
			
			return dateInfo;
	},


	/**
	 * create the date match objects
	 *
	 */
	initializeDateCollection: function(){
		this._datePatterns = [];

		this._datePatterns["dd.mm.yyyy"]	= FormValidator.createDateInfo("^\([0-3][0-9]\)\\.\([0-1][0-9]\)\\.\([0-9]{4}\)$", 3, 2, 1);
		this._datePatterns["d.m.yyyy"] 	    = FormValidator.createDateInfo("^\([0-3]?[0-9]\)\\.\([0-1]?[0-9]\)\\.\([0-9]{4}\)$", 3, 2, 1);
		this._datePatterns["dd/mm/yyyy"]	= FormValidator.createDateInfo("^\([0-3][0-9]\)\/\([0-1][0-9]\)\/\([0-9]{4}\)$", 3, 2, 1);
		this._datePatterns["d/m/yyyy"] 	    = FormValidator.createDateInfo("^\([0-3]?[0-9]\)\/\([0-1]?[0-9]\)\/\([0-9]{4}\)$", 3, 2, 1);
		this._datePatterns["dd-mm-yyyy"]	= FormValidator.createDateInfo("^\([0-3][0-9]\)\\-\([0-1][0-9]\)\\-\([0-9]{4}\)$", 3, 2, 1);
		this._datePatterns["d-m-yyyy"] 	    = FormValidator.createDateInfo("^\([0-3]?[0-9]\)\\-\([0-1]?[0-9]\)\\-\([0-9]{4}\)$", 3, 2, 1);

		this._datePatterns["mm.dd.yyyy"]	= FormValidator.createDateInfo("^\([0-1][0-9]\)\\.\([0-3][0-9]\)\\.\([0-9]{4}\)$", 3, 1, 2);
		this._datePatterns["m.d.yyyy"]  	= FormValidator.createDateInfo("^\([0-1]?[0-9]\)\\.\([0-3]?[0-9]\)\\.\([0-9]{4}\)$", 3, 1, 2);
		this._datePatterns["mm/dd/yyyy"]	= FormValidator.createDateInfo("^\([0-1][0-9]\)\/\([0-3][0-9]\)\/\([0-9]{4}\)$", 3, 1, 2);
		this._datePatterns["m/d/yyyy"] 	    = FormValidator.createDateInfo("^\([0-1]?[0-9]\)\/\([0-3]?[0-9]\)\/\([0-9]{4}\)$", 3, 1, 2);
		this._datePatterns["mm-dd-yyyy"]	= FormValidator.createDateInfo("^\([0-21][0-9]\)\\-\([0-3][0-9]\)\\-\([0-9]{4}\)$", 3, 1, 2);
		this._datePatterns["m-d-yyyy"] 	    = FormValidator.createDateInfo("^\([0-1]?[0-9]\)\\-\([0-3]?[0-9]\)\\-\([0-9]{4}\)$", 3, 1, 2);

		this._datePatterns["yyyy-mm-dd"]	= FormValidator.createDateInfo("^\([0-9]{4}\)\\-\([0-1][0-9]\)\\-\([0-3][0-9]\)$", 1, 2, 3);
		this._datePatterns["yyyy/mm/dd"]	= FormValidator.createDateInfo("^\([0-9]{4}\)\\/\([0-1][0-9]\)\\/\([0-3][0-9]\)$", 1, 2, 3);
		this._datePatterns["yyyy-m-d"] 	    = FormValidator.createDateInfo("^\([0-9]{4}\)\\-\([0-1]?[0-9]\)\\-\([0-3]?[0-9]\)$", 1, 2, 3);
		this._datePatterns["yyyy/m/d"] 	    = FormValidator.createDateInfo("^\([0-9]{4}\)\\/\([0-1]?[0-9]\)\\/\([0-3]?[0-9]\)$", 1, 2, 3);

	},


	/**
	 * Configures a form
	 *
	 */
	initForm: function(frm){

		//Validation options
		frm._options = {};
		for (opc in FormValidator.defaultOptions){
			frm._options[opc] = FormValidator.defaultOptions[opc];
		}
		opts = eval('(' + frm.getAttribute('z:options') + ')') || {};
		for (opc in opts){
			frm._options[opc] = opts[opc];
		}

		//Before and after validate functions
		if (!frm.beforeValidate){
			func = frm.getAttribute('z:beforeValidate') || 'return true';
			frm.beforeValidate = new Function(func);
		}

		if (!frm.afterValidate){
			func = frm.getAttribute('z:afterValidate') || 'return true';
			frm.afterValidate = new Function(func);
		}

		rtn = false;
		//Configure elements
		Form.getElements(frm).each(function(elm){
			FormValidator.Element.init(elm);
			if (!rtn && FormValidator.Element.hasRules(elm)){
				rtn = true;
			}
		});
		return rtn;
	},

	/**
	 * Validates a form
	 *
	 */
	validate: function(form){
		var errs = Form.getElements(form).map(FormValidator.Element.validate).flatten();
		if (errs.length > 0){
			form._displayFunction(errs);
			return false;
		}
		return true;
	},

	/**
	 * Functions for display errors
	 *
	 */
	Display: {

		/*
		 * Show inline errors.
		 * Based on examples by Cameron Adams:
		 * http://www.themaninblue.com/writing/perspective/2005/10/05/
		 */
		inline: function(errs){
			$A(document.getElementsByClassName('_zebda_message')).each(function (elm){
				elm.parentNode.removeChild(elm);
			});
			errs.map(function(e){
				var t = document.createElement('span');
				t.className = '_zebda_message correctionText warning';
				t.appendChild(document.createTextNode(e.message));
				e.element.parentNode.insertBefore(t, e.element.nextSibling);
			});
		},

		/**
		 * Show an alert with all errors
		 */
		alert: function(errs){
			alert(errs.pluck('message').join('\n'));
		}
	},

	/**
	 * Conditions for the rules
	 */
	Conditions: {

		required: function(value){
			return String(value).length > 0;
		},

		length: function(value){
			var rtn = true;
			value = (value || '');
			if (this.options.max)
				rtn = (value.length <= this.options.max);

			if (this.options.min)
				rtn = rtn && (value.length >= this.options.min);

			return rtn;
		},

		numeric: function(value){
			var rtn, val,numberTest;
			rtn = true;

			var ts = this.element.form._options.thousandSeparator;
			var ds = this.element.form._options.decimalSeparator;
		
			if(this.options.isFloat)
			{
				numberTest = new RegExp("^-?(\\d*(" + ts + "?\\d{3})*\\" + ds + "?\\d+|\\d+(" + ts + "?\\d{3})*\\" + ds + "?\\d*)$");
				if(numberTest.test(value) == false)
					return false;

				// remove the thousand separator and replace the decimal separator with an .
				value = value.replace(new RegExp( ts + "/g"), String.Empty);
				value = value.replace(ds, ".");
				
				// parse the value
				val = parseFloat(value)
			}
			else
			{
				numberTest = new RegExp("^-?\\d*$");
				if(numberTest.test(value) == false)
					return false;
				val = parseInt(value);
			}
		  
			if (isNaN(val))
				return false;

			if (!(this.options.maxValue === undefined))
				rtn = rtn && (this.options.maxValue >= val);

			if (!(this.options.minValue === undefined))
				rtn = rtn && (val >= this.options.minValue);

			return rtn;
		},

		/**
		 *
		 */
		regexp: function(value){
			var reg = (this.options.constructor == RegExp) ? this.options : this.options.exp;
			return reg.test(value);
		},

		/**
		 * Email regular expression
		 * bilou mcgyver
		 * http://www.regexlib.com/REDetails.aspx?regexp_id=333
		 */
		email: function(value){
			var expMail = /^[\w](([_\.\-\+]?[\w]+)*)@([\w]+)(([\.-]?[\w]+)*)\.([A-Za-z]{2,})$/;
			return expMail.test(value);
		},

		/**
		 * Compare current value with other element
		 * 
		 */
		compare: function(value){
			return value == $F(this.options.field);
		},

		/**
		 * Apply the rule only when a condition is satisfied
		 * TODO
		 */
		conditional: function(value){
			return false;
		},

		/**
		 * test if the value matches the default date pattern
		 * 
		 */
		date: function(value){
		
			var dateInfo = this.element.form._options.dateFormat;

			var matches = dateInfo.regex.exec(value);
			if (!matches) return false;
		
			var composedDate = new Date(matches[dateInfo.year], (matches[dateInfo.month] - 1), matches[dateInfo.day]);
		
			return ((composedDate.getMonth() == (matches[dateInfo.month] - 1)) &&
				(composedDate.getDate() == matches[dateInfo.day]) &&
				(composedDate.getFullYear() == matches[dateInfo.year]));		
		}
	},

	/**
	 * Filter for text inputs
	 *
	 */
	Filters: {
		trim: function(value){
			return FormValidator.Filters.trimleft(FormValidator.Filters.trimright(value));
		},

		trimleft: function(value){
			return new String(value).replace(/^\s+/, '');
		},

		trimright: function(value){
			return new String(value).replace(/\s+$/, '');
		},

		/**
		 * Replaces the double spaces for single space
		 *
		 */
		singlespace: function(value){
			return new String(value).replace(/(\s{2,})/g,' ');
		},

		lowercase: function(value){
			return new String(value).toLowerCase();
		},

		uppercase: function(value){
			return new String(value).toUpperCase();
		},

		numbers: function(value){
			return new String(value).replace(/([^0-9])/g, '');
		}
	}
 }

var Rule = Class.create();
Rule.prototype = {
	initialize: function(element, ruleName, options, message){
		this.condition = Prototype.K;
		this.message = (message || '');
		this.enabled = true;

		options = options || {};
		this.options = (typeof(options) == 'string') && eval('(' + options + ')') || options;
		this.element = element;

		if (typeof(ruleName) == 'string'){
			this.condition = FormValidator.Conditions[ruleName]; //no bind needed
		} else {
			this.condition = ruleName;
		}
	},

	evaluate: function(){
	    if(this.enabled == false)
	        return true;
	        
		return this['condition'].call(this, Form.Element.getValue(this.element));
	},
	
	disable: function(){
	    this.enabled = false;
	},
	enable: function(){
	    this.enabled = true;
	}
};

Rule.Conditions = {

	/**
	 * The value is required
	 */
	required: function(value){
		return value;
	},
	length: function(value){
		var rtn = true;
		value = (value || '');
		if (this.options.max)
			rtn = (value.length <= this.options.max);

		if (this.options.min)
			rtn = rtn && (value.length >= this.options.min);

		return rtn;
	}
}

var Filter = Class.create()
Filter.prototype = {
	initialize: function(element, filter, options){
		this.element = element;
		this.options = eval('(' + options + ')');
		this.evaluate = FormValidator.Filters[filter];
	}
}

FormValidator.Error = Class.create();
FormValidator.Error.prototype = {
	initialize: function(element, message){
		this.element = element;
		this.message = message;
	},

	inspect: function() {
		return '#<FormValidator.Error:element=' + this.element + ',message=' + this.message + '>';
	}
}

Object.extend(FormValidator,{Element: {
	/**
	 *
	 */
	init: function(element){
		element._rules = _definedConditions.map(function(cond){
			if (condOptions = element.getAttribute(FormValidator.NSprefix + ':' + cond)){
				var msg = (element.getAttribute(FormValidator.NSprefix + ':' + cond + '_message')
					 || element.getAttribute(FormValidator.NSprefix + ':' + 'message'));
				return new Rule(element, cond, condOptions, msg);
			}
		}).compact()

		element._filters = _definedFilters.map(function(filter){
			if (filterValue = element.getAttribute(FormValidator.NSprefix + ':filter_' + filter)){
				return new Filter(element, filter, filterValue);
			}
		}).compact()

		//Inline validation
		if (element.form._options.inline){
			Event.observe(element, 'change', function(){
				element.form['_displayFunction'](FormValidator.Element.validate(this));
				element.focus();
			})
		}

		//Inline filters
		if (element.form._options.inlineFilters){
			Event.observe(element, 'change', function(){
				FormValidator.Element.applyFilters(element);
			})
		}
	},

	addRule: function(element, rule, inline){
		element._rules.push(rule);
	},

	addFilter: function(element, filter, inline){
		element._filters.push(filter);
	},

	/**
	 * Returns true if the element has any attribute with the namespace
	 * prefix
	 */
	hasRules: function(element){
		return (element._rules || false);
	},

	/**
	 *
	 *
	 */
	getRules: function(element){
		return (element._rules || []);
	},

	getFilters: function(element){
		return (element._filters || []);
	},

	isText: function(element){
		if(element.tagName == null)
			return false;

		return ((element.tagName.toLowerCase() == 'input' &&
					(element.type.toLowerCase() in set('text','hidden','password'))) ||
					(element.tagName.toLowerCase() == 'textarea'));
	},

	/**
	 * Filter can only be applied on textboxes, passwords and textarea
	 */
	applyFilters: function(element){
		if (FormValidator.Element.isText(element)){
			FormValidator.Element.getFilters(element).each(function(filter){
				element.value = filter.evaluate(element.value)
			})
		}
	},

	/**
	 * Returns the error objects produced during the validation
	 *
	 */
	validate: function(element){
		FormValidator.Element.applyFilters(element);
		return FormValidator.Element.getRules(element).map(function(rule){
			if (!rule.evaluate())
				return new FormValidator.Error(element, rule.message);
		}).compact()
	}
}})

/*
Initialize FormValidator after the page has loaded
*/
Event.observe(window,'load',FormValidator.init);
/*--------------------------------------------------------------------------*/
]]>
</value>
  </data>
</root>
