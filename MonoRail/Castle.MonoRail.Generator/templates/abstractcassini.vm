namespace ${basename}
{
	using System;
	using System.IO;
	using System.Net;
	using System.Text;

	using NUnit.Framework;

	using Cassini;

	public abstract class AbstractCassiniTestCase
	{
		protected Server server;

		[TestFixtureSetUp]
		public void Init()
		{
			server = new Server(ObtainPort(), ObtainVirtualDir(), ObtainPhysicalDir());
			server.Start();
		}

		[TestFixtureTearDown]
		public void Terminate()
		{
			server.Stop();
		}

		protected virtual int ObtainPort()
		{
			return 8083;
		}

		protected virtual String ObtainPhysicalDir()
		{
			String path = Path.Combine( AppDomain.CurrentDomain.BaseDirectory, @"..\\${basename}" );
			return path;
		}

		protected virtual String ObtainVirtualDir()
		{
			return "/";
		}

		protected void AssertContents(String expected, HttpWebResponse response)
		{
			int size = expected.Length;
			byte[] contentsArray = new byte[size];
			response.GetResponseStream().Read(contentsArray, 0, size);
			Encoding encoding = Encoding.Default;
			String contents = encoding.GetString(contentsArray);
			Assert.AreEqual( expected, contents );
		}
		
		protected void AssertContains(String expected, HttpWebResponse response)
		{
			String len = response.GetResponseHeader("Content-Length");
			int size = Convert.ToInt32(len);
			byte[] contentsArray = new byte[ size ];
			response.GetResponseStream().Read(contentsArray, 0, size);
			Encoding encoding = Encoding.Default;
			String contents = encoding.GetString(contentsArray);
			Assert.IsTrue( contents.IndexOf(expected) >= 0 );
		}
	}
}
