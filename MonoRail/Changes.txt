Change history
--------------

Beta 5
======

** Core ** 

- ITrace and Trace property added to IRailsEngineContext (kudos to Chad Humphries)

- Hierarchy of areas support (kudos to Fabio Batista)

- PaginationHelper introduced

- Added IServerUtility.JavaScriptEscape() (kudos to Chad Humphries)

- Added DataBindAttribute.Exclude - A comma separated list of property names 
  to exclude from databinding (kudos to Chad Humphries)

- Added IResponse.BinaryWrite() and CreateCookie( HttpCookie ) overload

- Added IServerUtility.MapPath()

- Added IRailsContext.ApplicationPhysicalPath

- Added to HtmlHelper:
  - InputCheckbox
  - InputRadio
  - InputFile
  - InputButton
  - Form(action, attribtes) overload

- Support for nullable types in SmartDispatcherController, useful for
  detecting missing ValueType parameters. Works with Nullables library, still
  not working on .NET 2.0 Nullables (kudos to Fabio Batista)

  Example of use:

    // .NET 1.1
    public void CreateTicket(string name, NullableDateTime date, NullableInt32 priority)
    {
      if (name == null || name.Length == 0) throw new MissingFieldException();
      if (!date.HasValue) throw new MissingFieldException();
      if (!priority.HasValue) throw new MissingFieldException();
    }

    // .NET 2.0 (NOT WORKING YET)
    public void CreateTicket(string name, DateTime? date, int? priority)
    {
      if (name == null || name.Length == 0) throw new MissingFieldException();
      if (!date.HasValue) throw new MissingFieldException();
      if (!priority.HasValue) throw new MissingFieldException();
    }

- Broaded support for Enums. They can be specified by number or by text (kudos to Fabio Batista)

  public enum MyEnum {
    First = 1,
    Second = 2
  }
  
  <input type="hidden" name="myEnumValue" value="1" />
  <input type="hidden" name="myOtherEnumValue" value="seCoNd" />
  
  public void TestEnumValues(MyEnum myEnumValue, MyEnum myOtherEnumValue)
  {
    if (myEnumValue == MyEnum.First) // ok
    if (myOtherEnumValue == MyEnum.Second) // ok
  }

- Support for smart arrays (aside from primitives) (kudos do Ahmed)

  Quoting the explanation:
  
Suppose you have this class:

 
class Person
{
  public string Name {get;set;}

  public int Age {get;set;}
}

With the following view 

  <input name="Person[0].Name"   value="John">
  <input name="Person[0].Age"    value="30">
  <input name="Person[1].Name"   value="Mary">
  <input name="Person[1].Age"    value="25">

Now you can specify the DataBinderAttribute to an array element in your controller:

public void SavePeople( [DataBinder(Prefix=”People”)] Person[] people )
{
  // you should be able to access the people as an Person array

  Assert.IsTrue( people[0].Name == “John” );
  Assert.IsTrue( people[1].Name == “Mary” );
}

There are a couple extra things, first you can specify an “ignore” attribute to any element in which that case the data binder will completely ignore the element

  <input name="Person[0].Name"   value="John">
  <input name="Person[0].Age"    value="30">
  <input name="Person[0]@ignore" value="yes">
  <input name="Person[1].Name"   value="Mary">
  <input name="Person[1].Age"    value="25">

In the previous html code, the people array in the controller will only have one element (Mary).

Notice that I reserved the @ sign as a special character to add metadata to any element, right now the only attributes supported are “ignore” and “count”.

The count attribute serves as a performance optimization when your elements are keyed using sequential integers, for example:

  <input name="Person@count"   value="5">
  <input name="Person[0].Name" value="John">
  <input name="Person[1].Name" value="James">
  <input name="Person[2].Name" value="Jeff">
  <input name="Person[3].Name" value="Geoff">
  <input name="Person[4].Name" value="Jeffrey">

   


** Scaffolding support **

- huge refactoring
- It's now using templates


** Test support **

- Introduced Castle.MonoRail.TestSupport


** Bug fixes **

MR-68	PreSendView is not being invoked by NVelocityViewEngine
        http://support.castleproject.org/jira/browse/MR-68
MR-66	DataBinder and ConvertUtils should support TypeConverters
        http://support.castleproject.org/jira/browse/MR-66
MR-64	DataBinder.Convert should support decimal
        http://support.castleproject.org/jira/browse/MR-64
MR-58	AbstractHelper generates invalid XHTML
        http://support.castleproject.org/jira/browse/MR-58
MR-57	Wrong urls are crashing UrlTokenizer
        http://support.castleproject.org/jira/browse/MR-57
MR-49	Remove public properties from the list of available actions (Controller.cs)
        http://support.castleproject.org/jira/browse/MR-49
MR-30	MR should not accept incorrect urls
        http://support.castleproject.org/jira/browse/MR-30


Beta 4
======

- Added useWindsorIntegration attribute to monoRail configuration section

Beta 3
======

- Databind
- Initial Scaffolding support
- Routing feature
- Localization support
- More helpers and improvements


Beta 2
====== 

- Few bug corrections
- Applied patch from Dru Sellers: NVelocityViewEngine adds a $siteRoot exposing the Request.ApplicationPath

