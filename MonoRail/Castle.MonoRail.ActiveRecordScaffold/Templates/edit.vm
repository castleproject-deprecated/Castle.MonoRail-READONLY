$ValidationHelper.InstallScripts()

<h2>Edit ${model.Type.Name}</h2>

<ul id="errors">
#if($flash.errors)
#foreach($error in $flash.errors)
  <li>$error</li>
#end
#end
</ul>

#set ($validatorForm = "return validateForm( this, false, false, false, true, 16 )" )

#if($useModelName)
$PresentationHelper.Form( "update${model.Type.Name}", "scaffoldingform", "post", $validatorForm )
#else
$PresentationHelper.Form( "update", "scaffoldingform", "post", $validatorForm )
#end

$HtmlHelper.HiddenField("${prefix}.${keyprop.Name}")

<div id="scaffoldmain">

#foreach($model in $HtmlHelper.GetModelHierarchy($model, $instance))

#if($model.IsNestedType)
  $HtmlHelper.FieldSet("${model.Type.Name}:")
#end

#foreach($field in $model.Fields)
#if($HtmlHelper.CanHandle($field))
<p>$HtmlHelper.CreateControl($model, $prefix, $field, $instance)</p>
#end
#end

#foreach($prop in $model.Properties)
#if($HtmlHelper.CanHandle($prop))
<p>$HtmlHelper.CreateControl($model, $prefix, $prop, $instance)</p>
#end
#end

#foreach($prop in $model.NotMappedProperties)
#if($HtmlHelper.CanHandle($prop))
<p>$HtmlHelper.CreateControl($model, $prefix, $prop, $instance)</p>
#end
#end

#foreach($prop in $model.BelongsTo)
#if($HtmlHelper.CanHandle($prop))
<p>$HtmlHelper.CreateControl($model, $prefix, $prop, $instance)</p>
#end
#end

#foreach($prop in $model.HasMany)
#if($HtmlHelper.CanHandle($prop))
<p>$HtmlHelper.CreateControl($model, $prefix, $prop, $instance)</p>
#end
#end

#foreach($prop in $model.HasAndBelongsToMany)
#if($HtmlHelper.CanHandle($prop))
<p valign="top">$HtmlHelper.CreateControl($model, $prefix, $prop, $instance)</p>
#end
#end

#if($model.IsNestedType)
  $HtmlHelper.EndFieldSet()
#end

#end

<input type="submit" value="Save Changes" />

</div>

<p>
$PresentationHelper.LinkToBack("Back", null) | $PresentationHelper.LinkToList($model, $useModelName, "List", null)
</p>

</form>
