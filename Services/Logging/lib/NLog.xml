<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NLog</name>
    </assembly>
    <members>
        <member name="T:NLog.Config.AcceptsLayoutAttribute">
            <summary>
            Attribute used to mark string parameters that accept layouts.
            </summary>
        </member>
        <member name="M:NLog.Config.AcceptsLayoutAttribute.#ctor">
            <summary>
            Creates a new instance of AcceptsLayoutAttribute
            </summary>
        </member>
        <member name="T:NLog.Config.ArrayParameterAttribute">
            <summary>
            Used to mark configurable parameters which are arrays. 
            Specifies the mapping between XML elements and .NET types.
            </summary>
        </member>
        <member name="M:NLog.Config.ArrayParameterAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of ArrayParameterAttribute specifying the
            element type and configuration element name.
            </summary>
            <param name="itemType">The type of the array item</param>
            <param name="elementName">The XML element name that represents the item.</param>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ItemType">
            <summary>
            The .NET type of the array item
            </summary>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ElementName">
            <summary>
            The XML element name.
            </summary>
        </member>
        <member name="T:NLog.Config.ConfigSectionHandler">
            <summary>
            NLog configuration section handler class for configuring NLog from App.config
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingConfiguration">
            <summary>
            Keeps logging configuration and provides simple API
            to modify it.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.#ctor">
            <summary>
            Creates new instance of LoggingConfiguration object.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddTarget(System.String,NLog.Target)">
            <summary>
            Registers the specified target object under a given name.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="target">The target object.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FindTargetByName(System.String)">
            <summary>
            Finds the target with the specified name.
            </summary>
            <param name="name">The name of the target to be found.</param>
            <returns>Found target or <see langword="null" /> when the target is not found.</returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Reload">
            <summary>
            Called by LogManager when one of the log configuration files changes.
            </summary>
            <returns>A new instance of <see cref="T:NLog.Config.LoggingConfiguration"/> that represents the updated configuration.</returns>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.LoggingRules">
            <summary>
            The collection of logging rules
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.FileNamesToWatch">
            <summary>
            A collection of file names which should be watched for changes by NLog.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingRule">
            <summary>
            Represents a logging rule. An equivalent of &lt;logger /&gt; configuration element.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.ToString">
            <summary>
            Returns a string representation of <see cref="T:NLog.Config.LoggingRule"/>. Used for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NLog.Config.LoggingRule"/>.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.LogLevel,NLog.Target)">
            <summary>
            Initializes a new instance of <see cref="T:NLog.Config.LoggingRule"/> by
            setting the logger name pattern, minimum logging level and 
            the target to be written to when logger name and log level match.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="target">Target to be written to when the rule matches.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.Target)">
            <summary>
            Initializes a new instance of <see cref="T:NLog.Config.LoggingRule"/> by
            setting the logger name pattern and 
            the target to be written to when logger name matches.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="target">Target to be written to when the rule matches.</param>
            <remarks>By default no logging levels are defined. You should call <see cref="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)"/> and <see cref="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)"/> to set them.</remarks>
        </member>
        <member name="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Enables logging for a particular level.
            </summary>
            <param name="level">Level to be enabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Disables logging for a particular level.
            </summary>
            <param name="level">Level to be disabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.IsLoggingEnabledForLevel(NLog.LogLevel)">
            <summary>
            Checks whether te particular log level is enabled for this rule.
            </summary>
            <param name="level">Level to be checked</param>
            <returns><see langword="true"/> when the log level is enabled, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.NameMatches(System.String)">
            <summary>
            Checks whether given name matches the logger name pattern.
            </summary>
            <param name="loggerName">String to be matched</param>
            <returns><see langword="true"/> when the name matches, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="P:NLog.Config.LoggingRule.Targets">
            <summary>
            A collection of targets that should be written to when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.ChildRules">
            <summary>
            A collection of child rules to be evaluated when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Filters">
            <summary>
            A collection of filters to be checked before writing to targets.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Final">
            <summary>
            Quit processing any further rule when this one matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.LoggerNamePattern">
            <summary>
            Logger name pattern.
            </summary>
            <remarks>
            Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends but not anywhere else.
            </remarks>
        </member>
        <member name="T:NLog.Config.LoggingRuleCollection">
            <summary>
            A collection of elements of type LoggingRule
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.#ctor">
            <summary>
            Initializes a new empty instance of the LoggingRuleCollection class.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.#ctor(NLog.Config.LoggingRule[])">
            <summary>
            Initializes a new instance of the LoggingRuleCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.#ctor(NLog.Config.LoggingRuleCollection)">
            <summary>
            Initializes a new instance of the LoggingRuleCollection class, containing elements
            copied from another instance of LoggingRuleCollection
            </summary>
            <param name="items">
            The LoggingRuleCollection whose elements are to be added to the new LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.AddRange(NLog.Config.LoggingRule[])">
            <summary>
            Adds the elements of an array to the end of this LoggingRuleCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.AddRange(NLog.Config.LoggingRuleCollection)">
            <summary>
            Adds the elements of another LoggingRuleCollection to the end of this LoggingRuleCollection.
            </summary>
            <param name="items">
            The LoggingRuleCollection whose elements are to be added to the end of this LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Add(NLog.Config.LoggingRule)">
            <summary>
            Adds an instance of type LoggingRule to the end of this LoggingRuleCollection.
            </summary>
            <param name="value">
            The LoggingRule to be added to the end of this LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Contains(NLog.Config.LoggingRule)">
            <summary>
            Determines whether a specfic LoggingRule value is in this LoggingRuleCollection.
            </summary>
            <param name="value">
            The LoggingRule value to locate in this LoggingRuleCollection.
            </param>
            <returns>
            true if value is found in this LoggingRuleCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.IndexOf(NLog.Config.LoggingRule)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this LoggingRuleCollection
            </summary>
            <param name="value">
            The LoggingRule value to locate in the LoggingRuleCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Insert(System.Int32,NLog.Config.LoggingRule)">
            <summary>
            Inserts an element into the LoggingRuleCollection at the specified index
            </summary>
            <param name="index">
            The index at which the LoggingRule is to be inserted.
            </param>
            <param name="value">
            The LoggingRule to insert.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Remove(NLog.Config.LoggingRule)">
            <summary>
            Removes the first occurrence of a specific LoggingRule from this LoggingRuleCollection.
            </summary>
            <param name="value">
            The LoggingRule value to remove from this LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this LoggingRuleCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Config.LoggingRuleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the LoggingRule at the given index in this LoggingRuleCollection.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingRuleCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by LoggingRuleCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Enumerator.#ctor(NLog.Config.LoggingRuleCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Enumerator.MoveNext">
            <summary>
            Advances to the next object.
            </summary>
            <returns>A <see cref="M:NLog.Config.LoggingRuleCollection.Enumerator.MoveNext"/> result</returns>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Enumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRuleCollection.Enumerator.Current">
            <summary>
            Returns the current object.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRuleCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current object.
            </summary>
        </member>
        <member name="T:NLog.Config.RequiredParameterAttribute">
            <summary>
            Attribute used to mark the required parameters for targets,
            layout targets and filters.
            </summary>
        </member>
        <member name="M:NLog.Config.RequiredParameterAttribute.#ctor">
            <summary>
            Creates a new RequiredParameterAttribute object.
            </summary>
        </member>
        <member name="T:NLog.Config.SimpleConfigurator">
            <summary>
            Provides simple programmatic configuration API used for trivial logging cases.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info"/> level are output to the console.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging(NLog.LogLevel)">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the specified level are output to the console.
            </summary>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info"/> level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String,NLog.LogLevel)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the specified level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="T:NLog.Config.XmlLoggingConfiguration">
            <summary>
            A class for configuring NLog through an XML configuration file 
            (App.config style or App.nlog style)
            </summary>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Config.XmlLoggingConfiguration"/>
            class and reads the configuration from the specified config file.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Config.XmlLoggingConfiguration"/>
            class and reads the configuration from the specified XML element.
            </summary>
            <param name="configElement"><see cref="T:System.Xml.XmlElement"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.Reload">
            <summary>
            Re-reads the original configuration file and returns the new <see cref="T:NLog.Config.LoggingConfiguration"/> object.
            </summary>
            <returns>The new <see cref="T:NLog.Config.XmlLoggingConfiguration"/> object.</returns>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AutoReload">
            <summary>
            Gets or sets the value indicating whether the configuration files
            should be watched for changes and reloaded automatically when changed.
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.FileNamesToWatch">
            <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            This is the list of configuration files processed.
            If the <c>autoReload</c> attribute is not set it returns null.
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AppConfig">
            <summary>
            Gets the default <see cref="T:NLog.Config.LoggingConfiguration"/> object by parsing 
            the application configuration file (<c>app.exe.config</c>).
            </summary>
        </member>
        <member name="T:NLog.Filters.LayoutBasedFilter">
            <summary>
            A base class for filters that are based on comparing a value to a layout.
            </summary>
        </member>
        <member name="T:NLog.Filter">
            <summary>
            An abstract filter class. Provides a way to eliminate log messages
            based on properties other than logger name and log level.
            </summary>
        </member>
        <member name="M:NLog.Filter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLog.Filter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.FilterResult.Log"/> - if the log event should be logged<br/>
            </returns>
        </member>
        <member name="M:NLog.Filter.NeedsStackTrace">
            <summary>
            Determines whether stack trace information should be gathered
            during log event processing. 
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="P:NLog.Filter.Result">
            <summary>
            The <see cref="T:NLog.FilterResult"/> value that should be returned 
            when this filter matches.
            </summary>
        </member>
        <member name="P:NLog.Filter.Action">
            <summary>
            User-requested action to be taken when filter matches.
            </summary>
            <remarks>
            Allowed values are <c>log</c>, <c>ignore</c>, <c>neutral</c>.
            </remarks>
        </member>
        <member name="M:NLog.Filters.LayoutBasedFilter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NLog.Filters.LayoutBasedFilter"/>.
            </summary>
        </member>
        <member name="M:NLog.Filters.LayoutBasedFilter.NeedsStackTrace">
            <summary>
            Determines whether stack trace information should be gathered
            during log event processing. By default it calls <see cref="M:NLog.Layout.NeedsStackTrace"/> on
            <see cref="P:NLog.Target.CompiledLayout"/>.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="P:NLog.Filters.LayoutBasedFilter.Layout">
            <summary>
            The layout text;
            </summary>
        </member>
        <member name="P:NLog.Filters.LayoutBasedFilter.CompiledLayout">
            <summary>
            Compiled layout.
            </summary>
        </member>
        <member name="T:NLog.Filters.WhenContainsFilter">
            <summary>
            Matches when the calculated layout contains the specified substring.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenContainsFilter.#ctor">
            <summary>
            Initializes a new instance of the filter object.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.FilterResult.Log"/> - if the log event should be logged<br/>
            </returns>
        </member>
        <member name="P:NLog.Filters.WhenContainsFilter.Substring">
            <summary>
            Substring to be matched.
            </summary>
        </member>
        <member name="T:NLog.Filters.WhenEqualsFilter">
            <summary>
            Matches when the calculated layout is equal to the specified substring.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenEqualsFilter.#ctor">
            <summary>
            Initializes a new instance of the filter object.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenEqualsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.FilterResult.Log"/> - if the log event should be logged<br/>
            </returns>
        </member>
        <member name="P:NLog.Filters.WhenEqualsFilter.CompareTo">
            <summary>
            String to compare the layout to.
            </summary>
        </member>
        <member name="T:NLog.Filters.WhenNotContainsFilter">
            <summary>
            Matches when the calculated layout does NOT contain the specified substring.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotContainsFilter.#ctor">
            <summary>
            Initializes a new instance of the filter object.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.FilterResult.Log"/> - if the log event should be logged<br/>
            </returns>
        </member>
        <member name="P:NLog.Filters.WhenNotContainsFilter.Substring">
            <summary>
            Substring to be matched.
            </summary>
        </member>
        <member name="T:NLog.Filters.WhenNotEqualFilter">
            <summary>
            Matches when the calculated layout is NOT equal to the specified substring.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.#ctor">
            <summary>
            Initializes a new instance of the filter object.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.FilterResult.Log"/> - if the log event should be logged<br/>
            </returns>
        </member>
        <member name="P:NLog.Filters.WhenNotEqualFilter.CompareTo">
            <summary>
            String to compare the layout to.
            </summary>
        </member>
        <member name="T:NLog.Internal.LayoutRendererDictionary">
            <summary>
            A dictionary with keys of type string and values of type LayoutRenderer
            </summary>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the LayoutRendererDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.Add(System.String,NLog.LayoutRenderer)">
            <summary>
            Adds an element with the specified key and value to this LayoutRendererDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The LayoutRenderer value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.Contains(System.String)">
            <summary>
            Determines whether this LayoutRendererDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this LayoutRendererDictionary.
            </param>
            <returns>
            true if this LayoutRendererDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this LayoutRendererDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this LayoutRendererDictionary.
            </param>
            <returns>
            true if this LayoutRendererDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.ContainsValue(NLog.LayoutRenderer)">
            <summary>
            Determines whether this LayoutRendererDictionary contains a specific value.
            </summary>
            <param name="value">
            The LayoutRenderer value to locate in this LayoutRendererDictionary.
            </param>
            <returns>
            true if this LayoutRendererDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this LayoutRendererDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.LayoutRendererDictionary.Item(System.String)">
            <summary>
            Gets or sets the LayoutRenderer associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.LayoutRendererDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this LayoutRendererDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.LayoutRendererDictionary.Values">
            <summary>
            Gets a collection containing the values in this LayoutRendererDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.FilterDictionary">
            <summary>
            A dictionary with keys of type string and values of type Filter
            </summary>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the FilterDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.Add(System.String,NLog.Filter)">
            <summary>
            Adds an element with the specified key and value to this FilterDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The Filter value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.Contains(System.String)">
            <summary>
            Determines whether this FilterDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this FilterDictionary.
            </param>
            <returns>
            true if this FilterDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this FilterDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this FilterDictionary.
            </param>
            <returns>
            true if this FilterDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.ContainsValue(NLog.Filter)">
            <summary>
            Determines whether this FilterDictionary contains a specific value.
            </summary>
            <param name="value">
            The Filter value to locate in this FilterDictionary.
            </param>
            <returns>
            true if this FilterDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this FilterDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.FilterDictionary.Item(System.String)">
            <summary>
            Gets or sets the Filter associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.FilterDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this FilterDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.FilterDictionary.Values">
            <summary>
            Gets a collection containing the values in this FilterDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.HttpNetworkSender">
            <summary>
            Sends one-way messages over the HTTP protocol.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSender">
            <summary>
            A base class for all network senders. Supports one-way sending of messages
            over various protocols.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSender.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Internal.NetworkSender"/> and initializes
            it with the specified URL.
            </summary>
            <param name="url">URL.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSender.Create(System.String)">
            <summary>
            Creates a new instance of the network sender based on a network URL:
            </summary>
            <param name="url">URL that determines the network sender to be created.</param>
            <returns>A newly created network sender.</returns>
            <remarks>
            If the url starts with <c>tcp://</c> - a new <see cref="T:NLog.Internal.TcpNetworkSender"/> is created.<br/>
            If the url starts with <c>udp://</c> - a new <see cref="T:NLog.Internal.UdpNetworkSender"/> is created.<br/>
            If the url starts with <c>http://</c> or <c>https://</c>- a new <see cref="T:NLog.Internal.HttpNetworkSender"/> is created.<br/>
            </remarks>
        </member>
        <member name="M:NLog.Internal.NetworkSender.Close">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSender.Send(System.String,System.Boolean)">
            <summary>
            Send the given text over the specified protocol optionally using asynchronous invocation.
            </summary>
            <param name="text">Text to be sent.</param>
            <param name="async">Use asynchronous invocation (ignored yet).</param>
        </member>
        <member name="M:NLog.Internal.NetworkSender.DoSend(System.String)">
            <summary>
            Actually sends the given text over the specified protocol.
            </summary>
            <param name="text">The text to be sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="M:NLog.Internal.NetworkSender.Dispose">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
        </member>
        <member name="P:NLog.Internal.NetworkSender.Address">
            <summary>
            The address of the network endpoint.
            </summary>
        </member>
        <member name="M:NLog.Internal.HttpNetworkSender.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Internal.HttpNetworkSender"/> and initializes
            it with the specified URL.
            </summary>
            <param name="url">URL. Must start with http:// or https://</param>
        </member>
        <member name="M:NLog.Internal.HttpNetworkSender.DoSend(System.String)">
            <summary>
            Sends the given text over HTTP.
            </summary>
            <param name="text">The text to be sent.</param>
            <remarks>The method uses HTTP <c>POST</c> method to connect to the server.</remarks>
        </member>
        <member name="T:NLog.Internal.InternalLogger">
            <summary>
            NLog internal logger
            </summary>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the specified message at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Log(NLog.LogLevel,System.String)">
            <summary>
            Logs the specified message at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the Debug level.
            </summary>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Debug level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Debug(System.String)">
            <summary>
            Logs the specified message at the Debug level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the Info level.
            </summary>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Info level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Info(System.String)">
            <summary>
            Logs the specified message at the Info level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the Warn level.
            </summary>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Warn(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Warn level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Warn(System.String)">
            <summary>
            Logs the specified message at the Warn level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the Error level.
            </summary>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Error level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Error(System.String)">
            <summary>
            Logs the specified message at the Error level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the Fatal level.
            </summary>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Fatal level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Fatal(System.String)">
            <summary>
            Logs the specified message at the Fatal level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="P:NLog.Internal.InternalLogger.LogLevel">
            <summary>
            Internal log level.
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.LogToConsole">
            <summary>
            Log internal messages to the console.
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.LogFile">
            <summary>
            The name of the internal log file.
            </summary>
            <remarks><see langword="null" /> value disables internal logging to a file.</remarks>
        </member>
        <member name="P:NLog.Internal.InternalLogger.IsDebugEnabled">
            <summary>
            Returns true when internal log level includes Debug messages
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.IsInfoEnabled">
            <summary>
            Returns true when internal log level includes Info messages
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.IsWarnEnabled">
            <summary>
            Returns true when internal log level includes Warn messages
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.IsErrorEnabled">
            <summary>
            Returns true when internal log level includes Error messages
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.IsFatalEnabled">
            <summary>
            Returns true when internal log level includes Fatal messages
            </summary>
        </member>
        <member name="T:NLog.Internal.LoggerDictionary">
            <summary>
            A dictionary with keys of type string and values of type Logger
            </summary>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the LoggerDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.Add(System.String,NLog.Logger)">
            <summary>
            Adds an element with the specified key and value to this LoggerDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The Logger value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.Contains(System.String)">
            <summary>
            Determines whether this LoggerDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this LoggerDictionary.
            </param>
            <returns>
            true if this LoggerDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this LoggerDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this LoggerDictionary.
            </param>
            <returns>
            true if this LoggerDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.ContainsValue(NLog.Logger)">
            <summary>
            Determines whether this LoggerDictionary contains a specific value.
            </summary>
            <param name="value">
            The Logger value to locate in this LoggerDictionary.
            </param>
            <returns>
            true if this LoggerDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this LoggerDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.LoggerDictionary.Item(System.String)">
            <summary>
            Gets or sets the Logger associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.LoggerDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this LoggerDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.LoggerDictionary.Values">
            <summary>
            Gets a collection containing the values in this LoggerDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.PropertyInfoDictionary">
            <summary>
            A dictionary with keys of type string and values of type PropertyInfo
            </summary>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the PropertyInfoDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.Add(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Adds an element with the specified key and value to this PropertyInfoDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The PropertyInfo value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.Contains(System.String)">
            <summary>
            Determines whether this PropertyInfoDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this PropertyInfoDictionary.
            </param>
            <returns>
            true if this PropertyInfoDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this PropertyInfoDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this PropertyInfoDictionary.
            </param>
            <returns>
            true if this PropertyInfoDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.ContainsValue(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether this PropertyInfoDictionary contains a specific value.
            </summary>
            <param name="value">
            The PropertyInfo value to locate in this PropertyInfoDictionary.
            </param>
            <returns>
            true if this PropertyInfoDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this PropertyInfoDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.PropertyInfoDictionary.Item(System.String)">
            <summary>
            Gets or sets the PropertyInfo associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.PropertyInfoDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this PropertyInfoDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.PropertyInfoDictionary.Values">
            <summary>
            Gets a collection containing the values in this PropertyInfoDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.TargetDictionary">
            <summary>
            A dictionary with keys of type string and values of type Target
            </summary>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the TargetDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.Add(System.String,NLog.Target)">
            <summary>
            Adds an element with the specified key and value to this TargetDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The Target value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.Contains(System.String)">
            <summary>
            Determines whether this TargetDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this TargetDictionary.
            </param>
            <returns>
            true if this TargetDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this TargetDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this TargetDictionary.
            </param>
            <returns>
            true if this TargetDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.ContainsValue(NLog.Target)">
            <summary>
            Determines whether this TargetDictionary contains a specific value.
            </summary>
            <param name="value">
            The Target value to locate in this TargetDictionary.
            </param>
            <returns>
            true if this TargetDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this TargetDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.TargetDictionary.Item(System.String)">
            <summary>
            Gets or sets the Target associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.TargetDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this TargetDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.TargetDictionary.Values">
            <summary>
            Gets a collection containing the values in this TargetDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.TcpNetworkSender">
            <summary>
            Sends messages over a TCP network connection.
            </summary>
        </member>
        <member name="M:NLog.Internal.TcpNetworkSender.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Internal.TcpNetworkSender"/> and initializes
            it with the specified URL. Connects to the server specified in the URL.
            </summary>
            <param name="url">URL. Must start with tcp://</param>
        </member>
        <member name="M:NLog.Internal.TcpNetworkSender.DoSend(System.String)">
            <summary>
            Sends the specified text over the connected socket.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:NLog.Internal.TcpNetworkSender.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="T:NLog.Internal.TypeDictionary">
            <summary>
            A dictionary with keys of type string and values of type Type
            </summary>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the TypeDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.Add(System.String,System.Type)">
            <summary>
            Adds an element with the specified key and value to this TypeDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The Type value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.Contains(System.String)">
            <summary>
            Determines whether this TypeDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this TypeDictionary.
            </param>
            <returns>
            true if this TypeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this TypeDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this TypeDictionary.
            </param>
            <returns>
            true if this TypeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.ContainsValue(System.Type)">
            <summary>
            Determines whether this TypeDictionary contains a specific value.
            </summary>
            <param name="value">
            The Type value to locate in this TypeDictionary.
            </param>
            <returns>
            true if this TypeDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this TypeDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.TypeDictionary.Item(System.String)">
            <summary>
            Gets or sets the Type associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.TypeDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this TypeDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.TypeDictionary.Values">
            <summary>
            Gets a collection containing the values in this TypeDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.TypeToPropertyInfoDictionaryAssociation">
            <summary>
            A dictionary with keys of type Type and values of type PropertyInfoDictionary
            </summary>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.#ctor">
            <summary>
            Initializes a new empty instance of the TypeToPropertyInfoDictionaryAssociation class
            </summary>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Add(System.Type,NLog.Internal.PropertyInfoDictionary)">
            <summary>
            Adds an element with the specified key and value to this TypeToPropertyInfoDictionaryAssociation.
            </summary>
            <param name="key">
            The Type key of the element to add.
            </param>
            <param name="value">
            The PropertyInfoDictionary value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Contains(System.Type)">
            <summary>
            Determines whether this TypeToPropertyInfoDictionaryAssociation contains a specific key.
            </summary>
            <param name="key">
            The Type key to locate in this TypeToPropertyInfoDictionaryAssociation.
            </param>
            <returns>
            true if this TypeToPropertyInfoDictionaryAssociation contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.ContainsKey(System.Type)">
            <summary>
            Determines whether this TypeToPropertyInfoDictionaryAssociation contains a specific key.
            </summary>
            <param name="key">
            The Type key to locate in this TypeToPropertyInfoDictionaryAssociation.
            </param>
            <returns>
            true if this TypeToPropertyInfoDictionaryAssociation contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.ContainsValue(NLog.Internal.PropertyInfoDictionary)">
            <summary>
            Determines whether this TypeToPropertyInfoDictionaryAssociation contains a specific value.
            </summary>
            <param name="value">
            The PropertyInfoDictionary value to locate in this TypeToPropertyInfoDictionaryAssociation.
            </param>
            <returns>
            true if this TypeToPropertyInfoDictionaryAssociation contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Remove(System.Type)">
            <summary>
            Removes the element with the specified key from this TypeToPropertyInfoDictionaryAssociation.
            </summary>
            <param name="key">
            The Type key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Item(System.Type)">
            <summary>
            Gets or sets the PropertyInfoDictionary associated with the given Type
            </summary>
            <param name="key">
            The Type whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Keys">
            <summary>
            Gets a collection containing the keys in this TypeToPropertyInfoDictionaryAssociation.
            </summary>
        </member>
        <member name="P:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Values">
            <summary>
            Gets a collection containing the values in this TypeToPropertyInfoDictionaryAssociation.
            </summary>
        </member>
        <member name="T:NLog.Internal.UdpNetworkSender">
            <summary>
            Sends messages over the network as UDP datagrams.
            </summary>
        </member>
        <member name="M:NLog.Internal.UdpNetworkSender.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Internal.UdpNetworkSender"/> and initializes
            it with the specified URL.
            </summary>
            <param name="url">URL. Must start with udp://</param>
        </member>
        <member name="M:NLog.Internal.UdpNetworkSender.DoSend(System.String)">
            <summary>
            Sends the specified text as a UDP datagram.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:NLog.Internal.UdpNetworkSender.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ASPNETApplicationValueLayoutRenderer">
            <summary>
            ASP.NET Application variable.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderer">
            <summary>
            Render environmental information related to logging events.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.LayoutRenderer"/>
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderer.NeedsStackTrace">
            <summary>
            Determines whether stack trace information should be gathered
            during log event processing. By default it calls <see cref="M:NLog.Layout.NeedsStackTrace"/> on
            <see cref="P:NLog.Target.CompiledLayout"/>.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="M:NLog.LayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environmental information and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderer.NeedPadding">
            <summary>
            Determines whether it's necessary to call <see cref="M:NLog.LayoutRenderer.ApplyPadding(System.String)"/>.
            </summary>
            <returns><see langword="true"/> when there's any 
            trimming, padding or case conversion necessary, 
            <see langword="false"/> otherwise</returns>
            <remarks>
            Should this method return <see langword="true"/>,
            it's necessary to call ApplyPadding on a rendered text, 
            otherwise it's not necessary to do so.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderer.ApplyPadding(System.String)">
            <summary>
            Post-processes the rendered message by applying padding, 
            upper- and lower-case conversion.
            </summary>
            <param name="s">The text to be post-processed.</param>
            <returns>Padded, trimmed, and case-converted string.</returns>
        </member>
        <member name="P:NLog.LayoutRenderer.Padding">
            <summary>
            Padding value.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.AbsolutePadding">
            <summary>
            The absolute value of the <see cref="P:NLog.LayoutRenderer.Padding"/> property.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.PadCharacter">
            <summary>
            The padding character.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.FixedLength">
            <summary>
            Trim the rendered text to the AbsolutePadding value.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.UpperCase">
            <summary>
            Render an upper-case string.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.LowerCase">
            <summary>
            Render an upper-case string.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.Culture">
            <summary>
            The culture name to be used for rendering.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.CultureInfo">
            <summary>
            The <see cref="T:System.Globalization.CultureInfo"/> to be used for rendering.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETApplicationValueLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETApplicationValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETApplicationValueLayoutRenderer.Variable">
            <summary>
            The variable name.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer">
            <summary>
            ASP.NET Request variable
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Request variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.Item">
            <summary>
            The item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.QueryString">
            <summary>
            The QueryString variable to be rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.Form">
            <summary>
            The form variable to be rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.Cookie">
            <summary>
            The cookie to be rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.ServerVariable">
            <summary>
            The ServerVariables item to be rendered.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ASPNETSessionValueLayoutRenderer">
            <summary>
            ASP.NET Application variable.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETSessionValueLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETSessionValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Session value and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETSessionValueLayoutRenderer.Variable">
            <summary>
            Session variable name.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.BaseDirLayoutRenderer">
            <summary>
            The current application domain's base directory.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the application base directory and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.File">
            <summary>
            The name of the file to be Path.Combine()'d with with the base directory.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.Dir">
            <summary>
            The name of the directory to be Path.Combine()'d with with the base directory.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.CallSiteLayoutRenderer">
            <summary>
            The call site (class name, method name and source information)
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.NeedsStackTrace">
            <summary>
            Checks whether the stack trace is requested.
            </summary>
            <returns>2 when the source file information is requested, 1 otherwise.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.ClassName">
            <summary>
            Render the class name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.MethodName">
            <summary>
            Render the method name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.FileName">
            <summary>
            Render the source file name and line number.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.CounterLayoutRenderer">
            <summary>
            A counter value (increases on each layout rendering).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified counter value and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Value">
            <summary>
            The initial value of the counter
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Increment">
            <summary>
            The value to be added to the counter after each layout rendering.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Sequence">
            <summary>
            The name of the sequence. Different named sequences can have individual values.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.DateLayoutRenderer">
            <summary>
            A date and time in the specified format.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current date and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Format">
            <summary>
            The date format. Can be any argument accepted by DateTime.ToString(format)
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.EnvironmentLayoutRenderer">
            <summary>
            The environment variable.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.EnvironmentLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Variable">
            <summary>
            Name of the environment variable.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ExceptionLayoutRenderer">
            <summary>
            Exception information provided through 
            a call to one of the Logger.*Exception() methods.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NLog.LayoutRenderers.ExceptionLayoutRenderer"/>.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified exception information and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Format">
            <summary>
            The format of the output. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Separator">
            <summary>
            The separator used to concatenate parts specified in the Format.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.GuidLayoutRenderer">
            <summary>
            Globally-unique identifier (GUID).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders a newly generated GUID string and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.GuidLayoutRenderer.Format">
            <summary>
            The GUID format as accepted by Guid.ToString() method.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.IdentityLayoutRenderer">
            <summary>
            Thread identity information (name and authentication information)
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified identity information and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Separator">
            <summary>
            The separator to be used when concatenating 
            parts of identity information.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Name">
            <summary>
            Render Thread.CurrentPrincipal.Identity.Name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.AuthType">
            <summary>
            Render Thread.CurrentPrincipal.Identity.AuthenticationType.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.IsAuthenticated">
            <summary>
            Render Thread.CurrentPrincipal.Identity.IsAuthenticated.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.LevelLayoutRenderer">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LevelLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LevelLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current log level and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LiteralLayoutRenderer">
            <summary>
            A string literal.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer"/> and sets the
            literal text value.
            </summary>
            <param name="txt">The literal text value.</param>
            <remarks>This is used by the layout compiler.</remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LoggerNameLayoutRenderer">
            <summary>
            The logger name.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LoggerNameLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LoggerNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the logger name and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LongDateLayoutRenderer">
            <summary>
            The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.mmm
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LongDateLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LongDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the date in the long format (yyyy-MM-dd HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MachineNameLayoutRenderer">
            <summary>
            The machine name that the process is running on.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the machine name and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MDCLayoutRenderer">
            <summary>
            Mapped Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MDCLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.MDCLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified MDC item and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.MDCLayoutRenderer.Item">
            <summary>
            Name of the item.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.MessageLayoutRenderer">
            <summary>
            The formatted log message.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the log message including any positional parameters and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NDCLayoutRenderer">
            <summary>
            Nested Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NDCLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.NDCLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified NDC item and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.NDCLayoutRenderer.TopFrames">
            <summary>
            The number of top stack frames to be rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.NDCLayoutRenderer.BottomFrames">
            <summary>
            The number of bottom stack frames to be rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.NDCLayoutRenderer.Separator">
            <summary>
            The separator to be used for concatenating NDC output.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.NLogDirLayoutRenderer">
            <summary>
            The directory where NLog.dll is located.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.File">
            <summary>
            The name of the file to be Path.Combine()'d with the directory name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.Dir">
            <summary>
            The name of the directory to be Path.Combine()'d with the directory name.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessTimeLayoutRenderer">
            <summary>
            The process time in format HH:mm:ss.mmm
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process running time and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ShortDateLayoutRenderer">
            <summary>
            The short date in a sortable format yyyy-MM-dd
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current short date string (yyyy-MM-dd) and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadIDLayoutRenderer">
            <summary>
            The identifier of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadIDLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadIDLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread identifier and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadNameLayoutRenderer">
            <summary>
            The name of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadNameLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread name and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TicksLayoutRenderer">
            <summary>
            The Ticks value of current date and time.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TicksLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="ev">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.TicksLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ev">Logging event.</param>
        </member>
        <member name="T:NLog.Targets.ASPNetTraceTarget">
            <summary>
            Writes logging messages to the ASP.NET trace.
            </summary>
            <remarks>
            Resulting log entries can be viewed by navigating to http://server/path/Trace.axd
            </remarks>
        </member>
        <member name="T:NLog.Target">
            <summary>
            Represents logging target.
            </summary>
        </member>
        <member name="M:NLog.Target.#ctor">
            <summary>
            Creates a new instance of the logging target and initializes
            default layout.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Target.Append(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="ev">Logging event to be written out.</param>
        </member>
        <member name="M:NLog.Target.NeedsStackTrace">
            <summary>
            Determines whether stack trace information should be gathered
            during log event processing. By default it calls <see cref="M:NLog.Layout.NeedsStackTrace"/> on
            <see cref="P:NLog.Target.CompiledLayout"/>.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="M:NLog.Target.ToString">
            <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
            <returns>A string that describes the target.</returns>
        </member>
        <member name="P:NLog.Target.Name">
            <summary>
            The name of the target.
            </summary>
        </member>
        <member name="P:NLog.Target.Layout">
            <summary>
            The text to be rendered.
            </summary>
        </member>
        <member name="P:NLog.Target.CompiledLayout">
            <summary>
            The compiled layout to be rendered.
            </summary>
        </member>
        <member name="M:NLog.Targets.ASPNetTraceTarget.Append(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the ASP.NET Trace facility. Log entries
            can then be viewed by navigating to http://server/path/Trace.axd
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Warn"/> it uses the
            <see cref="M:System.Web.TraceContext.Warn(System.String)"/> method, otherwise it uses
            <see cref="M:System.Web.TraceContext.Write(System.String)"/> method.
            </summary>
            <param name="ev">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.ConsoleTarget">
            <summary>
            Writes logging messages to the console.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.Append(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the console <see cref="P:System.Console.Out"/> or
            <see cref="P:System.Console.Error"/> depending on the value of the
            <see cref="P:NLog.Targets.ConsoleTarget.Error"/> flag.
            </summary>
            <param name="ev">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.ConsoleTarget.Error">
            <summary>
            Send the logging messages to the standard error instead of the standard output.
            </summary>
        </member>
        <member name="T:NLog.Targets.DatabaseTarget">
            <summary>
            Writes logging messages to the database using an ADO.NET provider.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.DatabaseTarget"/> object and sets
            the default values of some properties;
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Append(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the database. It creates
            a new database command, prepares parameters for it by calculating
            layouts and executes the command.
            </summary>
            <param name="ev">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBProvider">
            <summary>
            The name of the database provider. It can be:
            <c>sqlserver, mssql, microsoft, msde</c> (all for MSSQL database), <c>oledb, odbc</c> or other name in which case
            it's treated as a fully qualified type name of the data provider *Connection class.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.ConnectionString">
            <summary>
            The connection string. When provided, it overrides the values
            specified in DBHost, DBUserName, DBPassword, DBDatabase.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.KeepConnection">
            <summary>
            Keep the database connection open between the log events.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.UseTransactions">
            <summary>
            Use database transactions. Some data providers require this.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBHost">
            <summary>
            The database host name. If the ConnectionString is not provided
            this value will be used to construct the "Server=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBHostLayout">
            <summary>
            The database host name. If the ConnectionString is not provided
            this value will be used to construct the "Server=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBUserName">
            <summary>
            The database user name. If the ConnectionString is not provided
            this value will be used to construct the "User ID=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBUserNameLayout">
            <summary>
            The database user name. If the ConnectionString is not provided
            this value will be used to construct the "User ID=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBPassword">
            <summary>
            The database password. If the ConnectionString is not provided
            this value will be used to construct the "Password=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBPasswordLayout">
            <summary>
            The database password. If the ConnectionString is not provided
            this value will be used to construct the "Password=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBDatabase">
            <summary>
            The database name. If the ConnectionString is not provided
            this value will be used to construct the "Database=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBDatabaseLayout">
            <summary>
            The database name. If the ConnectionString is not provided
            this value will be used to construct the "Database=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.CommandText">
            <summary>
            The text of the SQL command to be run on each log level.
            </summary>
            <remarks>
            Typically this is a SQL INSERT statement or a stored procedure call. 
            It should use the database-specific parameters (marked as <c>@parameter</c>
            for SQL server or <c>:parameter</c> for Oracle, other data providers
            have their own notation) and not the layout renderers, 
            because the latter is prone to SQL injection attacks.
            The layout renderers should be specified as &lt;parameters />&gt; instead.
            </remarks>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.CommandTextLayout">
            <summary>
            The text of the SQL command to be run on each log level.
            </summary>
            <remarks>
            Typically this is a SQL INSERT statement or a stored procedure call. 
            It should use the database-specific parameters (marked as <c>@parameter</c>
            for SQL server or <c>:parameter</c> for Oracle, other data providers
            have their own notation) and not the layout renderers, 
            because the latter is prone to SQL injection attacks.
            The layout renderers should be specified as &lt;parameters />&lt; instead.
            </remarks>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.Parameters">
            <summary>
            The collection of paramters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
        </member>
        <member name="T:NLog.Targets.DatabaseParameterInfo">
            <summary>
            Represents a parameter to a Database target.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.DatabaseParameterInfo"/>.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Name">
            <summary>
            Database parameter name.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Layout">
            <summary>
            The layout that should be use to calcuate the value for the parameter.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.CompiledLayout">
            <summary>
            The compiled representation of the Layout property.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Size">
            <summary>
            Database parameter size.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Precision">
            <summary>
            Database parameter precision.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Scale">
            <summary>
            Database parameter scale.
            </summary>
        </member>
        <member name="T:NLog.Targets.DatabaseParameterInfoCollection">
            <summary>
            A collection of elements of type DatabaseParameterInfo
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.#ctor">
            <summary>
            Initializes a new empty instance of the DatabaseParameterInfoCollection class.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.#ctor(NLog.Targets.DatabaseParameterInfo[])">
            <summary>
            Initializes a new instance of the DatabaseParameterInfoCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.#ctor(NLog.Targets.DatabaseParameterInfoCollection)">
            <summary>
            Initializes a new instance of the DatabaseParameterInfoCollection class, containing elements
            copied from another instance of DatabaseParameterInfoCollection
            </summary>
            <param name="items">
            The DatabaseParameterInfoCollection whose elements are to be added to the new DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.AddRange(NLog.Targets.DatabaseParameterInfo[])">
            <summary>
            Adds the elements of an array to the end of this DatabaseParameterInfoCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.AddRange(NLog.Targets.DatabaseParameterInfoCollection)">
            <summary>
            Adds the elements of another DatabaseParameterInfoCollection to the end of this DatabaseParameterInfoCollection.
            </summary>
            <param name="items">
            The DatabaseParameterInfoCollection whose elements are to be added to the end of this DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Add(NLog.Targets.DatabaseParameterInfo)">
            <summary>
            Adds an instance of type DatabaseParameterInfo to the end of this DatabaseParameterInfoCollection.
            </summary>
            <param name="value">
            The DatabaseParameterInfo to be added to the end of this DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Contains(NLog.Targets.DatabaseParameterInfo)">
            <summary>
            Determines whether a specfic DatabaseParameterInfo value is in this DatabaseParameterInfoCollection.
            </summary>
            <param name="value">
            The DatabaseParameterInfo value to locate in this DatabaseParameterInfoCollection.
            </param>
            <returns>
            true if value is found in this DatabaseParameterInfoCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.IndexOf(NLog.Targets.DatabaseParameterInfo)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this DatabaseParameterInfoCollection
            </summary>
            <param name="value">
            The DatabaseParameterInfo value to locate in the DatabaseParameterInfoCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Insert(System.Int32,NLog.Targets.DatabaseParameterInfo)">
            <summary>
            Inserts an element into the DatabaseParameterInfoCollection at the specified index
            </summary>
            <param name="index">
            The index at which the DatabaseParameterInfo is to be inserted.
            </param>
            <param name="value">
            The DatabaseParameterInfo to insert.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Remove(NLog.Targets.DatabaseParameterInfo)">
            <summary>
            Removes the first occurrence of a specific DatabaseParameterInfo from this DatabaseParameterInfoCollection.
            </summary>
            <param name="value">
            The DatabaseParameterInfo value to remove from this DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this DatabaseParameterInfoCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfoCollection.Item(System.Int32)">
            <summary>
            Gets or sets the DatabaseParameterInfo at the given index in this DatabaseParameterInfoCollection.
            </summary>
        </member>
        <member name="T:NLog.Targets.DatabaseParameterInfoCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by DatabaseParameterInfoCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Enumerator.#ctor(NLog.Targets.DatabaseParameterInfoCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfoCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfoCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Targets.DebugTarget">
            <summary>
            Counts logging messages but does not output them anywhere.
            </summary>
        </member>
        <member name="M:NLog.Targets.DebugTarget.Append(NLog.LogEventInfo)">
            <summary>
            Increases the number of messages.
            </summary>
            <param name="ev">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.DebugTarget.Counter">
            <summary>
            The number of times this target has been called.
            </summary>
        </member>
        <member name="P:NLog.Targets.DebugTarget.LastMessage">
            <summary>
            The last message rendered by this target.
            </summary>
        </member>
        <member name="T:NLog.Targets.FileTarget">
            <summary>
            Writes logging messages to one or more files.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.NeedsStackTrace">
            <summary>
            Determines whether stack trace information should be gathered
            during log event processing. It calls <see cref="M:NLog.Layout.NeedsStackTrace"/> on
            Layout and FileName parameters.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.Append(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to a file specified in the FileName 
            parameter.
            </summary>
            <param name="ev">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileName">
            <summary>
            The name of the file to write to.
            </summary>
            <remarks>
            This FileName string is a layout which may include instances of layout renderers.
            This lets you use a single target to write to multiple files.
            </remarks>
            <example>
            The following value makes NLog write logging events to files based on the log level in the directory where
            the application runs.
            <code>${basedir}/${level}.log</code>
            All <c>Debug</c> messages will go to <c>Debug.log</c>, all <c>Info</c> messages will go to <c>Info.log</c> and so on.
            You can combine as many of the layout renderers as you want to produce an arbitrary log file name.
            </example>
        </member>
        <member name="P:NLog.Targets.FileTarget.CreateDirs">
            <summary>
            Create directories if they don't exist.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.KeepFileOpen">
            <summary>
            Keep log file open instead of opening and closing it on each logging event.
            </summary>
            <remarks>
            Setting this property to <c>True</c> helps improve performance but is not recommended in multithreaded or multiprocess
            scenarios because the file is kept locked and other processes cannot write to it which
            effectively prevents logging.
            </remarks>
        </member>
        <member name="P:NLog.Targets.FileTarget.AutoFlush">
            <summary>
            Automatically flush the file buffers after each log message.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.BufferSize">
            <summary>
            Log file buffer size in bytes.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.Encoding">
            <summary>
            File encoding.</summary>
            <remarks>
            Can be any encoding name supported by System.Text.Encoding.GetEncoding() e.g. <c>windows-1252</c>, <c>iso-8859-2</c>.
            </remarks>
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWrites">
            <summary>
            Enables concurrent writes to the log file by multiple processes.
            </summary>
            <remarks>
            This prevents the log files from being kept open and makes NLog
            retry file writes until a write succeeds. This allows for logging in
            multiprocess environment.
            </remarks>
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts">
            <summary>
            The number of times the write is appended on the file before NLog
            discards the log message.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttemptDelay">
            <summary>
            The delay in milliseconds to wait before attempting to write to the file again.
            </summary>
            <remarks>
            The actual delay is a random value between 0 and the value specified
            in this parameter. On each failed attempt the delay base is doubled
            up to <see cref="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts"/> times.
            </remarks>
            <example>
            Assuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be:<p/>
            a random value between 0 and 10 milliseconds - 1st attempt<br/>
            a random value between 0 and 20 milliseconds - 2nd attempt<br/>
            a random value between 0 and 40 milliseconds - 3rd attempt<br/>
            a random value between 0 and 80 milliseconds - 4th attempt<br/>
            ...<p/>
            and so on.
            </example>
        </member>
        <member name="T:NLog.Targets.MemoryTarget">
            <summary>
            Writes logging messages to an ArrayList in memory for programmatic retrieval.
            </summary>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.Append(NLog.LogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="ev">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.MemoryTarget.Logs">
            <summary>
            Returns the list of logs gathered in the <see cref="T:NLog.Targets.MemoryTarget"/>.
            </summary>
        </member>
        <member name="T:NLog.Targets.MessageBoxTarget">
            <summary>
            Pops up logging messages as message boxes.
            </summary>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.MessageBoxTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.Append(NLog.LogEventInfo)">
            <summary>
            Displays the message box with the log message and caption specified in the Caption
            parameter.
            </summary>
            <param name="ev">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.MessageBoxTarget.Caption">
            <summary>
            Message box title.
            </summary>
        </member>
        <member name="T:NLog.Targets.MethodCallTarget">
            <summary>
            Calls the specified static method on each logging message and passes contextual parameters to it.
            </summary>
        </member>
        <member name="T:NLog.Targets.MethodCallTargetBase">
            <summary>
            The base class for all targets which call methods (local or remote). 
            Manages parameters and type coercion.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.Append(NLog.LogEventInfo)">
            <summary>
            Prepares an array of parameters to be passed based on the logging event and calls DoInvoke()
            </summary>
            <param name="ev">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[])">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters</param>
        </member>
        <member name="P:NLog.Targets.MethodCallTargetBase.Parameters">
            <summary>
            Array of parameters to be passed.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.DoInvoke(System.Object[])">
            <summary>
            Calls the specified Method.
            </summary>
            <param name="parameters">Method parameters.</param>
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.MethodName">
            <summary>
            The method name. The method must be public and static.
            </summary>
        </member>
        <member name="T:NLog.Targets.MethodCallParameter">
            <summary>
            A parameter to MethodCall.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Targets.MethodCallParameter"/> and sets
            the type to String.
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Type">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Layout">
            <summary>
            The layout that should be use to calcuate the value for the parameter.
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.CompiledLayout">
            <summary>
            The compiled layout that should be use to calcuate the value for the parameter.
            </summary>
        </member>
        <member name="T:NLog.Targets.MethodCallParameterCollection">
            <summary>
            A collection of elements of type MethodCallParameter
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.#ctor">
            <summary>
            Initializes a new empty instance of the MethodCallParameterCollection class.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.#ctor(NLog.Targets.MethodCallParameter[])">
            <summary>
            Initializes a new instance of the MethodCallParameterCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.#ctor(NLog.Targets.MethodCallParameterCollection)">
            <summary>
            Initializes a new instance of the MethodCallParameterCollection class, containing elements
            copied from another instance of MethodCallParameterCollection
            </summary>
            <param name="items">
            The MethodCallParameterCollection whose elements are to be added to the new MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.AddRange(NLog.Targets.MethodCallParameter[])">
            <summary>
            Adds the elements of an array to the end of this MethodCallParameterCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.AddRange(NLog.Targets.MethodCallParameterCollection)">
            <summary>
            Adds the elements of another MethodCallParameterCollection to the end of this MethodCallParameterCollection.
            </summary>
            <param name="items">
            The MethodCallParameterCollection whose elements are to be added to the end of this MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Add(NLog.Targets.MethodCallParameter)">
            <summary>
            Adds an instance of type MethodCallParameter to the end of this MethodCallParameterCollection.
            </summary>
            <param name="value">
            The MethodCallParameter to be added to the end of this MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Contains(NLog.Targets.MethodCallParameter)">
            <summary>
            Determines whether a specfic MethodCallParameter value is in this MethodCallParameterCollection.
            </summary>
            <param name="value">
            The MethodCallParameter value to locate in this MethodCallParameterCollection.
            </param>
            <returns>
            true if value is found in this MethodCallParameterCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.IndexOf(NLog.Targets.MethodCallParameter)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this MethodCallParameterCollection
            </summary>
            <param name="value">
            The MethodCallParameter value to locate in the MethodCallParameterCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Insert(System.Int32,NLog.Targets.MethodCallParameter)">
            <summary>
            Inserts an element into the MethodCallParameterCollection at the specified index
            </summary>
            <param name="index">
            The index at which the MethodCallParameter is to be inserted.
            </param>
            <param name="value">
            The MethodCallParameter to insert.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Remove(NLog.Targets.MethodCallParameter)">
            <summary>
            Removes the first occurrence of a specific MethodCallParameter from this MethodCallParameterCollection.
            </summary>
            <param name="value">
            The MethodCallParameter value to remove from this MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this MethodCallParameterCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Targets.MethodCallParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the MethodCallParameter at the given index in this MethodCallParameterCollection.
            </summary>
        </member>
        <member name="T:NLog.Targets.MethodCallParameterCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by MethodCallParameterCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Enumerator.#ctor(NLog.Targets.MethodCallParameterCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallParameterCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallParameterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Targets.NetworkTarget">
            <summary>
            Sends logging messages over network.
            </summary>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.NetworkSend(System.String,System.String)">
            <summary>
            Sends the provided text to the specified address.
            </summary>
            <param name="address">The address. Can be tcp://host:port, udp://host:port, http://host:port or https://host:port</param>
            <param name="text">The text to be sent.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.Append(NLog.LogEventInfo)">
            <summary>
            Sends the 
            rendered logging event over the network optionally concatenating it with a newline character.
            </summary>
            <param name="ev">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Async">
            <summary>
            Use asynchronous sending routine.
            </summary>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Address">
            <summary>
            The network address. Can be tcp://host:port, udp://host:port, http://host:port or https://host:port
            </summary>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.AddressLayout">
            <summary>
            The network address. Can be tcp://host:port, udp://host:port, http://host:port or https://host:port
            </summary>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.KeepConnection">
            <summary>
            Keep connection open whenever possible.
            </summary>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.NewLine">
            <summary>
            Append newline at the end of log message.
            </summary>
        </member>
        <member name="T:NLog.Targets.NLogViewerTarget">
            <summary>
            Sends logging messages to the remote instance of NLog Viewer. 
            NOT OPERATIONAL YET.
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.NLogViewerTarget"/> 
            and initializes default property values.
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.NeedsStackTrace">
            <summary>
            Returns the value indicating whether call site and/or source information should be gathered.
            </summary>
            <returns>2 - when IncludeSourceInfo is set, 1 when IncludeCallSite is set, 0 otherwise</returns>
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.Append(NLog.LogEventInfo)">
            <summary>
            Constructs an XML packet including the logging event information and sends it over the network.
            </summary>
            <param name="ev">Logging event information.</param>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.AppInfo">
            <summary>
            The AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeCallSite">
            <summary>
            Include call site (class and method name) in the information sent over the network.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeSourceInfo">
            <summary>
            Include source info (file name and line number) in the information sent over the network.
            </summary>
        </member>
        <member name="T:NLog.Targets.NullTarget">
            <summary>
            Discards logging messages optionally forcing the layouts to be calculated. Used mainly for debugging and benchmarking.
            </summary>
        </member>
        <member name="M:NLog.Targets.NullTarget.Append(NLog.LogEventInfo)">
            <summary>
            Does nothing. Optionally it calculates the layout text but
            discards the results.
            </summary>
            <param name="ev">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.NullTarget.FormatMessage">
            <summary>
            Perform layout calculation.
            </summary>
        </member>
        <member name="T:NLog.Targets.TraceTarget">
            <summary>
            Sends logging messages through System.Diagnostics.Trace
            </summary>
        </member>
        <member name="M:NLog.Targets.TraceTarget.Append(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the <see cref="T:System.Diagnostics.Trace"/> facility.
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Error"/> it uses the
            <see cref="M:System.Diagnostics.Trace.Fail(System.String)"/> method, otherwise it uses
            <see cref="M:System.Diagnostics.Trace.Write(System.String)"/> method.
            </summary>
            <param name="ev">The logging event.</param>
        </member>
        <member name="T:NLog.FilterAttribute">
            <summary>
            Marks class as a layout renderer and assigns a name to it
            </summary>
        </member>
        <member name="M:NLog.FilterAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.FilterAttribute"/> and assigns
            a name to it.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:NLog.FilterAttribute.Name">
            <summary>
            The name of the filter.
            </summary>
        </member>
        <member name="T:NLog.FilterCollection">
            <summary>
            A collection of elements of type Filter
            </summary>
        </member>
        <member name="M:NLog.FilterCollection.#ctor">
            <summary>
            Initializes a new empty instance of the FilterCollection class.
            </summary>
        </member>
        <member name="M:NLog.FilterCollection.#ctor(NLog.Filter[])">
            <summary>
            Initializes a new instance of the FilterCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.#ctor(NLog.FilterCollection)">
            <summary>
            Initializes a new instance of the FilterCollection class, containing elements
            copied from another instance of FilterCollection
            </summary>
            <param name="items">
            The FilterCollection whose elements are to be added to the new FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.AddRange(NLog.Filter[])">
            <summary>
            Adds the elements of an array to the end of this FilterCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.AddRange(NLog.FilterCollection)">
            <summary>
            Adds the elements of another FilterCollection to the end of this FilterCollection.
            </summary>
            <param name="items">
            The FilterCollection whose elements are to be added to the end of this FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.Add(NLog.Filter)">
            <summary>
            Adds an instance of type Filter to the end of this FilterCollection.
            </summary>
            <param name="value">
            The Filter to be added to the end of this FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.Contains(NLog.Filter)">
            <summary>
            Determines whether a specfic Filter value is in this FilterCollection.
            </summary>
            <param name="value">
            The Filter value to locate in this FilterCollection.
            </param>
            <returns>
            true if value is found in this FilterCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.FilterCollection.IndexOf(NLog.Filter)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this FilterCollection
            </summary>
            <param name="value">
            The Filter value to locate in the FilterCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.FilterCollection.Insert(System.Int32,NLog.Filter)">
            <summary>
            Inserts an element into the FilterCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Filter is to be inserted.
            </param>
            <param name="value">
            The Filter to insert.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.Remove(NLog.Filter)">
            <summary>
            Removes the first occurrence of a specific Filter from this FilterCollection.
            </summary>
            <param name="value">
            The Filter value to remove from this FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this FilterCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.FilterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Filter at the given index in this FilterCollection.
            </summary>
        </member>
        <member name="T:NLog.FilterCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by FilterCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.FilterCollection.Enumerator.#ctor(NLog.FilterCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.FilterCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.FilterCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.FilterCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.FilterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.FilterFactory">
            <summary>
            A factory of logging filters. Creates new filters based on their names.
            </summary>
        </member>
        <member name="M:NLog.FilterFactory.Clear">
            <summary>
            Removes all filter information from the factory.
            </summary>
        </member>
        <member name="M:NLog.FilterFactory.AddFiltersFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the specified assembly for types marked with <see cref="T:NLog.FilterAttribute"/> and adds
            them to the factory. Optionally it prepends the specified text to filter names to avoid
            naming collisions.
            </summary>
            <param name="theAssembly">The assembly to be scanned for filters.</param>
            <param name="prefix">The prefix to be prepended to filter names.</param>
        </member>
        <member name="M:NLog.FilterFactory.AddFilter(System.String,System.Type)">
            <summary>
            Registers the specified filter type to the factory under a specified name.
            </summary>
            <param name="name">The name of the filter (e.g. <code>whenEquals</code> or <code>whenContains</code>)</param>
            <param name="t">The type of the new filter</param>
            <remarks>
            The name specified in the name parameter can then be used
            to create filters.
            </remarks>
        </member>
        <member name="M:NLog.FilterFactory.CreateFilter(System.String)">
            <summary>
            Creates the filter object based on its filter name.
            </summary>
            <param name="name">The name of the filter (e.g. <code>whenEquals</code> or <code>whenNotEqual</code>)</param>
            <returns>A new instance of the <see cref="T:NLog.Filter"/> object.</returns>
        </member>
        <member name="T:NLog.FilterResult">
            <summary>
            Filter result.
            </summary>
        </member>
        <member name="F:NLog.FilterResult.Neutral">
            <summary>
            The filter doesn't want to decide whether to log or discard the message.
            </summary>
        </member>
        <member name="F:NLog.FilterResult.Log">
            <summary>
            The message should be logged.
            </summary>
        </member>
        <member name="F:NLog.FilterResult.Ignore">
            <summary>
            The message should not be logged.
            </summary>
        </member>
        <member name="T:NLog.Layout">
            <summary>
            Represents a string with embedded placeholders that can render contextual information.
            </summary>
        </member>
        <member name="M:NLog.Layout.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Layout"/> and sets it to empty string.
            </summary>
        </member>
        <member name="M:NLog.Layout.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Layout"/> and sets it to the specified string.
            </summary>
            <param name="txt">The layout string to parse.</param>
        </member>
        <member name="M:NLog.Layout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers
            that make up the event.
            </summary>
            <param name="ev">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="M:NLog.Layout.NeedsStackTrace">
            <summary>
            Returns the value indicating whether a stack trace and/or the source file
            information should be gathered during layout processing.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="P:NLog.Layout.Text">
            <summary>
            The layout text
            </summary>
        </member>
        <member name="T:NLog.LayoutRendererAttribute">
            <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.LayoutRendererAttribute"/>
            and assigns the <see cref="P:NLog.LayoutRendererAttribute.FormatString"/> to the specified value.
            </summary>
            <param name="formatString"></param>
        </member>
        <member name="P:NLog.LayoutRendererAttribute.FormatString">
            <summary>
            The format string that can be used to invoke the layout renderer.
            </summary>
        </member>
        <member name="P:NLog.LayoutRendererAttribute.IgnoresPadding">
            <summary>
            Marks the specified layout renderer as ignoring padding (used mostly for
            documentation generation).
            </summary>
        </member>
        <member name="T:NLog.LayoutRendererCollection">
            <summary>
            A collection of elements of type LayoutRenderer
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererCollection.#ctor">
            <summary>
            Initializes a new empty instance of the LayoutRendererCollection class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererCollection.#ctor(NLog.LayoutRenderer[])">
            <summary>
            Initializes a new instance of the LayoutRendererCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.#ctor(NLog.LayoutRendererCollection)">
            <summary>
            Initializes a new instance of the LayoutRendererCollection class, containing elements
            copied from another instance of LayoutRendererCollection
            </summary>
            <param name="items">
            The LayoutRendererCollection whose elements are to be added to the new LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.AddRange(NLog.LayoutRenderer[])">
            <summary>
            Adds the elements of an array to the end of this LayoutRendererCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.AddRange(NLog.LayoutRendererCollection)">
            <summary>
            Adds the elements of another LayoutRendererCollection to the end of this LayoutRendererCollection.
            </summary>
            <param name="items">
            The LayoutRendererCollection whose elements are to be added to the end of this LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Add(NLog.LayoutRenderer)">
            <summary>
            Adds an instance of type LayoutRenderer to the end of this LayoutRendererCollection.
            </summary>
            <param name="value">
            The LayoutRenderer to be added to the end of this LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Contains(NLog.LayoutRenderer)">
            <summary>
            Determines whether a specfic LayoutRenderer value is in this LayoutRendererCollection.
            </summary>
            <param name="value">
            The LayoutRenderer value to locate in this LayoutRendererCollection.
            </param>
            <returns>
            true if value is found in this LayoutRendererCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.LayoutRendererCollection.IndexOf(NLog.LayoutRenderer)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this LayoutRendererCollection
            </summary>
            <param name="value">
            The LayoutRenderer value to locate in the LayoutRendererCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Insert(System.Int32,NLog.LayoutRenderer)">
            <summary>
            Inserts an element into the LayoutRendererCollection at the specified index
            </summary>
            <param name="index">
            The index at which the LayoutRenderer is to be inserted.
            </param>
            <param name="value">
            The LayoutRenderer to insert.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Remove(NLog.LayoutRenderer)">
            <summary>
            Removes the first occurrence of a specific LayoutRenderer from this LayoutRendererCollection.
            </summary>
            <param name="value">
            The LayoutRenderer value to remove from this LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this LayoutRendererCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.LayoutRendererCollection.Item(System.Int32)">
            <summary>
            Gets or sets the LayoutRenderer at the given index in this LayoutRendererCollection.
            </summary>
        </member>
        <member name="T:NLog.LayoutRendererCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by LayoutRendererCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Enumerator.#ctor(NLog.LayoutRendererCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.LayoutRendererCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.LayoutRendererCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.LayoutRendererFactory">
            <summary>
            A factory for layout renderers.  Creates new layout renderers based on their names.
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererFactory.Clear">
            <summary>
            Removes all layout renderer information from the factory.
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererFactory.AddLayoutRenderersFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the specified assembly for types marked with <see cref="T:NLog.LayoutRendererAttribute"/> and adds
            them to the factory. Optionally it prepends the specified text to layout renderer names to avoid
            naming collisions.
            </summary>
            <param name="theAssembly">The assembly to be scanned for layout renderers.</param>
            <param name="prefix">The prefix to be prepended to layout renderer names.</param>
        </member>
        <member name="M:NLog.LayoutRendererFactory.AddLayoutRenderer(System.String,System.Type)">
            <summary>
            Registers the specified layout renderer type to the factory under a specified name.
            </summary>
            <param name="name">The name of the layout renderer (e.g. <code>logger</code>, <code>message</code> or <code>aspnet-request</code>)</param>
            <param name="t">The type of the new layout renderer</param>
            <remarks>
            The name specified in the name parameter can then be used
            to create layout renderers.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRendererFactory.CreateLayoutRenderer(System.String,System.String)">
            <summary>
            Creates the layout renderer object based on its layout renderer name and sets its properties from parameters string.
            </summary>
            <param name="name">The name of the layout renderer (e.g. <code>message</code> or <code>aspnet-request</code>)</param>
            <param name="parameters">Parameters to the layout renderer.</param>
            <returns>A new instance of the <see cref="T:NLog.LayoutRenderer"/> object.</returns>
        </member>
        <member name="T:NLog.LogEventInfo">
            <summary>
            Represents the logging event.
            </summary>
        </member>
        <member name="F:NLog.LogEventInfo.ZeroDate">
            <summary>
            The date of the first log event created.
            </summary>
        </member>
        <member name="F:NLog.LogEventInfo.Empty">
            <summary>
            An empty event - for rendering layouts where logging
            event is not otherwise available.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(System.DateTime,NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[],System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:NLog.LogEventInfo"/> and assigns its fields.
            </summary>
            <param name="ts">Logging timestamp.</param>
            <param name="level">Log level</param>
            <param name="loggerName">Logger name</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> object</param>
            <param name="message">Log message including parameter placeholders</param>
            <param name="parameters">Parameter array.</param>
            <param name="exception">Exception information.</param>
        </member>
        <member name="P:NLog.LogEventInfo.TimeStamp">
            <summary>
            Gets the timestamp of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Level">
            <summary>
            Gets the level of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.UserStackFrame">
            <summary>
            Gets the stack frame of the method that did the logging.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.StackTrace">
            <summary>
            Gets the entire stack trace.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Exception">
            <summary>
            Gets the exception information.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.LoggerName">
            <summary>
            Gets the logger name.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Message">
            <summary>
            Gets the raw log message including any parameter placeholders.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Parameters">
            <summary>
            Gets the parameter values or <see langword="null" /> if no parameters have
            been specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormatProvider">
            <summary>
            Gets the format provider that was provided while logging or <see langword="null" />
            when no formatProvider was specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormattedMessage">
            <summary>
            Renders the logging message by invoking <see cref="M:System.String.Format(System.String,System.Object)"/> on
            a <see cref="P:NLog.LogEventInfo.Message"/>, <see cref="P:NLog.LogEventInfo.Parameters"/> and <see cref="P:NLog.LogEventInfo.FormatProvider"/>.
            </summary>
        </member>
        <member name="T:NLog.Logger">
            <summary>
            Provides logging interface and utility functions.
            </summary>
        </member>
        <member name="M:NLog.Logger.IsEnabled(NLog.LogLevel)">
            <summary>
            Determines if logging is enabled for the specified level.
            </summary>
            <param name="level">level to be checked</param>
            <returns><see langword="true" /> if logging is enabled for the specified level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String)">
            <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.LogException(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String)">
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.DebugException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String)">
            <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.InfoException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String)">
            <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.WarnException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String)">
            <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.ErrorException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String)">
            <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.FatalException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="P:NLog.Logger.IsDebugEnabled">
            <summary>
            Determines if logging is enabled for the <c>Debug</c> level.
            </summary>
            <returns><see langword="true" /> if logging is enabled for the <c>Debug</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsInfoEnabled">
            <summary>
            Determines if logging is enabled for the <c>Info</c> level.
            </summary>
            <returns><see langword="true" /> if logging is enabled for the <c>Info</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsWarnEnabled">
            <summary>
            Determines if logging is enabled for the <c>Warn</c> level.
            </summary>
            <returns><see langword="true" /> if logging is enabled for the <c>Warn</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsErrorEnabled">
            <summary>
            Determines if logging is enabled for the <c>Error</c> level.
            </summary>
            <returns><see langword="true" /> if logging is enabled for the <c>Error</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsFatalEnabled">
            <summary>
            Determines if logging is enabled for the <c>Fatal</c> level.
            </summary>
            <returns><see langword="true" /> if logging is enabled for the <c>Fatal</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="T:NLog.LogLevel">
            <summary>
            Defines available log levels.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Debug">
            <summary>
            The Debug level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Info">
            <summary>
            The Info level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Warn">
            <summary>
            The Warn level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Error">
            <summary>
            The Error level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Fatal">
            <summary>
            The Fatal level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Off">
            <summary>
            The Off level.
            </summary>
        </member>
        <member name="M:NLog.LogLevel.FromOrdinal(System.Int32)">
            <summary>
            Gets the <see cref="T:NLog.LogLevel"/> that corresponds to the specified ordinal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns>The <see cref="T:NLog.LogLevel"/> instance. For 0 it returns <see cref="F:NLog.LogLevel.Debug"/>, 1 gives <see cref="F:NLog.LogLevel.Info"/> and so on</returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than or equal to the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &lt;= l2.Ordinal</c></returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than or equal to the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &gt;= l2.Ordinal</c></returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &lt; l2.Ordinal</c></returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &gt; l2.Ordinal</c></returns>
        </member>
        <member name="M:NLog.LogLevel.FromString(System.String)">
            <summary>
            Returns the <see cref="T:NLog.LogLevel"/> that corresponds to the supplied <see langword="string" />.
            </summary>
            <param name="s">the texual representation of the log level</param>
            <returns>the enumeration value.</returns>
        </member>
        <member name="M:NLog.LogLevel.ToString">
            <summary>
            Returns a string representation of the log level.
            </summary>
            <returns>Log level name.</returns>
        </member>
        <member name="P:NLog.LogLevel.Name">
            <summary>
            Gets the name of the log level.
            </summary>
        </member>
        <member name="T:NLog.LogManager">
            <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogManager.CreateNullLogger">
            <summary>
            Creates a logger that discards all log messages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.LogManager.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">name of the logger</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogManager.ReconfigExistingLoggers">
            <summary>
            Loops through all loggers previously returned by <see cref="M:NLog.LogManager.GetLogger(System.String)"/>
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
        </member>
        <member name="M:NLog.LogManager.DisableLogging">
            <summary>Decreases the log enable counter and if it reaches -1 
            the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
            <returns>An object that iplements IDisposable whose Dispose() method
            reenables logging. To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogManager.EnableLogging">
            <summary>Increases the log enable counter and if it reaches 0 the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogManager.IsLoggingEnabled">
            <summary>
            Returns <see langword="true"/> if logging is currently enabled.
            </summary>
            <returns><see langword="true"/> if logging is currently enabled, 
            <see langword="false"/> otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
        </member>
        <member name="P:NLog.LogManager.ThrowExceptions">
            <summary>
            Specified whether NLog should throw exceptions. By default exceptions
            are not thrown under any circumstances.
            </summary>
        </member>
        <member name="P:NLog.LogManager.Configuration">
            <summary>
            Gets or sets the current logging configuration.
            </summary>
        </member>
        <member name="P:NLog.LogManager.GlobalThreshold">
            <summary>
            Global log threshold. Log events below this threshold are not logged.
            </summary>
        </member>
        <member name="T:NLog.MDC">
            <summary>
            Mapped Diagnostics Context - a thread-local structure that keeps a dictionary
            of strings and provides methods to output them in layouts. 
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.MDC.Set(System.String,System.String)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.MDC.Get(System.String)">
            <summary>
            Gets the current thread MDC named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value of String.Empty if the value is not present.</returns>
        </member>
        <member name="M:NLog.MDC.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
        </member>
        <member name="M:NLog.MDC.Remove(System.String)">
            <summary>
            Removes the specified item from current thread MDC.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.MDC.Clear">
            <summary>
            Clears the content of current thread MDC.
            </summary>
        </member>
        <member name="T:NLog.NDC">
            <summary>
            Nested Diagnostics Context - a thread-local structure that keeps a stack
            of strings and provides methods to output them in layouts
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.NDC.Push(System.String)">
            <summary>
            Pushes the specified text on current thread NDC.
            </summary>
            <param name="text">The text to be pushed.</param>
            <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
        </member>
        <member name="M:NLog.NDC.Pop">
            <summary>
            Pops the top message off the NDC stack.
            </summary>
            <returns>The top message which is no longer on the stack.</returns>
        </member>
        <member name="M:NLog.NDC.GetTopMessage">
            <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
            <returns>The top message. </returns>
        </member>
        <member name="M:NLog.NDC.Clear">
            <summary>
            Clears current thread NDC stack.
            </summary>
        </member>
        <member name="M:NLog.NDC.GetAllMessages(System.String)">
            <summary>
            Gets all messages on the stack separated by the specified separator.
            </summary>
            <param name="separator">The separator.</param>
            <returns>Messages on the stack concatenated using the specified separator.</returns>
        </member>
        <member name="M:NLog.NDC.GetBottomMessages(System.Int32,System.String)">
            <summary>
            Calculates the string representing <c>count</c> bottommost messages using the specified separator.
            </summary>
            <param name="count">Number of bottom messages to be returned</param>
            <param name="separator">The separator</param>
            <returns>A string representing <c>count</c> bottommost messages using the specified separator.</returns>
        </member>
        <member name="M:NLog.NDC.GetTopMessages(System.Int32,System.String)">
            <summary>
            Calculates the string representing <c>count</c> topmost messages using the specified separator.
            </summary>
            <param name="count">Number of topmost messages to be returned</param>
            <param name="separator">The separator</param>
            <returns>A string representing <c>count</c> topmost messages using the specified separator.</returns>
        </member>
        <member name="T:NLog.TargetAttribute">
            <summary>
            Marks class as a logging target and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.TargetAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the TargetAttribute class and sets the name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:NLog.TargetAttribute.Name">
            <summary>
            The name of the logging target.
            </summary>
        </member>
        <member name="P:NLog.TargetAttribute.IgnoresLayout">
            <summary>
            Determines whether the target ignores layout specification.
            </summary>
        </member>
        <member name="T:NLog.TargetCollection">
            <summary>
            A collection of elements of type Target
            </summary>
        </member>
        <member name="M:NLog.TargetCollection.#ctor">
            <summary>
            Initializes a new empty instance of the TargetCollection class.
            </summary>
        </member>
        <member name="M:NLog.TargetCollection.#ctor(NLog.Target[])">
            <summary>
            Initializes a new instance of the TargetCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.#ctor(NLog.TargetCollection)">
            <summary>
            Initializes a new instance of the TargetCollection class, containing elements
            copied from another instance of TargetCollection
            </summary>
            <param name="items">
            The TargetCollection whose elements are to be added to the new TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.AddRange(NLog.Target[])">
            <summary>
            Adds the elements of an array to the end of this TargetCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.AddRange(NLog.TargetCollection)">
            <summary>
            Adds the elements of another TargetCollection to the end of this TargetCollection.
            </summary>
            <param name="items">
            The TargetCollection whose elements are to be added to the end of this TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.Add(NLog.Target)">
            <summary>
            Adds an instance of type Target to the end of this TargetCollection.
            </summary>
            <param name="value">
            The Target to be added to the end of this TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.Contains(NLog.Target)">
            <summary>
            Determines whether a specfic Target value is in this TargetCollection.
            </summary>
            <param name="value">
            The Target value to locate in this TargetCollection.
            </param>
            <returns>
            true if value is found in this TargetCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.TargetCollection.IndexOf(NLog.Target)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this TargetCollection
            </summary>
            <param name="value">
            The Target value to locate in the TargetCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.TargetCollection.Insert(System.Int32,NLog.Target)">
            <summary>
            Inserts an element into the TargetCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Target is to be inserted.
            </param>
            <param name="value">
            The Target to insert.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.Remove(NLog.Target)">
            <summary>
            Removes the first occurrence of a specific Target from this TargetCollection.
            </summary>
            <param name="value">
            The Target value to remove from this TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this TargetCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.TargetCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Target at the given index in this TargetCollection.
            </summary>
        </member>
        <member name="T:NLog.TargetCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by TargetCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.TargetCollection.Enumerator.#ctor(NLog.TargetCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.TargetCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.TargetCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.TargetCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.TargetFactory">
            <summary>
            A factory of logging targets. Creates new targets based on their names.
            </summary>
        </member>
        <member name="M:NLog.TargetFactory.Clear">
            <summary>
            Removes all target information from the factory.
            </summary>
        </member>
        <member name="M:NLog.TargetFactory.Reset">
            <summary>
            Removes all targets and reloads them from NLog assembly.
            </summary>
        </member>
        <member name="M:NLog.TargetFactory.AddTargetsFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the specified assembly for types marked with <see cref="T:NLog.TargetAttribute"/> and adds
            them to the factory. Optionally it prepends the specified text to the target names to avoid
            naming collisions.
            </summary>
            <param name="theAssembly">The assembly to be scanned for targets.</param>
            <param name="prefix">The prefix to be prepended to target names.</param>
        </member>
        <member name="M:NLog.TargetFactory.AddDefaultTargets">
            <summary>
            Adds default targets from the NLog.dll assembly.
            </summary>
        </member>
        <member name="M:NLog.TargetFactory.AddTarget(System.String,System.Type)">
            <summary>
            Registers the specified target type to the factory under a specified name.
            </summary>
            <param name="targetName">The name of the target (e.g. <code>File</code> or <code>Console</code>)</param>
            <param name="targetType">The type of the new target</param>
            <remarks>
            The name specified in the targetName parameter can then be used
            to create target.
            </remarks>
        </member>
        <member name="M:NLog.TargetFactory.CreateTarget(System.String)">
            <summary>
            Creates the target object based on its target name.
            </summary>
            <param name="name">The name of the target (e.g. <code>File</code> or <code>Console</code>)</param>
            <returns>A new instance of the Target object.</returns>
        </member>
    </members>
</doc>
