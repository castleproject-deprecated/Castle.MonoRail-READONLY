<?xml version="1.0" encoding="utf-8" ?>
<configuration>

	<configSections>
		<section 
			name="castle"
			type="Castle.Windsor.Configuration.AppDomain.CastleSectionHandler, Castle.Windsor" />
	</configSections>

	<castle>
	
		<components>
		
			<!-- UI -->
			
			<!-- The forms were added to be able to wire with the kernel instance -->
			<!-- or with components -->
			
			<component 
				id="mainform" 
				type="TimeTracking.UI.MainForm, TimeTracking"
				inspectionBehavior="none" lifestyle="transient" />

			<component 
				id="taskmng" 
				type="TimeTracking.UI.TaskManagement, TimeTracking"
				inspectionBehavior="none" lifestyle="transient" />

			<!-- Data -->

			<!-- the implementations uses memory and thus are lost when the app is closed -->
			<!-- but you could easily implement one based on SQL databases, or NHibernate or Ibatis -->
			<!-- or even use in memory but with binary persistence -->

			<component 
				id="task.data.access" 
				service="TimeTracking.DataAccess.ITaskDataAccess, TimeTracking" 
				type="TimeTracking.DataAccess.MemoryTaskDataAccessRepository, TimeTracking" />

			<component 
				id="timerecord.data.access" 
				service="TimeTracking.DataAccess.ITimeRecordDataAccess, TimeTracking" 
				type="TimeTracking.DataAccess.MemoryTimeRecordDataAccess, TimeTracking" />

			<!-- Application Services -->
			
			<!-- those does not offer interface contracts -->
			<!-- as they are unlikely to have different implementations -->

			<component 
				id="task.service" 
				type="TimeTracking.TaskService, TimeTracking" />

			<component 
				id="timerecord.service" 
				type="TimeTracking.TimeRecordService, TimeTracking" />

		
		</components>
		
	</castle>

</configuration>
