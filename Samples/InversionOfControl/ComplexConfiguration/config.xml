<?xml version="1.0" encoding="utf-8" ?> 

<configuration>
	<!-- 
		Please note the usage of service and type attributes.
		Windsor will automatically installs the components and 
		facilities with a type attribute (and optionally service 
		for components)
	-->
	
	<!--
	
	This is a facility configuration example:
	
	<facilities>
	
		<facility id="nhibernate" type="Full Type Name, AssemblyName">
		
		</facility>
	
	</facilities>
	
	-->


    <components>

        <component id="smtpemailsender" 
			service="ComplexConfiguration.IEmailSender, ComplexConfiguration" 
			type="ComplexConfiguration.Components.SmtpEmailSender, ComplexConfiguration">
            
            <parameters>
                <hosts>
                    <!-- 
                    
						The following nodes will be converted to an array of String 
						which is what the component expects. If the component expected
						an int[], the MicroKernel would try to convert each element 
						as well.
						
						The MicroKernel also supports
						- Dictionaries
						  <dict keyType="System.String, mscorlib" valueType="System.Int32, mscorlib">
						    <item key="key1">1</item>
						    <item key="key2">2</item>
						  </dict>
						  
						- Lists 
						  <list type="typetobeconverted">
						    <item>item1</item>
						    <item>item2</item>
						  </list>
                    -->
					<array>
						<elem>MyFirstHost</elem>
						<elem>OtherHost</elem>
					</array>
				</hosts>
            </parameters>
            
        </component>
        
        <component id="newsletter" 
			service="ComplexConfiguration.INewsletterService, ComplexConfiguration" 
			type="ComplexConfiguration.Components.SimpleNewsletterService, ComplexConfiguration">
            
            <parameters>
                <!-- This argument will be converted to a System.Type        -->
                <sometype>System.Collections.IList, mscorlib</sometype>
                <!-- Here we're overriding which IEmailSender implementation 
                     this component should use                               -->
                <sender>${smtpemailsender}</sender>
                <!-- Same thing for ITemplateEngine                          -->
                <templateEngine>${nvelocityengine}</templateEngine>
            </parameters>
            
        </component>        

        <component id="nvelocityengine" 
			service="ComplexConfiguration.ITemplateEngine, ComplexConfiguration" 
			type="ComplexConfiguration.Components.NVelocityTemplateEngine, ComplexConfiguration" />
        
    </components>

</configuration>