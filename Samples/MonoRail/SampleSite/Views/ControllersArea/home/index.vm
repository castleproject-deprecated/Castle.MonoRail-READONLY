<div align="center">
  <h2>Controllers</h2>
</div>

<div class="container">

<p>
  Controllers are the main entry point for your application logic. They should
  invoke business methods, perform inputs validation and choose witch view
  should be rendered back to the user.
</p>

<p>
  To create your Controller, just extend the Controller class or SmartDispatcherController. 
  Each public instance method will be considered a valid and accessible action. For example:
</p>

<pre><code>
namespace Yournamespace
{
  public class HomeController : Controller
  {
	public void MyAction()
	{
	}

	public void OtherAction()
	{
	}
  }
}
</code></pre>

<p>
Which can then be accessed from http://yourhost/yourvirtualdir/home/myaction.castle
</p>

</div>

<h3>Properties and Methods</h3>

<div class="container">

<p>
  The Controller class exposes a handful of properties and methods to common
  tasks. 

  <h4>Properties</h4>
  
  <ul>
    <li><strong>LayoutName</strong>: You can override </li>
    <li><strong>PropertyBag</strong>: Dictionary to pass data to the view</li>
    <li><strong>Session</strong>: Dictionary with a session scope</li>
    <li><strong>HttpContext</strong>: Access the underlying Asp.Net HttpContext</li>
    <li><strong>Request</strong>: Access a façade Request</li>
    <li><strong>Response</strong>: Access a façade Response</li>
  </ul>

  <h4>Methods</h4>
  
  <ul>
    <li><strong>RenderView</strong>: Choose which view should be processed</li>
    <li><strong>Redirect</strong>: Send the user to another controller/action</li>
    <li><strong>CancelView</strong>: Skip the view processing</li>
    <li><strong>RenderText</strong>: Instead of processing a view, send the specified text</li>
  </ul>

</p>

</div>

<h3>ControllerDetails attribute</h3>

<div class="container">

<p>
  This attribute allows you to inform the framework about the controller's name and area.

<pre><code>
namespace Yournamespace
{
  [ControllerDetails("myhome", Area="myarea")]
  public class HomeController : Controller
  {
	public void MyAction()
	{
	}
  }
}
</code></pre>

<p>
Which will be accessible from http://yourhost/yourvirtualdir/myarea/myhome/myaction.castle
<p>


</p>

</div>

<h3>Smart Dispatcher</h3>

<div class="container">

<p>
  This Controller implementation tries to map form data to method arguments. Currently
  it supports Strings, primitive types, Guid and HttpPostedFile. The inputs on your form
  <b>must </b> have the same name of the method arguments.

<pre><code>
namespace Yournamespace
{
  public class AccountController : SmartDispatcherController
  {
	public void Save(String name, String address, int age)
	{
	  ...
	}
  }
}
</code></pre>

And your form will look like:

<pre><code>
Name: &lt;input type="text" name="name"&gt;
Address: &lt;input type="text" name="address"&gt;
Age: 
&lt;select name="age"&gt;
  &lt;option&gt;18&lt;/option&gt;
  &lt;option&gt;19&lt;/option&gt;
  &lt;option&gt;20&lt;/option&gt;
  &lt;option&gt;21&lt;/option&gt;
&lt;/select&gt;

</code></pre>

</p>

</div>
