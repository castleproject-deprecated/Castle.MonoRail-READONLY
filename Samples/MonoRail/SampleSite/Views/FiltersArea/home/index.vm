<div align="center">
  <h2>Filters</h2>
</div>

<div class="container">

<p>
  Filters are executed before and/or after your actions. It's useful for security, dynamic content
  and to keep away repetitive code. 
</p>

<p>
  To create a filter, create a class that implements the IFilter interface. Then 
  associate the filter with your controller (you can always create an abstract controller class
  and associate a filter with it, and finally make your controllers extend from it)
</p>

<pre><code>
namespace Yournamespace
{
  public class SecurityFilter : IFilter
  {
    public bool Perform(ExecuteWhen exec, IEngineContext context, Controller controller)
    {
      if (context.Session.Contains("user"))
      {
        return true;
      }
      else
      {
        context.Response.Redirect("account", "login");
      }

      return false;
    }
  }
}
</code></pre>

<p>
When you associate the filter with a controller, you must say when the
filter is supposed to run (before of after the action):
</p>

<pre><code>
  [Filter(ExecuteWhen.Before, typeof(SecurityFilter))]
  public class HomeController : Controller
  {
	public void MyAction()
	{
	}
  }
</code></pre>

<p>
For filters that run before the action, return false means 'stop processing this request'.
You must return true to allow the flow to continue.
</p>

</div>

<h3>SkipFilter</h3>

<div class="container">

<p>
  Sometimes you'll face a situation that a specific action shouldn't 
  be intercepted by the filter. In these cases, use the SkipFilter attribute:

<pre><code>
  [Filter(ExecuteWhen.Before, typeof(SecurityFilter))]
  public class HomeController : Controller
  {
	public void SecuredAction()
	{
	}

	[SkipFilter]
	public void NonSecured()
	{
	}
  }
</code></pre>

</p>

</div>
